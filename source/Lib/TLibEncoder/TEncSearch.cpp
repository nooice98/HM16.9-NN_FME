/* The copyright in this software is being made available under the BSD
 * License, included below. This software may be subject to other third party
 * and contributor rights, including patent rights, and no such rights are
 * granted under this license.
 *
 * Copyright (c) 2010-2016, ITU/ISO/IEC
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *  * Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *  * Neither the name of the ITU/ISO/IEC nor the names of its contributors may
 *    be used to endorse or promote products derived from this software without
 *    specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
 * THE POSSIBILITY OF SUCH DAMAGE.
 */

/** \file     TEncSearch.cpp
 \brief    encoder search class
 */

// Eigen Library has to be included first, or I'll get errors using namespace Eigen
#include <eigen3/Eigen/Dense>
using namespace Eigen;

#include "TLibCommon/CommonDef.h"
#include "TLibCommon/TComRom.h"
#include "TLibCommon/TComMotionInfo.h"
#include "TEncSearch.h"
#include "TLibCommon/TComTU.h"
#include "TLibCommon/Debug.h"
#include <math.h>
#include <limits>
#include <fstream>
#include <iostream>

// EMI: Parameters declaration

signed short MVX_HALF, MVX_QRTER, MVY_HALF, MVY_QRTER = 0;
std::vector<uint> array_e;
uint PUHeight, PUWidth, C;

// Used to store index of Maximum element of Output layer
MatrixXf::Index NN_out, maxCol;

/*
The next set of variables are part of Eigen library for Matrix and Array manipulations
The "Array" object arithmetic performs element-wise operations, hence will be used for adding Bias and BatchNorm
The "Matrix" object arithmetic performs matrix operations, hence it's used mainly for weight multiplications
We can transform to Array or to Matrix using .array() and .matrix()
*/
Array<float, 40, 1> X1; Array<float, 40, 1> X2; Array<float, 40, 1> X3; Array<float, 49, 1> OUT;
Array<float, 4, 1> IN_embs0, IN_embs1; Array<float, 17, 1> IN;
Array<float, 8, 4> embs0, embs1;
Matrix<float, 40, 17> in_h1;
Matrix<float, 40, 40> h1_h2;
Matrix<float, 40, 40> h2_h3;
Matrix<float, 49, 40> h3_out;
Array<float, 40, 1> b1, BN_gamma_1, BN_beta_1;
Array<float, 40, 1> b2, BN_gamma_2, BN_beta_2;
Array<float, 40, 1> b3, BN_gamma_3, BN_beta_3;
Array<float, 49, 1> bout;
Array<float, 9, 1> IN_errors, BN_gamma_in, mean, stdev;

/* ReLU function
ReLU is achieved in Eigen by using the following code:
(X1.array() < 0).select(0, X1)
This code snippet replaces all negative numbers with zeros
*/

void NN_pred(){
  
  // Normalize input values using the computed mean and standard deviations
  IN_errors << array_e[0], array_e[1], array_e[2], array_e[3], C, array_e[4], array_e[5], array_e[6], array_e[7];
  IN_errors = (IN_errors - mean) / stdev;

  // Input layer also consists of categorical variables, in which we will use embedding matrices depending on block Height and Width

  switch (PUHeight) {
    case 4:   IN_embs0 << embs0.row(1).transpose(); break;
    case 8:   IN_embs0 << embs0.row(2).transpose(); break;
    case 16:  IN_embs0 << embs0.row(3).transpose();	break;
    case 12:  IN_embs0 << embs0.row(4).transpose();	break;
    case 24:  IN_embs0 << embs0.row(5).transpose();	break;
    case 32:  IN_embs0 << embs0.row(6).transpose();	break;
    case 64:  IN_embs0 << embs0.row(7).transpose();	break;
    default:  IN_embs0 << embs0.row(0).transpose();	break;
  }

  switch (PUWidth) {
    case 4:   IN_embs1 << embs1.row(1).transpose(); break;
    case 8:   IN_embs1 << embs1.row(2).transpose(); break;
    case 12:  IN_embs1 << embs1.row(3).transpose();	break;
    case 16:  IN_embs1 << embs1.row(4).transpose();	break;
    case 24:  IN_embs1 << embs1.row(5).transpose();	break;
    case 32:  IN_embs1 << embs1.row(6).transpose();	break;
    case 64:  IN_embs1 << embs1.row(7).transpose();	break;
    default:  IN_embs1 << embs1.row(0).transpose();	break;
  }

  // Input Layer
  IN_errors = IN_errors * BN_gamma_in;
  IN << IN_embs0, IN_embs1, IN_errors;

  // First Hidden Layer
  X1 = in_h1 * IN.matrix();
  X1 = X1 + b1;
  X1 = (((X1.array() < 0).select(0, X1)) * BN_gamma_1) + BN_beta_1;
  
  // Second Hidden Layer
  X2 = h1_h2 * X1.matrix();
  X2 = X2 + b2;
  X2 = (((X2.array() < 0).select(0, X2)) * BN_gamma_2) + BN_beta_2;

  // Third Hidden Layer
  X3 = h2_h3 * X2.matrix();
  X3 = X3 + b3;
  X3 = (((X3.array() < 0).select(0, X3)) * BN_gamma_3) + BN_beta_3;
  
  // OUTPUT LAYER
  OUT = h3_out * X3.matrix();
  OUT = OUT + bout;
    
  // Decision: NN_out holds the index of the maximum element
  OUT.maxCoeff(&NN_out, &maxCol);
  
  switch (NN_out) {
    case 0: MVX_HALF = -1;  MVX_QRTER = -1;		MVY_HALF = -1;  MVY_QRTER = -1;		break;
    case 1: MVX_HALF = -1;  MVX_QRTER = 0;		MVY_HALF = -1;  MVY_QRTER = -1;		break;
    case 2: MVX_HALF = 0;   MVX_QRTER = -1;		MVY_HALF = -1;  MVY_QRTER = -1;		break;
    case 3: MVX_HALF = 0;   MVX_QRTER = 0;	  MVY_HALF = -1;  MVY_QRTER = -1;	  break;
    case 4: MVX_HALF = 0;   MVX_QRTER = 1;		MVY_HALF = -1;  MVY_QRTER = -1;		break;
    case 5: MVX_HALF = 1;   MVX_QRTER = 0;		MVY_HALF = -1;  MVY_QRTER = -1;	  break;
    case 6: MVX_HALF = 1;   MVX_QRTER = 1;		MVY_HALF = -1;  MVY_QRTER = -1;		break;

    case 7: MVX_HALF = -1;  MVX_QRTER = -1;		MVY_HALF = -1;  MVY_QRTER = 0;		break;
    case 8: MVX_HALF = -1;  MVX_QRTER = 0;		MVY_HALF = -1;  MVY_QRTER = 0;		break;
    case 9: MVX_HALF = 0;   MVX_QRTER = -1;		MVY_HALF = -1;  MVY_QRTER = 0;		break;
    case 10: MVX_HALF = 0;  MVX_QRTER = 0;	  MVY_HALF = -1;  MVY_QRTER = 0;		break;
    case 11: MVX_HALF = 0;  MVX_QRTER = 1;		MVY_HALF = -1;  MVY_QRTER = 0;		break;
    case 12: MVX_HALF = 1;  MVX_QRTER = 0;		MVY_HALF = -1;  MVY_QRTER = 0;		break;
    case 13: MVX_HALF = 1;  MVX_QRTER = 1;		MVY_HALF = -1;  MVY_QRTER = 0;		break;

    case 14: MVX_HALF = -1; MVX_QRTER = -1;	  MVY_HALF = 0;   MVY_QRTER = -1;		break;
    case 15: MVX_HALF = -1; MVX_QRTER = 0;		MVY_HALF = 0;   MVY_QRTER = -1;		break;
    case 16: MVX_HALF = 0;  MVX_QRTER = -1;   MVY_HALF = 0;   MVY_QRTER = -1;		break;
    case 17: MVX_HALF = 0;  MVX_QRTER = 0;	  MVY_HALF = 0;   MVY_QRTER = -1;		break;
    case 18: MVX_HALF = 0;  MVX_QRTER = 1;		MVY_HALF = 0;   MVY_QRTER = -1;		break;
    case 19: MVX_HALF = 1;  MVX_QRTER = 0;		MVY_HALF = 0;   MVY_QRTER = -1;		break;
    case 20: MVX_HALF = 1;  MVX_QRTER = 1;		MVY_HALF = 0;   MVY_QRTER = -1;		break;

    case 21: MVX_HALF = -1; MVX_QRTER = -1;	  MVY_HALF = 0;   MVY_QRTER = 0;		break;
    case 22: MVX_HALF = -1; MVX_QRTER = 0;		MVY_HALF = 0;   MVY_QRTER = 0;		break;
    case 23: MVX_HALF = 0;  MVX_QRTER = -1;	  MVY_HALF = 0;   MVY_QRTER = 0;		break;
    case 24: MVX_HALF = 0;  MVX_QRTER = 0;	  MVY_HALF = 0;   MVY_QRTER = 0;		break;
    case 25: MVX_HALF = 0;  MVX_QRTER = 1;		MVY_HALF = 0;   MVY_QRTER = 0;		break;
    case 26: MVX_HALF = 1;  MVX_QRTER = 0;		MVY_HALF = 0;   MVY_QRTER = 0;		break;
    case 27: MVX_HALF = 1;  MVX_QRTER = 1;		MVY_HALF = 0;   MVY_QRTER = 0;		break;

    case 28: MVX_HALF = -1; MVX_QRTER = -1;	  MVY_HALF = 0;   MVY_QRTER = 1;		break;
    case 29: MVX_HALF = -1; MVX_QRTER = 0;		MVY_HALF = 0;   MVY_QRTER = 1;		break;
    case 30: MVX_HALF = 0;  MVX_QRTER = -1;	  MVY_HALF = 0;   MVY_QRTER = 1;		break;
    case 31: MVX_HALF = 0;  MVX_QRTER = 0;	  MVY_HALF = 0;   MVY_QRTER = 1;		break;
    case 32: MVX_HALF = 0;  MVX_QRTER = 1;		MVY_HALF = 0;   MVY_QRTER = 1;		break;
    case 33: MVX_HALF = 1;  MVX_QRTER = 0;		MVY_HALF = 0;   MVY_QRTER = 1;		break;
    case 34: MVX_HALF = 1;  MVX_QRTER = 1;		MVY_HALF = 0;   MVY_QRTER = 1;		break;

    case 35: MVX_HALF = -1; MVX_QRTER = -1;   MVY_HALF = 1;   MVY_QRTER = 0;	  break;
    case 36: MVX_HALF = -1; MVX_QRTER = 0;		MVY_HALF = 1;   MVY_QRTER = 0;	  break;
    case 37: MVX_HALF = 0;  MVX_QRTER = -1;	  MVY_HALF = 1;   MVY_QRTER = 0;	  break;
    case 38: MVX_HALF = 0;  MVX_QRTER = 0;	  MVY_HALF = 1;   MVY_QRTER = 0;		break;
    case 39: MVX_HALF = 0;  MVX_QRTER = 1;		MVY_HALF = 1;   MVY_QRTER = 0;	  break;
    case 40: MVX_HALF = 1;  MVX_QRTER = 0;		MVY_HALF = 1;   MVY_QRTER = 0;	  break;
    case 41: MVX_HALF = 1;  MVX_QRTER = 1;		MVY_HALF = 1;   MVY_QRTER = 0;	  break;

    case 42: MVX_HALF = -1; MVX_QRTER = -1;	  MVY_HALF = 1;   MVY_QRTER = 1;		break;
    case 43: MVX_HALF = -1; MVX_QRTER = 0;		MVY_HALF = 1;   MVY_QRTER = 1;		break;
    case 44: MVX_HALF = 0;  MVX_QRTER = -1;	  MVY_HALF = 1;   MVY_QRTER = 1;		break;
    case 45: MVX_HALF = 0;  MVX_QRTER = 0;	  MVY_HALF = 1;   MVY_QRTER = 1;	  break;
    case 46: MVX_HALF = 0;  MVX_QRTER = 1;		MVY_HALF = 1;   MVY_QRTER = 1;		break;
    case 47: MVX_HALF = 1;  MVX_QRTER = 0;		MVY_HALF = 1;   MVY_QRTER = 1;		break;
    case 48: MVX_HALF = 1;  MVX_QRTER = 1;		MVY_HALF = 1;   MVY_QRTER = 1;		break;
    default: MVX_HALF = 0;  MVX_QRTER = 0;		MVY_HALF = 0;   MVY_QRTER = 0;		break;
  }

  /* 
  Reset all values of arrays
  For Eigen library objects, reset is done by using object method .setZero()
  */
  IN_embs0.setZero(); IN_embs1.setZero(); IN_errors.setZero(); IN.setZero();
  X1.setZero(); X2.setZero(); OUT.setZero();
  array_e.clear();
  // NN_out = 0;

}

//end of modification


//! \ingroup TLibEncoder
//! \{

static const TComMv s_acMvRefineH[9] =
{
  TComMv(  0,  0 ), // 0
  TComMv(  0, -1 ), // 1
  TComMv(  0,  1 ), // 2
  TComMv( -1,  0 ), // 3
  TComMv(  1,  0 ), // 4
  TComMv( -1, -1 ), // 5
  TComMv(  1, -1 ), // 6
  TComMv( -1,  1 ), // 7
  TComMv(  1,  1 )  // 8
};

static const TComMv s_acMvRefineQ[9] =
{
  TComMv(  0,  0 ), // 0
  TComMv(  0, -1 ), // 1
  TComMv(  0,  1 ), // 2
  TComMv( -1, -1 ), // 5
  TComMv(  1, -1 ), // 6
  TComMv( -1,  0 ), // 3
  TComMv(  1,  0 ), // 4
  TComMv( -1,  1 ), // 7
  TComMv(  1,  1 )  // 8
};

static Void offsetSubTUCBFs(TComTU &rTu, const ComponentID compID)
{
        TComDataCU *pcCU              = rTu.getCU();
  const UInt        uiTrDepth         = rTu.GetTransformDepthRel();
  const UInt        uiAbsPartIdx      = rTu.GetAbsPartIdxTU(compID);
  const UInt        partIdxesPerSubTU = rTu.GetAbsPartIdxNumParts(compID) >> 1;

  //move the CBFs down a level and set the parent CBF

  UChar subTUCBF[2];
  UChar combinedSubTUCBF = 0;

  for (UInt subTU = 0; subTU < 2; subTU++)
  {
    const UInt subTUAbsPartIdx = uiAbsPartIdx + (subTU * partIdxesPerSubTU);

    subTUCBF[subTU]   = pcCU->getCbf(subTUAbsPartIdx, compID, uiTrDepth);
    combinedSubTUCBF |= subTUCBF[subTU];
  }

  for (UInt subTU = 0; subTU < 2; subTU++)
  {
    const UInt subTUAbsPartIdx = uiAbsPartIdx + (subTU * partIdxesPerSubTU);
    const UChar compositeCBF = (subTUCBF[subTU] << 1) | combinedSubTUCBF;

    pcCU->setCbfPartRange((compositeCBF << uiTrDepth), compID, subTUAbsPartIdx, partIdxesPerSubTU);
  }
}


TEncSearch::TEncSearch()
: m_puhQTTempTrIdx(NULL)
, m_pcQTTempTComYuv(NULL)
, m_pcEncCfg (NULL)
, m_pcTrQuant (NULL)
, m_pcRdCost (NULL)
, m_pcEntropyCoder (NULL)
, m_iSearchRange (0)
, m_bipredSearchRange (0)
, m_motionEstimationSearchMethod (MESEARCH_FULL)
, m_pppcRDSbacCoder (NULL)
, m_pcRDGoOnSbacCoder (NULL)
, m_pTempPel (NULL)
, m_isInitialized (false)
{
  for (UInt ch=0; ch<MAX_NUM_COMPONENT; ch++)
  {
    m_ppcQTTempCoeff[ch]                           = NULL;
#if ADAPTIVE_QP_SELECTION
    m_ppcQTTempArlCoeff[ch]                        = NULL;
#endif
    m_puhQTTempCbf[ch]                             = NULL;
    m_phQTTempCrossComponentPredictionAlpha[ch]    = NULL;
    m_pSharedPredTransformSkip[ch]                 = NULL;
    m_pcQTTempTUCoeff[ch]                          = NULL;
#if ADAPTIVE_QP_SELECTION
    m_ppcQTTempTUArlCoeff[ch]                      = NULL;
#endif
    m_puhQTTempTransformSkipFlag[ch]               = NULL;
  }

  for (Int i=0; i<MAX_NUM_REF_LIST_ADAPT_SR; i++)
  {
    memset (m_aaiAdaptSR[i], 0, MAX_IDX_ADAPT_SR * sizeof (Int));
  }
  for (Int i=0; i<AMVP_MAX_NUM_CANDS+1; i++)
  {
    memset (m_auiMVPIdxCost[i], 0, (AMVP_MAX_NUM_CANDS+1) * sizeof (UInt) );
  }

  setWpScalingDistParam( NULL, -1, REF_PIC_LIST_X );
}


Void TEncSearch::destroy()
{
  assert (m_isInitialized);
  if ( m_pTempPel )
  {
    delete [] m_pTempPel;
    m_pTempPel = NULL;
  }

  if ( m_pcEncCfg )
  {
    const UInt uiNumLayersAllocated = m_pcEncCfg->getQuadtreeTULog2MaxSize()-m_pcEncCfg->getQuadtreeTULog2MinSize()+1;

    for (UInt ch=0; ch<MAX_NUM_COMPONENT; ch++)
    {
      for (UInt layer = 0; layer < uiNumLayersAllocated; layer++)
      {
        delete[] m_ppcQTTempCoeff[ch][layer];
#if ADAPTIVE_QP_SELECTION
        delete[] m_ppcQTTempArlCoeff[ch][layer];
#endif
      }
      delete[] m_ppcQTTempCoeff[ch];
      delete[] m_puhQTTempCbf[ch];
#if ADAPTIVE_QP_SELECTION
      delete[] m_ppcQTTempArlCoeff[ch];
#endif
    }

    for( UInt layer = 0; layer < uiNumLayersAllocated; layer++ )
    {
      m_pcQTTempTComYuv[layer].destroy();
    }
  }

  delete[] m_puhQTTempTrIdx;
  delete[] m_pcQTTempTComYuv;

  for (UInt ch=0; ch<MAX_NUM_COMPONENT; ch++)
  {
    delete[] m_pSharedPredTransformSkip[ch];
    delete[] m_pcQTTempTUCoeff[ch];
#if ADAPTIVE_QP_SELECTION
    delete[] m_ppcQTTempTUArlCoeff[ch];
#endif
    delete[] m_phQTTempCrossComponentPredictionAlpha[ch];
    delete[] m_puhQTTempTransformSkipFlag[ch];
  }
  m_pcQTTempTransformSkipTComYuv.destroy();

  m_tmpYuvPred.destroy();
  m_isInitialized = false;
}

TEncSearch::~TEncSearch()
{
  if (m_isInitialized)
  {
    destroy();
  }
}




Void TEncSearch::init(TEncCfg*       pcEncCfg,
                      TComTrQuant*   pcTrQuant,
                      Int            iSearchRange,
                      Int            bipredSearchRange,
                      MESearchMethod motionEstimationSearchMethod,
                      const UInt     maxCUWidth,
                      const UInt     maxCUHeight,
                      const UInt     maxTotalCUDepth,
                      TEncEntropy*   pcEntropyCoder,
                      TComRdCost*    pcRdCost,
                      TEncSbac***    pppcRDSbacCoder,
                      TEncSbac*      pcRDGoOnSbacCoder
                      )
{
  assert (!m_isInitialized);
  m_pcEncCfg                     = pcEncCfg;
  m_pcTrQuant                    = pcTrQuant;
  m_iSearchRange                 = iSearchRange;
  m_bipredSearchRange            = bipredSearchRange;
  m_motionEstimationSearchMethod = motionEstimationSearchMethod;
  m_pcEntropyCoder               = pcEntropyCoder;
  m_pcRdCost                     = pcRdCost;

  m_pppcRDSbacCoder              = pppcRDSbacCoder;
  m_pcRDGoOnSbacCoder            = pcRDGoOnSbacCoder;
  
  for (UInt iDir = 0; iDir < MAX_NUM_REF_LIST_ADAPT_SR; iDir++)
  {
    for (UInt iRefIdx = 0; iRefIdx < MAX_IDX_ADAPT_SR; iRefIdx++)
    {
      m_aaiAdaptSR[iDir][iRefIdx] = iSearchRange;
    }
  }

  // initialize motion cost
  for( Int iNum = 0; iNum < AMVP_MAX_NUM_CANDS+1; iNum++)
  {
    for( Int iIdx = 0; iIdx < AMVP_MAX_NUM_CANDS; iIdx++)
    {
      if (iIdx < iNum)
      {
        m_auiMVPIdxCost[iIdx][iNum] = xGetMvpIdxBits(iIdx, iNum);
      }
      else
      {
        m_auiMVPIdxCost[iIdx][iNum] = MAX_INT;
      }
    }
  }

  const ChromaFormat cform=pcEncCfg->getChromaFormatIdc();
  initTempBuff(cform);

  m_pTempPel = new Pel[maxCUWidth*maxCUHeight];

  const UInt uiNumLayersToAllocate = pcEncCfg->getQuadtreeTULog2MaxSize()-pcEncCfg->getQuadtreeTULog2MinSize()+1;
  const UInt uiNumPartitions = 1<<(maxTotalCUDepth<<1);
  for (UInt ch=0; ch<MAX_NUM_COMPONENT; ch++)
  {
    const UInt csx=::getComponentScaleX(ComponentID(ch), cform);
    const UInt csy=::getComponentScaleY(ComponentID(ch), cform);
    m_ppcQTTempCoeff[ch] = new TCoeff* [uiNumLayersToAllocate];
#if ADAPTIVE_QP_SELECTION
    m_ppcQTTempArlCoeff[ch]  = new TCoeff*[uiNumLayersToAllocate];
#endif
    m_puhQTTempCbf[ch] = new UChar  [uiNumPartitions];

    for (UInt layer = 0; layer < uiNumLayersToAllocate; layer++)
    {
      m_ppcQTTempCoeff[ch][layer] = new TCoeff[(maxCUWidth*maxCUHeight)>>(csx+csy)];
#if ADAPTIVE_QP_SELECTION
      m_ppcQTTempArlCoeff[ch][layer]  = new TCoeff[(maxCUWidth*maxCUHeight)>>(csx+csy) ];
#endif
    }

    m_phQTTempCrossComponentPredictionAlpha[ch]    = new SChar  [uiNumPartitions];
    m_pSharedPredTransformSkip[ch]                 = new Pel   [MAX_CU_SIZE*MAX_CU_SIZE];
    m_pcQTTempTUCoeff[ch]                          = new TCoeff[MAX_CU_SIZE*MAX_CU_SIZE];
#if ADAPTIVE_QP_SELECTION
    m_ppcQTTempTUArlCoeff[ch]                      = new TCoeff[MAX_CU_SIZE*MAX_CU_SIZE];
#endif
    m_puhQTTempTransformSkipFlag[ch]               = new UChar [uiNumPartitions];
  }
  m_puhQTTempTrIdx   = new UChar  [uiNumPartitions];
  m_pcQTTempTComYuv  = new TComYuv[uiNumLayersToAllocate];
  for( UInt ui = 0; ui < uiNumLayersToAllocate; ++ui )
  {
    m_pcQTTempTComYuv[ui].create( maxCUWidth, maxCUHeight, pcEncCfg->getChromaFormatIdc() );
  }
  m_pcQTTempTransformSkipTComYuv.create( maxCUWidth, maxCUHeight, pcEncCfg->getChromaFormatIdc() );
  m_tmpYuvPred.create(MAX_CU_SIZE, MAX_CU_SIZE, pcEncCfg->getChromaFormatIdc());
  m_isInitialized = true;

  // EMI: Weights and Bias Initialization based on QP
  
  if(m_pcEncCfg->getQP() == 27){
    
    embs0 <<
			-0.016161263,0.22880873,0.22320303,-0.3297318,
			-0.0006919863,-6.2549545e-05,0.015281123,-0.02913979,
			0.0038561656,0.0018048334,-0.007983699,0.004395072,
			0.0064114765,0.025989925,0.00014712109,0.05041724,
			-0.0013608702,0.0018084903,-0.015061863,0.0524371,
			0.1453997,0.103986315,0.12786487,0.22532098,
			0.0034490658,-0.0029964596,0.081367396,0.20214045,
			0.12265239,-0.8890253,0.53385025,0.71282804;

    embs1 <<
			0.37639597,-0.13605624,0.22684428,0.11590788,
			-0.0128242,-0.030922145,0.006126549,0.004392062,
			-0.006582262,0.015102944,-0.007935754,0.0019571835,
			0.100540295,-0.005142437,-0.008261721,0.0031367878,
			-0.0052226004,0.07224179,0.020187609,0.00018376614,
			0.09346686,0.039280698,0.018980514,-0.05183943,
			-0.003188853,0.23033556,0.15080269,0.03965783,
			0.025087243,0.79564553,0.9436582,-0.3174448;

    in_h1 <<
			-0.005112156,0.050786175,-0.0012733295,0.06460129,0.0014890815,0.035817605,0.0036010502,-0.021423025,-2.3389814,-1.4483528,0.06431822,8.927556,5.2435117,1.2944149,0.12680586,-0.5115715,-0.9057989,
			0.006342346,0.09829657,-0.07366626,-0.012919266,0.26638,-0.13006185,0.08898459,-0.0046000695,-0.13521603,-0.6079734,-2.4016964,4.8324018,1.4762304,0.7445919,-0.16290367,0.7976908,5.995018,
			0.14788969,0.011453398,-0.12586765,0.098027304,0.16284767,-0.09106518,0.17405894,0.010079602,-0.5566726,-2.648826,-1.0985054,-0.16707683,1.0635248,0.9727663,1.0384108,4.1916046,2.1959352,
			0.012764947,-0.004512831,0.045002,-0.050217956,-0.07929397,0.037963673,-0.01488,-0.0108426595,-0.5120132,0.5246987,-0.24942829,9.019668,-5.2926526,0.674781,-0.644121,1.6703727,-0.89052445,
			0.04195098,-0.049613766,-1.3076129,0.6811464,-2.9975832,-2.3385932,1.6490896,0.108430885,0.4693687,0.27045262,-0.46444717,-7.342339,3.9994059,0.7114188,-0.16107796,1.2776163,-4.7926784,
			0.03445776,0.08055641,-0.014124949,0.10380179,0.3146616,0.076675266,-0.035742324,-0.02110311,-3.9469306,0.8224779,-0.03375259,-2.2105515,2.461881,0.9389758,0.9832822,0.77753776,-0.20161763,
			-0.009715641,-0.042431187,-0.15089487,0.18068922,-0.15840751,0.09812975,0.0003525969,0.0028630742,-0.60104644,0.14902267,0.34526947,9.370171,-1.404285,-0.8985432,-0.64577067,0.52740246,1.7398473,
			-0.018941563,-0.042816006,-0.049608596,0.189966,-0.28704777,0.10793857,-0.026622185,-0.08897538,-0.4877925,1.3952446,-1.9303663,-2.209541,3.740987,-3.261842,-0.66847235,2.4341538,-0.010269589,
			0.00075780053,-0.14212857,-0.21948649,0.12432397,0.23418081,0.05402924,0.0032920465,0.021916011,0.050456878,-0.30635318,1.1248175,-0.7587359,-2.0262868,0.96122545,0.58340156,1.6466001,-7.716885,
			-0.0101864915,0.022019036,0.004560396,0.0256035,0.07954248,0.061482485,-0.039394613,-0.01614022,-0.013197943,0.03982824,0.044559836,-10.333521,2.4652233,0.4716843,0.009681763,0.06254394,-0.03910914,
			-0.029634066,0.024921557,0.0532202,0.053645823,0.21688156,0.12577182,-0.052467734,-0.06482973,-0.0584542,0.4431595,-0.16927682,5.1345606,3.3007407,-3.4387095,0.46868828,0.61483043,-3.533994,
			0.019567452,-0.0055450923,0.02115128,0.0897892,-0.1095401,0.10031721,-0.021457545,-0.041276947,-0.16732934,-2.7735486,-0.23633425,3.3356392,9.08496,0.7034151,-0.20352757,0.47268593,-1.1369281,
			0.002986958,0.028581614,0.054338142,-0.039059587,-0.019908393,0.018877108,0.027763719,-0.017170692,2.2043674,-0.17506118,-1.3128366,-5.4236317,-1.7872713,1.7701811,-1.6245916,1.617538,0.30822942,
			-0.021821288,0.028700784,0.043607313,0.10710109,0.3620987,0.15947287,-0.08747029,-0.084697984,0.26954854,1.086389,0.7571617,-2.4687114,1.4446659,0.22114238,-4.045708,-0.08752351,1.283471,
			0.046036936,0.08091819,-0.07278255,0.15534186,-0.18508577,-0.38600072,0.2213194,0.07710082,0.77106816,1.5950041,1.6436853,2.6228538,-1.7246373,-1.4475793,-1.2851857,-4.539717,1.065156,
			0.03710164,-0.021846863,-0.52487034,0.43778884,-0.79609376,0.89237744,-0.6367607,0.23492293,-0.32287553,1.673698,-1.6985512,-3.9804292,4.5006976,-2.2662473,0.18385452,2.5016406,-2.734001,
			-0.060808163,-0.020617547,0.023608066,-0.05212688,-0.25337315,0.4655263,-0.32984683,-0.092563316,-0.6252466,0.66972935,-0.13141811,-7.5248957,0.7433006,1.6973747,-0.0008716666,-1.5579405,3.616329,
			0.041362733,0.008372635,-0.13589433,0.0071784807,0.086372204,0.22360736,-0.22109643,0.057542533,-0.027549464,-1.3351972,1.7629695,-8.494548,-0.0737706,1.2484825,-0.9203959,1.9861481,0.77650017,
			0.020790601,-0.10905673,-0.15634677,0.07906883,-0.026419012,0.16289556,-0.11637707,-0.045846622,0.07958707,-0.22381791,0.31912294,-5.789566,5.9964533,-1.6629506,0.6393092,-3.4282026,4.9546046,
			-0.1181609,0.1638537,1.3009229,-1.1889665,-1.2607658,-0.08668158,0.15421808,0.34176713,0.78423345,-1.8116741,0.9061659,-5.2265477,10.146678,-1.2776084,-0.15481654,-0.47770926,-0.9509388,
			-0.016905302,0.009220087,-0.03198862,-0.089106284,0.016460164,-0.08883232,0.015621442,0.03230323,-0.022496648,-0.09721387,0.107074425,0.79837865,12.689288,-0.11381144,-0.15020029,0.1588872,-0.26982126,
			0.007054671,0.058674447,-0.049667366,0.19208883,-0.20283684,0.065769956,-0.003952519,-0.011704905,1.3559339,-1.9060749,0.19060652,-0.93963194,1.8340911,-0.2023832,-0.9697563,5.0735016,-3.4258368,
			0.06012036,0.03290659,-0.049214322,0.16541071,-0.041480593,0.06575468,0.08361624,0.03994674,0.08916952,1.2919116,0.1423576,0.061640456,-0.11479311,0.057850793,0.1432766,-6.417227,-0.5168828,
			-0.028447997,-0.0034909109,0.06927539,-0.08392201,0.1510865,0.06927933,-0.065835945,-0.0016986672,-0.83705693,2.0820348,-1.129964,-1.2981104,-1.7182142,1.1244887,1.3036244,-4.9717684,0.59258133,
			-0.00081207923,0.015280435,0.008569907,0.027984159,-0.23359826,0.4187867,-0.31055263,0.034219626,0.6939416,-0.08055439,-0.41003734,10.209275,-0.9403349,-1.3522806,0.5932542,-0.4307476,-1.1622801,
			0.043328136,0.033647694,-0.14579435,-0.80906844,-0.31849843,-0.56509405,-0.16749565,-0.056096967,0.03947098,-0.13264404,0.1153859,0.767325,13.904676,-0.34103298,0.017644389,0.26732856,0.13749672,
			-0.0034512249,0.028926471,0.06427288,-0.0022665914,-0.0537183,0.011326602,0.005387935,-0.08969771,-1.6843408,-0.04968557,1.2128781,-0.76791847,-1.4843624,0.7253523,1.6088288,1.1307328,-6.787396,
			0.023617353,-0.021795586,0.104295805,0.082049586,0.07361606,0.224886,-0.048584543,0.0033441852,0.49179938,0.81752396,-3.0366437,4.3756037,2.667941,-2.0368147,-0.0093402965,1.6262119,1.1839045,
			0.054028653,-0.025117848,-0.11734525,0.1528662,-0.19247343,0.10277459,0.032067735,0.030677702,-0.09502639,0.00067106204,-1.9624648,0.87896264,0.06772571,3.5642931,0.49313667,-0.09372476,-5.8013597,
			0.038064867,-0.0019789785,-0.055852722,-0.08387948,0.17255318,0.017543016,-0.056934245,0.034729365,-0.14452048,0.105961025,1.3124875,7.282714,1.1194347,-2.622248,-0.8327081,0.4199513,2.3924491,
			-0.0055107307,-0.023363737,-0.4075315,0.3610095,0.44972175,0.19581671,-0.10813556,0.14508224,0.052327834,-3.0694256,0.38201302,2.3477437,9.104969,-0.2193486,-0.13269725,1.7198058,-0.32673386,
			0.0034770563,-0.0016016716,-0.03075386,0.09074514,0.47633275,0.24664588,-0.08889858,0.06277653,0.492437,0.89395696,-0.84179944,-6.632539,-6.653512,1.960334,0.12477308,1.5527133,-2.3451295,
			0.025257168,0.043991297,-0.31106022,0.41890725,-0.5239532,0.05814341,-0.0170412,0.012503578,-0.10295885,0.6812693,0.5798778,-4.421501,-9.282204,-1.0077982,0.8455996,3.7058282,0.78250176,
			0.041367248,0.031677365,-0.2875768,0.3727457,-0.045609914,0.09844321,-0.038742717,0.059892382,0.32718533,0.38670072,-0.3568359,1.6833967,6.2027497,0.9767809,-0.91424346,-5.846252,0.72085357,
			-0.034415614,0.074432544,-0.11908868,0.19342053,-0.001662302,0.030265588,-0.054742243,0.0061540925,1.0220046,-1.0123991,0.35683566,8.016121,-5.2368126,0.58205885,1.0061256,-2.1306925,-0.05099826,
			0.027933797,0.0067794686,-0.055181462,0.037369885,-0.014454525,-0.008197269,-0.0003623689,-0.07511214,-0.15974535,0.39342538,0.48116356,2.5560176,3.2171757,0.90505856,0.09809503,-3.0349293,-6.9934745,
			0.07809538,-0.15098351,1.8613788,-1.7581489,0.6874806,-1.4805881,1.2999182,-0.15033817,-0.068222806,1.5958947,-0.5988456,0.91223395,-13.596171,1.4232836,0.32319066,2.31844,-0.5362872,
			0.050038707,0.027642502,-0.21564612,0.45534557,-0.3774137,0.31743935,0.07447656,0.12078827,0.3305108,0.45451173,0.754764,-3.1368253,-11.236345,-1.4961326,0.42015493,1.1701884,0.8470988,
			0.005827221,0.064473666,0.2368601,-0.2554688,0.519782,0.0013595411,-0.015012453,0.011413318,0.29269838,0.1943714,-0.31379825,8.8507,2.0736823,-2.7457209,0.42715603,-0.418876,-0.42315707,
			0.012847669,-0.0504831,-0.13052103,0.12757991,-0.29531935,-0.12736815,0.09977755,-0.013576711,-0.074403115,-0.22758125,0.09454366,-1.630019,-4.8533473,0.7269679,0.07617652,-0.3877737,7.2972093;

    h1_h2 <<
			-1.548386,-3.1421165,0.45854,-8.360243,-1.2141706,-0.2980962,0.5597908,-0.65594447,-1.3808414,2.3691518,0.62479013,-1.1224561,-1.8782021,-0.40840656,1.3560609,-2.097143,-0.9009533,0.4462989,6.442011,-1.1913693,0.060677737,0.2142104,0.6350979,-2.6111073,2.1805704,-0.283473,-2.5003955,-0.1921067,-3.3641055,1.6417925,-0.83419114,-4.119088,1.0027524,-1.0618728,-0.769321,-3.1677735,-2.6010556,2.1084394,0.67987895,1.0965005,
			-0.13409354,-0.44204605,-0.01931259,-6.0164223,0.5361906,0.915872,-2.001618,0.57989275,-0.22631997,8.372229,-1.400284,-0.6925503,2.2468698,0.41803348,-0.4223722,1.7279665,0.6014581,0.6167261,0.41952062,-0.5316838,-0.07773021,0.51372004,-0.017940577,-0.14665298,-2.168075,-1.2605393,0.9497312,-1.1715057,0.099619314,-1.011136,-0.24711874,-1.1038948,0.06856539,0.44828293,-10.94409,-1.1703736,-0.45420432,0.78053576,-1.2977228,-1.516781,
			-0.29238945,-0.22477639,1.4227624,0.5803264,-4.6616917,-0.52558583,3.5993,2.2978077,0.052557442,-5.75953,-3.2238104,-3.1412513,0.13759603,-0.55023265,0.3722127,-1.0388763,0.5087831,0.35181004,-2.337252,-0.7243375,0.022333067,0.40426323,1.4023063,0.95937175,0.93659997,-1.6935929,0.19561712,-2.075424,-1.0034124,-1.4302067,0.4523153,2.835656,-0.09762572,-0.23000866,1.2610961,-1.3862401,-2.50306,2.8233135,-2.2159674,-1.0679884,
			-0.14218266,0.20604378,-0.055937614,-1.0220433,-0.022868909,0.60421723,1.6521852,-1.170498,-0.37888134,2.8235445,1.409529,-1.8916922,2.1505334,1.0611511,1.0863672,0.8829104,1.8721944,-0.41623443,0.06673859,0.7992214,-0.46708488,-0.62331533,-1.1978102,-1.6352544,-1.5336678,0.40650344,1.207384,0.18623415,0.7107316,-1.2762294,-0.85921985,0.26974463,1.5655112,1.5282888,-3.6135778,-0.17019345,-1.4582808,0.27151117,-1.3492994,-2.5562716,
			1.2668171,-1.0517555,-0.21223086,0.07689521,-0.7344918,5.7673607,2.8341591,1.2142928,0.46212482,-2.829043,-0.5568122,1.8696257,-5.4153957,-1.409752,0.033657618,-0.0007510892,0.23790762,0.79579777,-2.0718572,-0.26414916,0.5538041,-1.2409663,-0.3065898,-0.0052395216,-0.94880384,-0.90652615,-1.9774213,-0.76186234,-1.0897948,-1.156526,0.026446689,-3.0539746,-1.4425665,0.44052228,-1.4782718,-1.2211679,-1.571431,-0.45945415,-0.631965,-0.8427552,
			0.04446425,0.46440917,-1.2599517,-0.2606669,-0.4051655,-0.6482232,0.62081087,1.441807,-2.1482987,-2.0451672,-1.208891,0.6269499,1.1447994,4.349103,-2.0838175,1.9976718,-2.0493376,1.5732026,-1.5183251,-0.738453,1.2771037,0.77659214,-0.033324614,-3.9433897,-3.2383366,-1.8209308,-2.8147094,-0.5253338,-1.3529019,0.58122873,-0.8066358,-0.3295478,-0.2873504,1.3002421,-7.178226,-0.26278275,-1.8501881,0.38934192,1.0793025,-0.33106765,
			-2.6261714,0.9980483,2.4216597,1.5632855,0.64103806,-0.21345076,3.559065,0.062351692,-1.6114419,-2.6774628,1.9527873,-1.477179,-1.9192624,0.6864746,0.80593944,-1.2685198,0.86490315,1.9230812,0.3279273,1.0995063,-10.149923,2.7966802,1.5630937,0.18709643,1.8516948,-2.883814,-0.5434053,0.020274125,-2.08231,-0.95877105,0.16156872,0.35135996,-0.6300231,-0.535401,0.20208842,1.5689124,-0.35766074,2.5252125,1.4819735,-1.7793392,
			-0.2589287,0.17986816,0.39992428,1.6433192,-0.9720438,0.7375428,2.5813754,-2.6419747,0.036407042,-5.468925,-0.518104,-2.1829524,1.8593521,1.0834793,-1.333756,0.7435765,0.64445007,0.17943625,-3.594943,-4.1712704,-4.160306,-0.4389768,0.0062924083,-0.5883433,1.0801961,-7.070837,1.6893463,0.550126,-1.9171999,-0.70085156,-0.51802063,-0.6350285,-2.1304746,-0.0733605,0.7291465,-1.2892439,-3.8370974,0.6112458,-3.5219052,-2.1810954,
			-2.9286308,1.447266,-0.3096915,2.727065,-3.3870866,-1.2565372,0.22425947,-1.3070577,-0.48501962,-6.7375245,0.382096,0.7868149,-0.6124515,-1.0538905,-1.2473629,-0.89769995,-3.1217682,-3.2143629,-0.01277837,-2.0639186,0.3615678,1.227288,0.86537176,1.4118636,-0.46781477,-0.062274132,-1.1138431,0.34431016,-1.5432835,0.73567027,1.1311111,-1.5161836,-0.20442054,-0.9639832,1.5649897,1.8906478,-1.2857177,2.6452289,1.6648786,0.034870412,
			2.0381575,2.232717,1.7769499,-0.6679673,0.14477736,-1.302107,-0.9001387,1.4085678,-2.1792831,-1.2505528,-0.87345093,3.5092006,-0.37413305,-0.09178194,-2.4895933,0.50634325,0.44481847,-1.7748464,0.380341,-1.6731474,-1.2197008,2.0262825,-0.41246694,-1.8088601,-0.23325649,-1.6017622,-4.888312,2.0810442,3.394188,-5.483316,1.008218,-1.5089821,-5.6900573,1.931857,-0.08199546,-2.3726037,-2.2035444,-3.218898,1.5453504,0.9361297,
			-0.21915591,0.40513167,-0.34451398,-3.4701412,0.19585533,0.0580618,-0.0058218096,0.85484296,-0.6252193,-2.8663092,6.485643,-0.061620742,-1.3097001,-0.733717,-0.44702205,3.727144,-2.6126535,-0.8242381,0.19020662,-0.32605004,1.7591779,0.6310564,1.2747478,-3.7107065,-1.1586554,-2.3550456,-0.52666736,-0.30805498,-1.2962767,1.9223936,-0.24296859,-2.4384005,-0.31220853,-1.0049964,-4.189965,0.0924319,-0.5728655,0.31018874,2.2181373,-3.142074,
			0.5089495,-1.2207551,0.03231813,4.6295023,-0.48521355,-0.49540755,3.1009603,1.6258559,-0.6803403,-2.4988809,-2.6270056,0.83707833,1.0604675,2.318697,-0.25041664,0.3092898,1.6618884,-1.3455671,-2.4290748,-2.8143842,0.07576231,1.7457448,1.445865,-2.1204967,-2.019977,-0.4765219,-0.777912,-0.46857893,-0.4682566,1.5804857,-1.7501296,-0.90794486,-7.1066103,4.0302596,-0.5465599,0.74386424,-2.0880938,-1.9899181,-2.611265,-0.22243123,
			-3.2976854,0.9718063,-2.718309,0.77936596,-0.5265544,-0.99476564,2.2937431,-0.83190006,-2.616925,0.4582848,-1.5951389,0.1984252,1.9343333,0.8862286,1.0629646,-1.3112513,1.492416,-1.1812946,-3.0344996,-3.5673792,-1.8955812,1.8895626,-0.94465786,0.06436477,0.94854486,-0.7412402,-2.4729943,1.9256276,1.376685,0.13840292,-1.0084656,0.28825802,0.075984776,-2.1467698,-0.7178961,1.3562969,-1.5118651,-1.1485683,0.42589983,1.4466976,
			0.42399135,-0.2882034,1.1309416,2.1693606,0.35171315,-1.8745192,-5.409519,-0.22681297,2.679643,0.11046228,1.3179597,-1.5063134,-0.07545344,1.5384219,-0.039522886,-0.90700006,0.28159365,-0.07988881,-2.6212401,-2.791179,-0.15603103,1.4403834,-0.7537191,-1.271591,0.36328486,0.22773291,-4.0544934,-2.096859,-0.33926874,0.9771195,-1.4143735,4.0544987,-0.22455102,-2.2833893,-0.053532884,-0.87726915,-0.77364194,2.0968614,-1.012921,-0.04023286,
			-0.8737979,-0.8768971,0.4064855,1.4686108,-0.44215405,1.8794736,-3.4688048,-0.36572304,1.1978434,0.58199036,-0.8593328,-1.2301161,-1.822313,-1.0223842,0.29122978,-1.2770144,-0.39199394,1.9814509,-4.036301,-1.2271599,-0.11979636,0.20334387,-0.056877896,4.3367906,-0.23457178,0.69388604,2.0576773,0.228717,0.82977414,0.122920215,-1.6490048,-0.681551,0.7192219,-1.7414763,0.19230624,4.133961,0.9131165,0.4570098,-1.5809468,-0.9424917,
			-0.5760407,-1.4380728,0.48333448,-1.8944236,-2.7604063,-0.24587409,-3.0466485,1.3205189,-0.7253745,3.0403066,-2.7538426,0.22387369,0.009806155,-0.28102782,-0.4095949,0.21836768,0.68214804,1.2762121,-0.8626513,-0.41951072,-1.8051252,0.21934646,0.32180524,0.4848427,-8.777345,-0.5251058,-0.023951907,-0.7792858,0.5250637,-1.5542793,-0.2601206,2.5710762,-0.28841674,0.44838217,-0.79842144,-1.8851928,-1.14401,2.2658587,-4.66462,-0.80755734,
			4.0885153,0.07993179,-0.37169725,2.7775664,-1.228198,1.1269863,1.5763693,-1.1089741,-1.6992017,0.2232539,-0.5142854,-1.7200408,-1.4535894,1.8027899,-1.9742353,0.2735179,-0.54440004,0.01264615,1.5151176,0.313704,0.87198216,-1.5923791,1.1126257,1.7063196,-3.9225986,-0.75908184,1.8421216,-1.3218633,4.2342963,0.29264623,1.1204989,-4.650251,1.1147841,-3.9405556,-0.0058885133,-1.1727324,-1.5557295,-2.0846546,-1.3562608,1.4301771,
			-0.6069692,-0.91082966,-0.22290927,-11.114274,1.7507347,-0.364061,-4.701973,-2.270406,1.9443136,1.9454831,0.39570484,-3.0204196,0.6017033,-0.6845277,-1.4608847,1.6248577,0.16373436,-1.3214633,2.0273225,1.4447099,0.38906264,1.5959448,0.55853534,1.2748815,0.069677725,-0.5287323,-0.52892184,0.6715779,-0.77593046,-1.4521363,-0.22228304,5.2447505,0.60672987,-0.9900354,0.46106797,1.6383052,-1.6796937,-2.766529,-0.7254476,0.96808726,
			0.31141004,2.743687,0.5557561,-1.858336,-0.23353916,-2.1027062,-1.4053094,3.8561785,-1.3501898,0.01503812,0.022321142,0.28372398,0.12405503,-0.5866227,-0.18385546,1.193152,0.1065282,-4.4433117,-1.6979282,-2.945882,-0.106057405,-0.27768436,0.018793572,0.7435692,-0.9884592,-1.9630649,-3.7378232,2.9963539,0.28455508,1.1386485,-0.7740985,0.22810559,-0.8996614,-1.2447333,-2.4071233,-1.9545754,-1.6528375,1.7075678,2.0072067,-1.7232254,
			-0.75674754,0.9747975,0.50741756,-1.0049869,-0.2550259,0.20036384,1.5128698,0.96919096,0.17257316,1.190462,-0.37313437,3.3789139,1.5647969,0.28853962,1.4476283,-0.041872144,-0.6347338,0.91634035,2.693518,3.7869995,-0.6822617,0.11212376,-0.5145158,0.45694777,0.39327797,0.9268209,0.98401386,0.006677722,0.69521695,0.3419572,0.51356816,-1.6766806,-0.49452382,0.34991938,-0.37515843,0.7752968,2.5759459,0.42885742,0.24649031,-0.020022256,
			0.14198317,-0.25064683,-0.82274294,-2.8239503,-0.3965954,0.007822166,2.1983325,-0.52907896,1.640762,-0.7830185,-1.0334514,-0.13789096,-0.1347561,-0.99587697,-0.7555345,-0.03265672,1.5538876,-1.0182867,-0.057821177,-2.553267,-1.5903977,-0.73874265,5.9825535,0.8107856,0.49850756,-2.3143442,0.25087577,0.050803836,0.16598497,0.052350752,-2.5386894,-2.4006505,-3.800264,2.3915286,0.04275174,0.34717232,-2.9538677,-3.0937476,0.17593576,-0.77520084,
			0.33268562,0.99167424,0.046501253,2.360927,0.68855655,1.3115966,-1.6679624,-1.9135044,-3.1058562,-0.047399405,1.1461958,-0.35977393,-3.8664184,-0.44552368,0.8947534,3.3050706,1.0866032,-2.5468907,0.7242657,-0.3466744,2.4454648,-2.98191,-0.30725974,5.1469727,-0.9584094,-1.9891472,-1.0680563,1.0143224,1.0734264,-1.8528252,0.9393107,1.5781574,0.04890031,0.71327376,-0.14948578,-1.8203863,-1.1098856,0.79281956,-0.5510052,1.2044365,
			1.5322403,-0.33436236,-0.04763381,3.1631656,-0.7357115,-0.92601705,-2.5353718,-0.85032946,-1.1067353,-2.8717127,-0.71734947,-0.44879103,0.48924884,0.5043424,0.77665234,-1.6262436,2.4695525,-0.39682654,0.12723397,-0.7677329,0.30013996,-0.017021561,0.36823583,-0.71076334,0.022308236,-0.35392702,-0.68344724,-0.94061315,0.6975079,-1.3326033,-0.1315483,0.16793142,0.58405185,2.645623,2.2459862,-0.16978638,-0.37031227,0.38998908,-2.842078,-0.36759597,
			0.8732496,0.55843604,3.0178683,-2.2880692,0.7601983,-1.162817,-0.9730752,-0.43082592,-0.8848865,-0.5967437,-0.5124996,8.014034,0.3963482,-0.7274511,-0.9118413,-0.26133668,0.8832095,0.5801012,-1.7505132,-0.37744603,0.14782119,1.5305618,-3.8651547,-0.621386,0.41046023,-2.9698167,1.299723,-0.6033106,-1.1618872,1.315611,5.2394285,-2.6046052,-2.2020476,-2.9287155,0.09998877,-0.85956043,-1.967637,-0.38524795,-0.40110028,-0.5198479,
			0.052609805,-1.6835378,-0.02034982,-0.51118886,1.3923571,-1.2300473,-0.70836115,0.78317237,2.884951,-0.2551862,-0.050850842,0.66520995,-1.6054871,-0.71896464,-0.64330953,0.30620393,-2.8059864,0.36810252,-3.2296221,-0.04976848,1.0099363,0.282474,-0.15406053,-1.2670699,2.6214375,-0.582861,0.16109353,-0.9346596,1.0201592,-1.5579903,-0.41870964,2.2322776,-0.4224176,-0.08786805,-1.7849851,3.0336666,-1.3488065,0.6045833,-2.0405025,-11.695233,
			0.088136785,-0.22109586,-2.0441885,-2.772778,0.000804965,-0.096469626,-0.20747586,-0.35753432,-0.7233356,-0.64346427,-0.10170022,0.63787055,-0.06890052,0.28923106,-0.9747757,-0.09749299,0.4564907,-0.16052417,2.3926992,1.1596128,0.89073527,-0.61496276,3.4607627,2.8425364,-1.0855255,-0.8771691,0.48463225,-0.048746668,1.0620507,-0.9299192,0.6535961,-5.1346784,-5.2704945,6.367896,1.1803938,2.4588091,-1.8491964,-1.4160411,-0.44616956,-2.1203997,
			0.5013521,0.7814381,-0.1223485,1.7409817,-1.4566082,0.50550824,3.32485,-0.004804615,-1.2582091,-3.6130707,0.21268466,-0.99267745,-0.40199727,0.99227136,0.8316967,-1.3007252,-1.647935,0.30986863,0.26833817,-2.384969,-4.4578266,-0.40564522,-1.3676744,-0.30267113,-1.6224514,-2.5777545,0.4129813,-0.017882554,-1.5903544,1.3041439,-2.2284296,-0.105467565,0.72517884,0.40796664,1.6910185,-2.4630687,-0.87500066,0.46761063,2.920774,-0.61959714,
			-1.3036916,-0.939906,-0.30452874,2.481435,1.8765094,-0.26059294,0.8380978,-0.71147645,0.036072314,0.2372635,-0.16859342,1.1359762,-0.6972174,-0.99070483,0.30478975,0.6612318,1.2157482,-0.5992877,-0.484519,-1.5065991,-0.2652357,-0.73812467,-1.4348168,-0.51544404,1.4606907,-0.19586031,0.20679559,1.2761449,-1.4332247,0.63640547,-3.6225991,1.87443,2.0412054,-1.3025006,-0.26985234,-2.4644022,-1.0439844,1.891029,1.236891,1.3001047,
			0.53631455,1.8600029,1.1088297,-0.40080568,-0.0139926355,-1.1956403,1.7223964,-0.32793552,-3.4133723,2.0345309,-0.4801327,1.6846781,-1.196722,-1.8804301,-1.9434125,-0.5070913,-2.144133,1.7452264,0.5908225,-1.7137995,-2.7185655,1.5144992,-4.5196705,-2.7643714,0.7887488,-1.0007865,0.19785176,0.7733212,-0.740527,0.44181073,-0.18547237,1.0521533,1.5495462,0.23477405,1.2951783,-5.7311726,-0.48842004,-0.42739907,1.2602688,-0.00372301,
			0.20081894,-3.3767612,-2.5017638,2.3138227,-0.07266426,-1.1103485,-0.8726356,1.2136825,0.5830548,-2.8176932,0.47511438,1.0848036,-4.5120745,-0.39569053,1.2905921,-0.3503686,-1.6624022,-2.3322544,-1.3214778,-3.425188,-0.9124998,-0.51630217,0.81181306,-0.03400015,-0.26054302,-0.4513467,1.5356995,-0.677772,0.08785821,1.6391445,-1.8444233,2.2672746,0.024783038,-0.8174147,2.0917928,-0.19770497,-1.2422674,-0.6215141,-0.44615558,-5.7611012,
			-1.0610535,-0.3876958,-1.2017475,-0.6574562,1.3242764,-0.40099496,-1.9275299,-0.7361819,1.7568208,3.0509126,-0.4205385,3.0214255,0.89519536,-0.5209883,-0.35906214,-0.13233162,2.050594,0.06882437,-0.9330337,-0.76146996,-0.9668607,1.3107483,-0.5158772,0.26718742,0.18010351,-3.8404267,-0.31828165,0.37755564,1.5897211,-0.976325,-1.2729217,0.36450028,1.9550334,-2.881249,-0.00115928,1.8940446,-1.9200077,0.36302438,-1.1207937,0.9329199,
			2.239761,-2.380331,0.76971394,-0.38474214,-1.797955,0.15229468,-4.1881075,-0.056711044,-1.68683,0.27703762,-4.354829,-1.011091,0.8534237,0.37284306,1.1643239,-0.31854033,1.8136715,1.4345936,1.984972,-1.3967882,0.0708845,-0.80586004,0.74586797,-1.4767479,-4.4947405,0.47550216,2.2666986,-1.5119212,-0.6926548,-1.6021944,-0.067166105,2.783624,-0.5778149,0.9161697,-1.2807189,-3.2208426,0.46586135,0.88901144,-3.6954303,-0.023039145,
			-1.1379462,-0.631719,-2.7323048,-0.16008478,0.41142035,-1.266316,0.049979515,-0.49697098,0.9303364,1.4398222,0.99960107,-0.7080185,0.8855754,-0.13814126,2.8084567,-0.807824,1.5839087,-1.5809307,0.5985083,-2.3269804,-0.6247591,-0.8671691,1.684363,4.467458,-0.096898556,0.010785522,-1.2512956,-1.0982978,-0.58776975,1.5435847,-2.428659,-0.9486485,-0.8577872,2.4470925,-0.008359655,-1.1907347,-1.087975,1.5857466,0.59862477,0.43173337,
			2.0591438,3.0545633,1.0416832,1.2375385,-0.6124903,-0.6018776,0.6148133,1.960098,-1.5651414,-2.5560398,-1.0853726,-0.28460488,0.13898927,-1.7848774,-3.1006339,0.65104586,-0.7145898,-3.1172256,-1.3096458,-3.0317192,1.1570556,0.46827823,0.51741725,-0.12966792,1.9786617,-0.3383367,-1.6768038,3.3315895,0.41810253,-4.717725,-0.72179204,0.40620705,-1.2299404,1.6278527,-0.6201019,-3.2928934,-2.013576,-3.927423,-2.0739493,-1.7515132,
			3.0458596,-2.8115468,1.3653957,3.375236,-0.7438112,-0.5069542,1.3433731,-1.3154576,2.7118204,-1.1413138,2.4051368,0.20955211,-3.987924,0.95239824,-0.06284057,0.07568175,0.2996205,-1.5224358,-3.7314155,-0.5917401,0.06419225,-0.25339103,-1.7757051,-3.2067478,0.37248278,-1.3825296,0.8599805,-2.8857396,-0.97715616,2.2887564,1.9329324,-2.9252005,-1.3089986,-0.3167803,-0.28391525,0.46505445,-1.918234,1.8378145,0.066908434,0.10556818,
			-0.515386,-1.0080414,2.3241866,2.1785517,0.29544008,0.112654105,-0.2193672,-2.2831745,0.11025691,1.407477,-1.8777174,2.1953201,0.031520173,-1.4489542,-4.4662013,-0.97080165,-1.0970647,1.4601659,-0.67719877,-0.63875794,-0.060330193,2.3169003,-2.0704823,-4.6813116,-1.1748693,0.32247123,1.3724508,1.1820841,0.3623107,0.05793676,2.1120012,-0.8005268,0.7716345,-1.9436288,0.79113,-1.5825819,-1.2550092,-0.17184554,-0.59570765,0.64770097,
			-3.4809747,-0.578737,-0.2807528,-3.534874,-1.9040471,-0.34697717,3.4448164,1.6633872,-1.3687043,-8.074417,2.5583003,-1.096517,-0.59788764,-0.61536515,0.60690075,1.0963252,-1.3636265,-0.5398948,-0.33515796,0.04918444,1.237918,0.27066898,0.06411942,-0.6011327,0.65891373,-1.0790371,1.4593936,1.5765977,-2.9158514,1.897451,0.52485687,-1.8920679,1.131211,1.5707093,-0.94485915,0.2993257,-0.86008424,-0.1608352,-0.22568986,-2.323938,
			0.20290369,0.5985825,-0.37299603,-0.3098024,-0.051760748,0.20452726,-0.46434447,-0.5878056,-0.27764848,0.07324112,0.44966626,0.3049477,-0.2900136,0.22128858,-0.09317295,-0.042193923,-0.18104258,-0.3348695,0.252948,-1.2321178,9.824441,0.13531135,-0.37027013,0.4883276,-0.54317915,2.6515903,-0.25766495,0.19295223,-0.29253665,0.2587911,-0.22826695,0.042942584,0.48834044,-0.13081555,0.3988561,0.09072001,-0.20592006,-0.2842978,0.83583575,0.040142518,
			-0.5606062,0.4503246,-0.89405113,4.1154275,0.108446695,-1.7528324,0.46928367,-0.98886395,0.49577206,-0.72413206,-0.13885638,1.4010255,-0.7744664,1.4357626,-1.127495,-0.30310905,0.06129249,-0.27373424,-0.76030123,-0.81100714,0.9433249,1.9788412,1.3848552,-1.7312207,-0.18755776,-0.97657734,-4.9223857,-0.4286015,-0.67761433,0.8050345,0.12330203,-3.592133,-8.769688,7.156774,0.07355925,-2.1589715,-1.3289104,-0.77571154,-0.6109863,-0.32443506,
			0.75327,-0.38826844,-0.19233505,-4.6416674,-0.08085589,2.5679643,0.62585753,1.9057552,-1.4293469,0.18457983,0.28814507,-1.8363564,2.6572554,0.016416263,0.11514733,2.7570896,1.4952347,-0.7817229,-2.0497594,-2.3021963,-2.4928956,0.5263774,0.19707866,-0.6325911,-3.8381264,-1.4435948,2.1342843,-1.1887226,-0.9121551,1.2606121,-1.2501072,-0.41660017,-0.2776538,-1.0207303,-9.414951,-0.5870256,-1.351399,1.1330413,0.45738485,-1.637105;

    h2_h3 <<
			-1.9012507,-1.649514,0.23088259,0.9026104,-0.01071893,-0.90792465,-0.30784085,2.5204854,-0.25249615,-0.6907818,-2.2918031,-1.2788386,-3.4877553,-1.027858,0.8506291,-0.6714066,0.0055950824,-1.9427613,-0.06829008,-2.1343102,-1.1500574,-0.9233841,-1.0947754,-1.6696162,0.76634306,-3.916669,0.95239365,0.2784626,-1.718018,1.1931467,0.80978096,0.014215758,-0.1912668,-0.33329946,0.34898737,1.5815185,-0.13944975,-1.2462767,-0.4191075,0.34542382,
			0.72103107,0.03771134,-0.7976271,0.4488093,-1.6023395,0.3278355,-5.0379343,-0.14437038,0.09326374,0.0027170104,1.1091377,0.1517963,0.16681153,0.42838895,-0.501143,0.32662514,-1.6757463,-0.1285989,-0.39336398,-1.8784175,0.4695068,-0.27846453,-0.14304285,4.077419,0.1191928,-0.80570245,0.7164723,-0.8996672,-6.7017922,1.4771498,0.56742555,0.54332477,2.314488,-1.3167825,0.6885421,-2.1454155,-0.7296313,-1.0390773,-0.79075897,-0.28971723,
			-1.3154596,-0.31606382,0.12263653,0.9846416,-1.6217947,1.6401536,0.56705797,1.7259029,-0.651386,0.6621635,-0.5624242,-0.07754491,0.36656028,3.308879,-0.89998156,-0.14751738,-0.6110982,-0.7623211,-1.3665327,-0.8793408,-0.52006453,-1.237888,0.24993494,0.6983387,0.43022093,-5.215303,0.067235105,-1.1814913,1.060021,-0.3096134,0.68063456,0.2945902,-1.2646611,0.27707627,-1.830642,0.65781176,-0.28113818,-0.052107006,-1.323799,-0.5992156,
			-0.60252553,-1.673733,3.3051667,-1.7936825,-1.8176981,-0.24654476,-0.011281056,0.5033445,0.77687985,0.48276043,-1.7044477,-1.7009513,0.23037377,0.057677854,0.71780455,0.13281201,-0.7819066,-0.1633647,-0.45087552,-0.5640892,0.21234003,-0.24182047,1.5510706,0.29180217,-0.009089824,-0.2654641,0.26271775,0.16363238,-0.19440132,0.06709348,0.8571802,-1.3550183,0.5397262,-0.2796992,0.2547697,0.48801246,-1.146681,-0.0045978096,-0.09852021,-0.036951624,
			0.6252996,-3.1456735,3.0003314,-0.32224104,-3.4055839,-1.6319377,-0.5908286,2.9263248,0.89178115,2.108187,0.00504546,-3.2166698,-0.29157203,0.2760106,0.22671391,-4.5934234,-2.2421644,-0.11289205,1.4864228,-0.025606334,1.3421162,-0.23750895,-0.06702043,0.005526665,-0.05416527,-0.2528767,-0.8606004,0.07933234,0.41123226,-0.081061564,0.008409517,-2.9959483,-0.19497564,0.29692537,0.61761856,-0.23540148,0.123385996,-0.04982914,-1.40126,-0.24038157,
			-1.1528013,-0.3115168,1.31152,-0.20789796,1.1558026,-1.7964758,0.10720597,0.3846827,-0.16713034,-0.53039455,0.88311386,-0.67775244,-1.8823802,-0.4605269,1.3247697,-0.8549611,-0.3557425,-1.260444,-1.1039424,-0.94224745,-1.1220759,-0.91266894,-0.23599681,-0.7855385,0.15142997,0.028038885,0.30704874,0.7335467,-0.5851126,1.5242589,0.48816204,-0.20332699,-1.3132733,-0.46923384,1.3136026,0.31121132,-0.16747852,0.0041462337,-0.75419164,1.087717,
			-2.048508,-0.2008098,-0.15461166,0.29686058,-1.3652529,-0.079359815,-0.23620528,1.911377,0.42688718,1.4157121,-1.8420951,-0.023364535,0.5271914,0.40311125,-3.076562,1.1989303,-3.0410006,-0.29849553,-1.0580041,-0.9168786,-1.1690165,-3.0276434,0.2010118,0.51757276,-1.2803757,-0.17976628,0.27767462,-2.720671,0.07273255,0.684353,2.0147007,0.9096068,-2.7344987,-1.7179977,-4.7354565,0.5916331,-1.1008898,-0.08078889,0.5820946,-1.0103221,
			-0.65920204,-1.1909484,-0.058497973,1.5116218,0.6034504,-1.2381488,-0.47113067,1.3147321,-0.46260005,2.9356828,1.2357061,0.6437858,0.30385765,1.9096217,-0.7678265,-1.6441209,0.087286375,-2.82162,-3.388497,-1.6755271,-1.9803995,-1.9773154,-2.2214873,0.0170719,-0.72031933,-2.5092146,0.36533147,-0.9602981,0.38796026,-0.27411994,-1.3843234,-1.2408255,-0.6199716,-2.5733263,1.5788141,1.6300106,2.1633267,-1.9906276,0.2811001,1.5606647,
			-2.822595,-0.8847117,0.026770342,-1.094765,0.7136854,-1.9548806,0.09167826,1.6888281,0.06811099,1.3957214,-0.60737956,-1.2920207,2.0465734,-3.2553978,0.41454986,-0.50707537,0.56522894,-0.5818359,-1.6424804,-1.2270465,0.42578402,-1.3075738,1.3742259,-0.63092434,-0.046053573,-0.9617532,-1.0873517,-3.7153769,-0.32677644,2.082273,0.86987704,-0.6571744,-1.8472776,-0.14131665,1.2430124,-0.90416646,-1.3314705,0.185855,0.73424965,-1.2061454,
			0.09753864,-0.17685072,3.6081376,0.28209767,0.6414138,0.71959436,-1.0720253,2.799467,-4.0655303,-1.8708068,-3.7466805,-0.96674806,0.40667525,0.21425174,0.28380916,-1.8789454,0.17637028,-0.35566086,-0.8453152,-0.5827274,0.9243749,-0.16014452,0.5266654,1.2377472,-2.9740157,-0.6676413,-0.06831274,-0.056137346,0.13038857,-1.0630021,-0.62281126,0.49123442,0.37107226,-1.7222387,0.03422261,0.25688916,-1.3629096,-0.0051661585,0.70675325,2.331504,
			-0.12638646,-0.24142992,-0.19890885,0.29965672,-0.104936585,-0.17326207,-0.5377639,-0.4426926,0.17541005,-0.47463992,-0.34366077,0.28747395,0.11137074,0.94249964,0.39453113,0.28786463,-0.4785836,0.3462913,-0.4916685,-0.9538517,0.6980738,0.099173166,-1.4292171,0.75610393,-0.4141415,-0.7987565,1.7704772,-0.7887679,1.3236383,0.061923478,-0.039321393,0.25622666,0.9579337,0.112684645,0.075639926,0.2444866,0.40487856,-13.7210455,-0.79175925,-0.08671436,
			-1.7345649,0.118502945,0.76442677,-0.12898162,-0.056788895,1.2279589,0.11613747,0.95325506,0.41967303,0.9327958,-0.43146,0.6694884,2.1121907,0.6745953,-2.6861506,-1.2299863,-0.23010069,-1.6018424,1.925159,-0.8391863,-1.2022903,-0.80159175,0.500327,-0.9414605,0.1529089,0.43354392,0.4824598,0.98409176,-0.059616804,-0.33266133,0.43056384,-0.056273006,-0.33956835,0.41885784,-2.279106,-0.760204,-1.4425069,0.20345093,-1.2624433,-0.90829307,
			-1.2864642,-0.72970027,-0.11218392,-0.16280562,-3.3988917,0.58127004,-0.3707389,1.8979707,0.41249543,-1.4529992,0.12986888,0.6396563,1.6341538,-1.811455,-2.4428623,-0.40622765,-0.7208083,-1.6360388,1.0822196,-1.5013521,0.61281276,0.00065168814,-1.1213446,0.19153477,-2.4860847,-0.81789935,1.310096,1.0763639,-0.5401237,-0.95742166,-1.4778132,-0.3877701,2.6235275,-0.03615808,-0.9504422,-0.47950536,0.057143237,0.29811987,-0.87805617,0.003907482,
			0.48079076,-0.40340474,-0.67843366,0.17054994,-1.3501731,1.3657393,-0.10234804,1.532816,0.3777778,-1.1526463,-1.0918345,-1.2952075,0.9119613,-0.37313685,-0.4237125,0.8703107,-1.2305478,-0.37895086,1.3656237,-1.7942433,-0.26625133,-1.5669664,0.22919124,-2.056275,-0.7078003,0.7449844,-0.33393878,2.2173004,0.75959694,-0.55291945,1.1016322,0.45532215,-1.2334684,-0.7309294,0.89080423,-0.55226237,0.05712299,-0.057910755,-0.70169604,0.1868764,
			-1.1634705,-0.6501629,-0.1911144,-0.447634,-0.48330972,-0.6542745,0.03062329,1.1605821,0.7423716,0.45819175,-0.9443743,-0.82737964,0.54950136,-2.8917918,-7.7800717,0.10528389,-0.10564257,-1.8885733,0.23212032,-0.8108771,1.8178637,0.13602665,-0.034182332,-0.4666178,-2.4486172,-0.6919289,1.0514219,-1.2435793,-1.4211676,0.44373927,-0.86954886,0.8993353,0.8665153,1.1555294,-5.2748895,-0.679782,-0.99437594,-0.26594955,0.8629744,-0.8036733,
			0.109439395,0.8143307,-1.0434568,-0.41011685,-0.006809809,-0.019802703,-0.111175016,0.11397418,1.4903388,-0.082401164,-0.1744023,-0.39000788,-0.36720952,0.020467708,-0.08036926,1.4324648,-0.6892817,-0.11177751,-0.104743384,-0.7558484,0.4202475,0.5042068,0.19504166,0.29816332,-0.09583002,-0.23554787,2.58906,-1.344887,-0.06200163,-0.10512063,1.8155706,0.16913685,0.5213984,-0.037947096,0.13603717,0.65578717,0.4329064,-12.87049,0.018397639,-1.4812789,
			-0.39453,0.059394423,0.7576477,0.015303245,0.03222656,0.067655236,-0.39725772,-0.40438047,0.25874245,-1.7205243,-0.883669,-1.3695573,0.67067623,-0.604599,0.8130398,0.6086874,-0.11971535,0.01018252,0.92626417,-1.3519601,-0.61262363,-0.07827418,-2.2064817,-1.6372356,-0.7193969,-0.76142204,0.12148506,1.1157877,-0.22363213,-0.22192214,0.14656165,0.702048,2.0575666,0.0118435025,-1.9465755,-0.7955662,-0.26719186,-0.3224955,-0.93569624,1.4523994,
			-1.110356,-0.6855596,0.09165536,0.5873414,0.11313242,-1.0771145,-1.2206331,0.69733673,0.715667,-2.6797576,-0.22098106,-1.0375428,-1.2741269,-2.4095223,-1.5596496,-0.3604023,-0.97826093,-1.7737811,0.9002655,-1.5788449,-1.344223,-2.2159882,-0.55735344,0.9689762,0.64432085,-0.61353594,1.6954165,-2.223511,-2.3070188,1.1763492,0.6158971,-0.5191067,-0.9198214,-0.81395185,2.5130653,1.3561224,-0.19980408,-1.8933884,-1.8622237,-0.88198066,
			-3.3421326,0.30652153,-0.40884075,-1.3679855,0.6253316,0.15747613,-0.16391765,0.92254925,0.14022489,-0.29954535,-3.4130573,-1.5744519,0.62479347,0.34361443,0.64996886,0.30182207,-0.9646741,0.5777555,0.893462,-1.0154363,1.9662789,-0.005126501,0.2168515,-0.23794132,-0.6276202,-0.5405703,-0.5462662,-1.4433135,0.7943613,0.44819903,0.7584278,2.3425307,-0.103586294,0.95727986,-2.0645118,0.45323166,-1.9566106,-0.2537029,-1.115156,-1.3089367,
			-2.0538354,-0.37101248,0.6432284,0.38754618,-0.05095002,-1.0997666,-0.6628051,1.1324182,-0.0043546604,-1.4804662,-1.8508142,-1.8563541,-3.8934846,-1.2873019,1.1207056,0.89272934,-0.66603535,-0.46179527,-0.62929696,-2.7152243,0.2549384,0.005517073,-1.912044,-0.57367295,0.23995133,-0.79392344,-0.42079008,-1.0609616,0.088185586,0.508844,2.003144,-0.025203826,0.6725952,-1.7922058,-1.4380538,-1.6432476,-1.6446723,-1.7051437,-0.9674061,0.83724684,
			-0.37035924,-1.5991968,0.07575561,-0.22171561,-1.0712348,0.6550174,-1.1240478,0.56164676,-0.11449098,-1.0406381,-0.8891222,0.76483047,0.6982661,-0.6166537,-1.1950058,-0.85328406,1.1735902,-3.5393307,0.9399076,-1.7897936,0.50483257,0.44388527,-2.4895647,-0.6800608,-1.7307272,-0.6626322,2.3148077,-0.65402335,-0.62875116,-1.864578,-1.6401913,-1.1295767,2.2816598,-1.390037,-2.2973967,0.10187162,2.4971845,-1.6308984,-0.31036276,-0.28685904,
			-0.21440005,-0.55118084,-0.098026924,-1.9993066,-1.6461811,-0.9894241,-5.230295,0.6455102,2.844133,-0.18331003,-0.082438536,-1.7106868,-0.03789895,0.9196413,-0.8476862,-2.0789282,-3.442284,-1.2363507,-0.6037888,-0.544028,1.1355006,0.38924733,-1.8544676,0.27363545,-0.33085662,0.093261205,0.7951662,-1.0807464,-0.036537483,0.53283674,-0.57124,-7.448986,-0.43237266,-0.047528774,-0.00935585,-0.015395273,0.28309104,-0.8845756,-1.4324255,-0.52557003,
			-0.21138841,-1.0809478,-0.12701522,-0.23069072,-2.1781368,-1.7114223,-1.1534595,1.3215863,0.28780547,1.3984253,1.9166169,2.0042186,0.71262294,-0.49771342,-2.4562593,-0.5475578,-1.2932279,-0.726779,-0.77301717,-0.6556419,-0.7904623,-1.7037675,0.6723107,-0.40237495,-1.1756744,-2.259858,0.46346855,-1.1066095,1.8491865,-3.8607872,0.059734322,-0.4474026,-0.62871623,0.720982,0.025530307,0.31393015,0.30301592,0.15173014,1.2660205,2.25613,
			0.39622647,0.10551617,-0.34670517,0.16454731,-2.9279091,1.0319638,-0.44832683,1.0530741,-0.36305687,-0.41844183,0.49314085,0.14859544,0.7849363,1.0388857,-0.007553882,1.8243272,-1.9275017,0.34368747,-1.7826078,-0.9796445,0.8385535,-0.2763397,0.17817573,-5.3009114,0.52866566,-2.389857,0.30460694,-0.29299647,-2.0735807,1.6566677,1.1392834,0.2797322,1.5773373,-1.4392664,-0.12997846,-2.4641933,1.160619,0.012442698,-0.47345227,-1.2431222,
			0.54884076,0.36216843,-0.450955,-0.036782976,-0.2679873,-3.073579,-5.0404005,-0.1607399,0.43338302,-0.33063918,-0.9338314,-2.8234086,-1.5272394,-0.8763189,0.81559783,0.3797475,-0.23892757,-0.29201454,2.0394368,-2.5426085,3.9670687,-1.2178634,-1.0314995,-0.42128032,-0.874828,0.64720446,0.5037823,-0.81337094,2.73522,-0.92831343,0.6989806,0.3583257,-4.506952,-0.6555293,-0.5840651,2.515571,-0.107991375,-0.8892585,-5.833189,-0.02247288,
			-0.26270548,-0.7329242,0.665289,0.15698089,-0.13882893,-0.56724024,-0.06512861,-0.24663782,0.1795808,-1.1825166,-0.7960911,-0.89035225,0.71198916,1.6296788,0.45709813,0.64502686,-0.17873773,-0.52743644,-0.30914265,-0.83025944,-0.7004822,-0.43704915,-0.44537264,-1.1348933,0.060896967,-3.1046355,0.73385376,2.1075091,0.9983862,0.6198162,1.3213108,0.34373856,-0.23436984,0.31453013,-0.05487103,-0.52023065,0.09215714,-0.04049895,-0.39469355,0.32057548,
			-0.28478858,-0.40108168,0.037517358,-0.75010335,0.32100165,-2.0638669,-0.49657834,1.9139495,1.2164649,0.31192505,-0.06153821,-3.3727653,-0.50142723,-1.0744811,0.32577115,1.3017224,0.46267417,-0.25148866,1.8027797,-1.537056,-0.46860632,0.0075380844,-0.36538053,0.24746978,-3.6547294,-1.1214023,1.0986466,0.90107876,-0.56140375,-2.3741083,1.7813956,0.6693807,-1.736786,0.011958475,-0.6022008,1.468043,1.0219518,-0.45591754,-1.0692812,0.31486726,
			0.50785327,-1.4081458,3.5588198,-0.41836765,-0.22526795,-0.98734564,0.15659824,-0.2163997,0.05760439,-0.72783625,-1.8763312,0.6991713,0.2786294,0.5935659,0.5739678,1.4751368,0.075346746,-0.34309515,-1.3470268,-0.5046637,0.4362723,-0.18765205,1.0463594,-0.016771888,-1.8071833,-0.13519168,0.97689015,-0.18567972,0.68811166,-0.91820395,0.31031445,0.08840647,0.3325151,-1.2772478,0.5611191,0.34403965,-0.71702415,-0.023821805,-0.47516608,-2.0621033,
			0.62261474,1.3810931,-0.3606505,-1.0306088,0.26801622,0.7200609,0.01997349,0.057396118,0.18308555,0.25431967,2.33718,0.2957838,0.31007856,-0.55609506,-0.024541616,-1.1983224,-0.19392209,-0.6741593,0.18659516,0.085910626,-0.16819352,-0.1950841,-0.41091293,1.2433312,0.17656958,1.0555383,-0.2838872,0.13184145,0.18521766,0.22664033,0.2633933,0.34738642,-0.13654421,-0.8518682,-0.410443,-0.8557512,-1.2714404,-10.981557,-0.5523417,-0.8736542,
			-0.5384899,-2.113151,1.7740798,-2.101343,-1.2580416,-0.47129294,-0.7021315,0.35620397,1.7928588,-0.52962685,-1.1243366,-1.0832313,-1.3511652,-0.13973285,-0.21480766,-0.073510304,-0.9544785,-0.44619876,-0.18915963,-0.5447708,0.27378494,-0.0763654,2.5204082,0.3694901,-1.3588128,0.04889493,2.1195269,-0.906501,0.46480742,-0.103505276,1.611892,0.70949167,0.3871216,-1.3070405,-0.023527669,0.4914961,-1.09166,-5.351734,-0.1641731,0.7718713,
			-2.555902,0.67790866,-0.60707164,2.6681526,-0.4678599,0.13292626,-0.05212884,0.536897,-1.5418807,5.076928,0.16659704,1.2555547,-7.873544,0.26501092,-0.38294294,-0.51936543,-1.5843574,0.76339144,-0.59512526,-1.3312501,-1.3575867,-0.36778748,-4.200056,0.68970585,-0.20464973,0.56334555,-0.8881509,0.27604523,-0.12993315,3.1685162,0.5207543,-0.572305,-0.03745874,-0.812649,0.27932522,0.03782027,0.42152068,-2.167013,-3.2979968,0.79731,
			-0.6710923,-3.178382,-0.14954044,-2.635773,0.24065979,-1.0347564,-0.5143199,-0.60088104,1.8082066,-0.93006283,0.03906102,0.49053317,0.12212485,-0.54138887,-0.24955562,0.44785193,0.10174431,-1.8927524,-0.15657443,-0.7558985,1.4935273,-0.10451938,-0.4570413,1.329765,-0.0132321,-0.7342687,1.5311648,-0.042464737,0.7477911,-0.022456637,-2.6544044,-0.45176667,0.5737953,-0.8889266,1.6650155,0.3494875,0.824222,0.13219887,-0.30588412,-2.4644856,
			-1.3097602,-0.34879625,0.5313879,0.22139704,-0.021122452,-2.7997856,-0.13052185,1.877466,0.33050555,-3.4604764,-2.1767972,-1.5536149,-2.6468146,-0.355198,1.7157991,0.6142273,-0.6482019,0.023546003,-0.7436928,-1.54827,1.0134041,-0.085957795,-0.067403115,-0.16708228,-0.08638912,-0.59097546,-0.33400062,-0.213577,-1.4831005,0.6388534,1.9602873,0.9224142,0.021404823,-2.0441139,-0.9868881,-1.2307476,-0.61321324,0.02798624,-1.6432111,2.6800888,
			-0.6740374,-0.631424,1.1443719,0.24670908,-0.2668378,-0.028744774,0.6244188,0.2554075,-6.1696553,-2.3350608,-0.43557227,-0.23110579,0.8755844,0.20335284,-0.13525161,3.135244,-0.3161386,-0.38530684,0.8718325,-0.9950312,1.5405881,-0.01686939,-1.3159517,1.9631006,-4.765306,-0.74251074,1.8593895,-0.9229208,-0.5409484,-1.8637556,-1.251786,2.0295022,0.5177466,-4.627238,-0.48441628,0.1973239,-1.7332002,-0.07589815,0.8213284,0.9039892,
			0.17017367,0.9703196,-0.10407355,0.53319603,-0.20426178,0.04223662,-0.49652767,0.6241719,-0.27702048,-1.8886453,1.2333663,-1.290767,0.3981934,0.9079294,-0.9862173,1.4813585,-0.41009796,-0.24586742,-2.0714896,-0.69465536,-0.33061576,-2.462944,-1.0924529,0.23850308,-0.12046466,-6.796668,0.2924958,0.5231681,1.608554,0.25264663,-0.043220628,-0.013484416,-0.86020947,-0.23427936,0.9850846,1.6938348,0.853306,0.044551548,-2.1078963,0.34589475,
			0.11129447,0.66357267,0.09270737,-0.793865,-0.54771054,-0.8838977,-0.26843703,-1.0210056,0.6129306,-0.29101583,-0.31037828,-0.37322086,0.7662713,0.64928514,0.092308536,1.1762642,-0.093393974,0.6481566,-0.4224249,-0.9507572,0.018855285,0.9958513,-1.0517457,-0.5798513,-0.75108916,0.18782187,2.2165022,-0.6932481,1.5142883,0.16910376,1.7440591,0.692412,2.0354254,-0.4646633,0.46869156,1.1180228,0.9797063,-10.82021,0.34585983,-0.27072978,
			-1.8732227,-2.6460786,0.07530221,0.73810524,-1.4123969,-0.039697904,-0.14984918,2.8978326,0.17350446,-0.12762594,-1.744098,0.18235087,1.3681117,0.4946705,-6.3216524,-0.25951403,-0.2990867,-1.354314,-0.039155304,-1.2026098,-1.3232211,-0.10202671,0.7104088,-1.9721684,0.015081999,-4.243145,1.0152718,-0.055145532,0.11829141,-0.26689294,0.8385031,-0.42072758,-0.41309488,0.20453505,-2.053824,-1.1481489,-2.0219252,-0.8149236,-0.47634837,0.12274545,
			-1.4159676,-0.09931299,0.95162994,1.4841105,-3.0806484,0.5334196,-1.7131747,0.6678839,-1.6913925,1.0530306,-1.4720749,-1.1473085,-0.313818,2.7784312,-4.1108747,0.95384085,-2.8955472,0.91398513,1.2145467,-0.6229765,-1.4491985,-2.6299684,-1.108833,-0.1259508,0.22865674,-2.1829135,-1.1384407,-1.54563,1.6034324,-1.0588226,0.03190072,-0.6580511,0.061429054,0.4462052,1.2550191,0.24541792,-1.6544431,-2.4286366,-1.348815,1.0110643,
			0.0750708,-3.2002566,0.862133,-0.64310545,0.8841279,-1.5955197,0.24510081,2.5414877,0.20921047,0.086324796,2.0517247,1.3812932,0.30603927,-1.1677765,0.84338063,-0.0986745,0.9652102,-1.0204118,-1.5715637,-0.9209606,1.5769668,-0.6510737,0.059725035,-5.211403,-0.79262865,-1.3812867,0.9639112,1.2002655,-1.6519116,0.58463126,0.12684861,-1.0333465,1.0194141,-0.17910579,-0.15911044,-1.8101785,0.40727377,0.056358002,0.3637723,-0.8848761,
			0.15465923,-1.5087987,0.31141958,-0.2969066,-0.36340332,-0.55374855,-0.6891389,0.39054573,0.849667,0.23295844,0.38267514,-0.6868246,-1.1895015,1.1472492,-0.743135,-0.41077417,-1.043461,-1.196699,0.32332098,-0.5983372,-1.135776,0.21732852,-1.4263778,-1.0587723,-1.181942,-2.8116174,2.4168866,1.5623426,-0.8581602,-0.043682408,3.0404842,0.7441183,0.037326965,-1.8604177,0.16252826,-0.62732273,0.29165202,-0.75471264,-0.08915403,1.7059798;

    h3_out <<
			0.7590436,-4.0208917,-1.601513,-5.4326606,-3.1634667,0.6145333,-3.4112236,0.22048646,-0.5008164,1.199139,-1.6564547,-3.62003,-1.8494027,-2.7226644,-1.3629627,-0.105846174,-2.0650833,-1.5196884,-0.50801545,0.30006263,-1.4732295,-3.4724932,-1.8076435,-2.4668076,-0.7033477,-2.6449385,0.586319,-3.182477,-1.1664345,-4.136076,-2.231911,-1.5282642,0.35839656,0.107762955,0.046739664,-2.976461,-1.0759678,-1.3561223,1.6620214,-1.1382679,
			0.8023903,-3.5248792,-1.7224195,-2.6966753,-2.9531062,0.4820227,-2.6044571,-0.12424001,0.6930375,0.8965548,-1.3474096,-2.8080173,-1.8490804,-2.7731524,-3.7779577,-2.6622694,-5.09893,-0.58870083,0.058906324,-1.0768467,-0.9497748,-1.22713,-2.3021643,-3.0476463,-0.47413397,-3.3519115,0.88287264,-0.17950082,-0.8659897,-2.6993008,-3.2990372,0.19883807,0.03370636,1.1714406,-0.54125243,-4.7797728,-1.7717326,0.008995805,0.78324866,-1.396877,
			-0.02690636,-0.8347246,-0.42190325,-0.093948364,-1.5862235,-0.16714163,-1.2971629,0.1856113,0.70020205,0.7967741,-2.292497,-2.609783,-1.8736445,-2.0170066,-3.3634713,-1.9525638,-3.6403408,0.43284714,0.05974237,-2.9522572,-1.5787885,-1.50851,-1.2316837,-2.58469,-1.1017268,-5.5719905,0.38885933,0.29244718,0.0044242134,0.26431203,-3.329153,0.847871,-0.92024124,0.24198018,0.057866342,-2.6722395,-2.5788648,-0.09169882,-1.7573415,-3.6864343,
			-1.8690557,-0.08709658,-0.014582492,0.4244218,0.03350678,-0.6947059,0.11351178,-0.94307727,0.08161307,0.25536942,-1.8585824,-1.5807253,-2.1091418,-2.3834705,-0.776664,0.23426105,-2.6950624,0.18929659,-0.41671944,-3.8901324,-2.3678682,-1.1861143,0.43873608,-1.7788398,-0.8388866,-4.8385406,-0.07268167,0.2706558,0.47471038,0.2992418,-2.8206127,0.043397296,-1.5190244,-0.9503926,0.27831763,-2.2881,-2.3733032,-0.16771899,-3.8803442,-2.3664565,
			-1.6242589,-0.4348755,0.49484497,0.32536384,0.48240277,-2.540782,0.060809463,0.11732328,-0.03810958,-1.2218246,-2.0936716,-0.13984188,-2.760757,-3.6473253,-0.043910794,-1.3139774,-3.1917322,-1.786809,0.26201048,-2.7219937,-3.699972,0.22762471,0.6267523,-1.7785715,-1.545083,-3.9352908,0.17193493,0.17159861,-0.56900847,0.14695127,-3.8040574,0.06334467,-3.1847782,-1.3226706,-0.22860405,-1.291658,-0.6117143,0.7115915,-2.5640585,-3.1767478,
			-0.67850447,-1.781575,-0.10800534,-0.31003568,0.68419206,-3.9467106,-1.3051076,-1.2248298,-0.8236728,-1.8708436,-2.20825,0.43916404,-1.0194693,-1.8797128,0.90880084,-2.6012213,-5.192115,-2.7980657,1.0363278,-1.6830572,-3.1503544,1.0432472,0.5813511,-1.6476198,-1.2301891,-1.1678265,0.6828973,-2.9319966,-1.2728392,-3.0954568,-4.119263,0.117193185,-3.624269,-1.6385416,-0.6906921,-2.1431956,0.89018464,0.6099284,-0.8151579,-5.8559747,
			0.9713836,-2.6834407,-0.48244715,-2.9241672,0.49565807,-3.4840488,-2.363862,-1.7825468,-2.0374494,-1.17789,-2.7323947,0.29056793,0.46768525,-0.6681192,0.7636779,-1.7065146,-1.808857,-2.303359,0.5600803,-3.4311335,-1.3999969,-0.54169375,0.0126517555,-1.5343473,-1.200966,-1.117218,0.7394457,-5.8865495,-1.1145705,-6.950867,-5.5752177,-0.7457855,-4.36612,-3.286519,-0.25111195,-1.1809002,1.1677132,0.46024436,-0.7156337,-6.3599944,
			0.24467887,-2.5233166,-1.9854871,-4.6047053,-3.304309,0.3531801,-1.46318,0.08924221,-2.0287213,1.2484435,-3.6006768,-4.2704563,-1.5485007,-1.7182668,-1.5574281,-0.29804525,0.11967758,-3.0148761,-0.6662206,0.4185896,-1.416225,-1.9192047,-0.4454857,-1.9194543,0.87077063,-0.5383492,0.8841826,-4.372233,-1.0845094,-5.6903076,-0.8709532,-4.0679207,0.44993347,0.5263622,0.8667954,-3.0006442,-0.65487224,-3.0649736,0.7852933,-0.40422174,
			0.77674913,-2.387359,-0.8042712,-2.216758,-2.2516458,0.64410675,-0.64675575,0.15003748,-0.6451581,0.5379168,-3.206537,-2.5243728,-2.483247,-1.6187246,-3.538098,-2.6069636,-1.7353426,-2.0375502,0.438742,-0.5428393,-0.86133236,-1.5430427,-1.3830578,-2.1931608,0.82019615,-0.67796934,0.9607371,-0.2540113,-0.6485866,-3.6039908,-1.4896494,-1.9687188,0.1551255,0.9921816,0.5093859,-4.461779,-2.8598042,-0.56633186,0.98157024,-0.8697729,
			0.5757403,-2.419855,0.14615189,0.030094985,-1.5682031,0.5125495,-0.08752645,0.14324065,-0.39950404,0.6868687,-4.043138,-2.2202578,-2.1099668,-1.4614822,-2.90234,-1.8776826,-3.4855323,-0.23388305,0.32859424,-2.2275681,-2.0034125,-1.4344695,-0.50680476,-1.4157187,0.6127955,-0.7402547,0.74920964,0.5063059,-0.2698785,-0.04630702,-1.7263849,-0.32601652,-0.9892133,0.08484859,0.6586929,-2.90117,-2.9976866,0.5473013,-0.31746173,-1.0842494,
			-0.96910405,0.27885032,0.43144643,0.504001,-0.23069993,0.013621165,0.43196902,0.3455121,-0.110248014,0.13539831,-4.1575074,-0.73328227,-2.9260237,-1.5668552,-1.2934479,-0.119319834,-2.1997516,0.52985734,-0.42151815,-3.3780262,-2.4161277,-1.3953552,0.5542003,-0.80597657,0.5932813,-0.6911816,0.31368935,0.48212972,0.47792244,0.29163033,-1.42386,0.112680554,-2.2469416,-1.1312886,0.6594975,-1.1340227,-1.6543255,0.7939329,-2.0065827,-2.0022914,
			-2.2279253,-0.80730253,0.22131206,0.4282433,0.32134274,-1.2858305,-0.95291007,0.21717997,-1.3516319,-1.163665,-3.823942,0.28952664,-1.3312123,-0.9639344,0.2641636,-1.7284505,-2.7789347,-0.2836358,-0.016743971,-3.583601,-3.012923,0.12287425,0.7092802,-1.0372449,0.25880587,-0.24314506,0.7490205,0.059911773,-0.6452794,0.04176673,-1.8326898,0.5499809,-2.600105,-1.2715434,0.77026993,-1.7871599,0.13093749,0.8255211,-1.7576896,-2.5935497,
			-1.9063362,-1.7356607,-0.76540023,-0.8105707,0.48382238,-2.8325899,-2.7619622,-0.4375901,-3.010913,-1.3284781,-4.1288724,0.581634,0.17636846,-0.020482019,0.8930482,-2.702348,-1.7560287,-1.1972704,0.21046235,-3.228458,-1.6879673,0.9799435,0.43127286,-1.3779876,0.30392048,0.15740085,0.6850395,-2.6659918,-0.84428084,-3.776689,-1.3292289,0.6118811,-2.6815965,-1.7704273,0.8175504,-1.4564615,0.6233471,0.35386363,-0.9465575,-4.0134068,
			0.21703391,-1.0544984,-1.597174,-4.9388094,0.95249605,-4.0337753,-4.786141,-1.1116358,-1.0919393,-1.8964123,-3.540432,0.4200099,0.6705499,0.17959426,0.025560131,-1.032944,0.332438,-2.3181624,-1.0093168,-2.3768067,-0.5799788,-0.60437995,-0.8056631,-1.6116117,0.1100423,-0.12196448,1.530505,-5.645723,-1.1476707,-7.783486,-3.3982189,-0.28701374,-3.5558681,-2.0407124,0.7278363,-2.3278098,0.8042157,0.4655062,-1.2446988,-3.0282714,
			-1.72581,-1.6918544,-0.8326035,-4.307544,-3.9011915,-0.7386943,-0.44757047,-1.1253899,-2.8409379,0.75202006,-2.5265167,-3.383303,-2.6152797,0.77434677,-0.86207134,-0.7292639,0.77738124,-3.1969078,-0.09379413,0.8738242,-2.4515638,-1.2373611,0.12411741,-1.0308058,0.056530852,0.036376845,0.0020342402,-3.9999185,-0.9050935,-7.5699005,-0.0540441,-3.3688676,0.7396783,-0.008015446,0.6329914,-0.35328376,-2.6519077,-0.8226288,-1.2436295,0.45095646,
			-0.33529893,-2.0437,0.14818689,-1.6102161,-2.5052254,-0.09049079,0.59478176,-0.7251759,-1.3807235,-0.017836811,-2.725178,-2.5777066,-2.2021658,0.27133194,-3.5933044,-3.387752,0.29454306,-3.4035485,0.6799776,0.5166391,-2.9420393,-0.4878165,-1.1623161,-1.2788756,-0.13733773,0.44524813,0.56319183,-0.12974468,-0.6290455,-3.4315834,-0.8007232,-2.7554843,0.6088923,0.9400478,0.3962695,-1.4309062,-3.6835365,0.10996815,-0.20930175,0.25459546,
			0.42480463,-1.0611087,0.53416747,0.07794702,-1.6078391,0.45230553,0.67466813,-0.5919657,-0.10880403,0.3407371,-2.6632102,-0.93571776,-2.7494037,0.26042005,-3.073549,-2.152473,-0.8059543,-1.466448,0.311802,-1.0084482,-2.9660344,-0.8609828,-0.24541263,-1.2304078,-0.26224658,0.32474867,0.39032727,0.5332702,-0.36972848,0.24754564,-0.60035294,-1.1342202,-0.24568975,-0.03449077,0.13430853,-0.67323756,-1.6880205,0.5889455,0.35268432,0.4561952,
			0.36607566,-0.34071606,0.3053655,0.49604157,-0.2238763,0.50751686,0.005240893,-0.3446413,0.0017652904,0.11749453,-2.3656409,0.24344291,-2.1013408,0.1400457,-1.1178652,-0.21350555,-1.1350311,0.22179383,-0.7065139,-2.4143403,-2.5686796,-1.3873627,0.4557259,-0.80313015,-0.16067082,0.32341647,0.18283874,0.44415045,0.4101889,0.2475178,-1.3334446,-0.30410782,-1.3699358,-0.9773356,0.18657778,0.48389292,-0.04313306,0.22108895,-0.5107314,0.30143678,
			-0.8648364,-0.57360035,-0.5371025,0.42511368,0.29019582,-0.11665569,-1.620573,0.47057712,-0.4429737,-1.2150353,-2.7503545,0.7008656,-0.24962172,0.42632025,0.30994573,-1.5643781,-0.8715983,0.45153067,-0.89786595,-3.9872234,-1.6714141,0.13208216,-0.014032043,-1.0003527,-0.28990546,0.28029308,0.14486475,0.0907726,-0.5675829,0.15891075,-1.0492038,0.3592429,-2.6367958,-0.40685442,0.5214303,-0.2555514,0.54259634,-0.07346027,-0.609422,0.18467842,
			-2.2022066,-1.2060001,-1.4250498,-1.2835569,0.36920175,-1.4593153,-3.2155924,0.45252517,-2.7324152,-2.308287,-2.9857595,0.36191463,0.64072424,0.6158284,0.39185217,-3.0073905,0.0482635,-0.44901735,-1.9315077,-3.1184814,-0.24930286,1.1951345,-0.7476771,-1.3309934,-0.2772017,0.32251516,0.7633125,-1.338533,-1.012185,-3.7791228,-1.733707,0.8822916,-2.5757837,-1.4513915,0.6419712,-1.0024301,-0.1929358,-0.86057794,-0.3829967,-0.11084494,
			-2.043014,-0.89262,-1.9119148,-5.262214,1.1550963,-2.6238286,-3.6938329,-0.017108677,0.29114893,-2.4026496,-2.5507238,-0.10756682,0.72990036,1.0288786,-0.27565467,-1.3824784,0.407644,-1.702829,-3.8147173,-2.1990364,0.5889366,-0.78663856,-1.8569843,-1.407241,-0.15983951,-0.4496569,0.8449344,-4.3773556,-1.3668926,-6.2568793,-2.281235,-0.22129929,-3.042208,-1.092235,0.45475414,-1.2832942,-1.6425627,-0.34446502,-0.48780873,-0.006960085,
			-2.7744532,-1.2626358,-0.519772,-3.6686301,-2.379241,-1.6986685,-0.07852208,-2.021416,-2.8546581,0.6980779,-0.4986921,-1.2524581,-2.5498264,0.8621607,-2.3110235,-0.3553829,0.36008206,-2.4217174,0.124399126,-0.53281534,-2.688256,-1.9753916,-1.1178191,0.1261822,-1.4866637,0.12849993,-0.15902148,-2.0790663,0.2629621,-7.233945,-0.250659,-4.878977,0.3692177,-0.68622535,0.5075547,-0.33031642,-3.8614118,0.35901207,-1.7348723,0.47717968,
			-2.1507401,-1.2931268,0.55287766,-1.3857219,-2.008397,-1.4822992,0.8719276,-1.7911074,-2.1359155,-0.57418096,-1.0184275,-0.7644677,-2.5630515,0.63077575,-3.472227,-3.4313772,0.46215194,-3.579551,0.6739609,0.70004267,-3.0956502,-0.79213506,-2.3058636,-0.28625736,-1.3514438,0.61973226,-0.16604272,-0.03726526,0.090052694,-3.1540685,0.33148846,-2.1394675,0.61703527,0.964506,-0.22853054,-0.22759522,-1.8822014,0.45323655,-1.3851666,0.44872135,
			-0.37391746,-1.3595144,0.43756455,0.21218173,-1.5598692,-0.1491244,0.46089762,-1.7361426,-1.0845239,0.24590847,-0.90510464,0.16655304,-1.7320442,0.66365755,-2.2984023,-2.1765814,0.09862177,-2.798974,0.17908248,0.17141019,-2.29783,-0.6320338,-1.0040146,-0.44994247,-1.4356049,0.60296786,-0.14563306,0.32697865,0.5414084,0.5392046,0.08911464,-0.99706393,0.43361783,0.26016533,-0.6843491,0.20291859,-0.03126927,-0.040884003,-0.09337389,0.44139504,
			0.32768688,-1.2382799,-0.36052707,0.4001091,-0.07469513,0.4530446,-0.63363016,-1.5519167,0.028881878,0.1933552,-0.5293266,0.590125,-0.61217356,0.62822366,-0.68217534,-0.05936548,-0.39023113,-0.58579373,-1.2534827,-0.89015156,-1.3634099,-1.034323,-0.040833432,-0.5875967,-1.2856594,0.31610408,-0.1541862,0.20949148,1.4796408,0.40926936,0.15750337,-1.0678444,-0.39682513,-0.554942,-0.6758668,0.49352324,0.49381366,-0.99993026,0.39231002,0.5828021,
			0.40474445,-1.3552556,-1.313249,0.26239645,0.3257012,0.39560598,-1.5879247,-0.26659977,-1.2416387,-1.100292,-0.8687144,0.4848166,0.25246966,0.39093265,-0.2126267,-1.4677268,0.022981253,0.15767977,-1.57881,-2.3663673,-0.08565011,0.458947,-1.6417727,-0.64455646,-1.3867501,0.4458297,-0.16152439,0.05279302,0.345437,0.35617495,0.37686157,0.1516871,-1.3966861,-0.011876833,-0.09326158,0.35130307,0.040378425,-1.6576258,0.37336645,0.54549897,
			-0.8937967,-1.449588,-2.0468202,-1.3874168,0.5369826,-0.21150258,-2.3667836,0.5814115,-2.28984,-1.7337213,-0.9423979,-0.46658537,0.5979807,0.5243952,-0.2992781,-2.878023,0.46644405,0.28151903,-2.4438853,-3.5503848,0.57265294,1.2886235,-2.1274998,-0.69166154,-1.2761754,0.25870678,-0.19013259,-1.4508815,-0.3728534,-3.6928296,0.22777148,0.6809122,-2.774053,-0.26066947,0.15402068,-0.26058447,-2.310069,-1.6092293,0.27279693,0.73260325,
			-2.122252,-1.3366452,-1.649198,-5.4096155,1.035864,-0.6948373,-2.6723478,0.22673486,-1.4150761,-1.3265529,-0.67087,-0.9626663,0.073950574,0.66512007,-1.5677607,-1.0463425,0.68459076,-0.6342718,-3.7242458,-4.372688,0.28335503,-0.32809603,-1.4963626,-0.5962246,-1.2232633,-0.1943547,-0.42800453,-3.3317735,-0.28302747,-7.3026695,0.15627141,-0.24999017,-2.2828796,-1.5889405,0.53920734,-0.79117507,-3.5985627,-1.2043458,0.13376129,0.75361663,
			-2.177018,-0.48662332,0.41288897,-4.0423985,-2.7218306,-3.7475433,0.5050969,-1.9706317,-0.22778535,0.97985196,-2.7561212,-0.3273904,-1.6877291,0.7428005,-4.080102,-0.5468119,0.35309267,-3.1112785,-0.05200235,-2.1163924,-2.2892823,-1.6050144,-1.9971524,0.6523625,-2.359212,-0.008673117,-1.4377111,-3.614633,-0.5847913,-7.748475,-1.6936105,-3.6564631,-0.6227646,0.23967676,0.34522492,-0.43205485,-1.4182738,0.9695369,-2.2142594,0.68807375,
			-3.2736306,-0.06491646,0.6829797,-1.4718237,-1.9792789,-2.6466095,1.0294635,-1.1060343,-2.1885319,0.033246566,-2.4341908,0.11044119,-1.2904378,0.2522187,-3.6321828,-3.2575278,0.43107748,-3.208834,0.5517062,-0.181695,-1.4274614,-0.7362529,-0.92879117,0.69205403,-1.446385,0.27737954,-1.518947,0.15934199,-0.5970605,-3.0705807,-1.0065699,-2.4067183,0.24250443,1.042487,-0.64940023,-1.1377977,-0.22019912,-0.32923153,-2.1253912,0.39099723,
			-2.7333822,-0.26205742,-0.29651716,0.21356003,-1.4529467,-1.5504375,0.23022088,-0.670744,-0.34280628,0.57154316,-2.696629,0.5563741,-0.38550052,-0.011119144,-1.5391215,-2.1665232,0.49149346,-3.0954192,0.18560202,0.69695497,-0.48982754,-0.9532868,0.3112511,0.26191,-0.16736905,0.288024,-1.2767347,0.42421684,-0.21311897,0.3561849,-0.20612867,-1.023729,0.568006,0.20886466,-1.5757384,-0.25806054,0.37836844,-1.5051409,-0.4221009,0.338678,
			-0.68305194,0.006295377,-1.6314434,0.5862374,-0.2548637,-0.093711086,-1.246978,-2.9152088,0.3068329,0.1599011,-2.450372,0.41286674,0.2680873,-0.7305196,0.1249805,-0.29098234,0.32171163,-1.4544023,-0.7864576,0.38802364,0.03420639,-1.2050531,-0.2178915,0.13762875,0.12351158,0.1725612,-0.8271918,0.32341182,0.6685613,0.3775727,-0.7361818,-0.7184722,0.30361223,-0.8312981,-0.9983193,0.70817894,0.0922534,-2.6928296,0.48080754,0.19444281,
			0.3253143,-0.17508073,-1.5593032,0.507487,0.3700988,0.47479007,-2.095028,-2.0604336,0.056909036,-1.1583645,-2.4092786,-0.50071335,0.4781739,-0.6068933,0.39880404,-1.5697776,0.52911156,0.1395807,-1.6929357,-0.6326965,0.6109373,0.12161884,-1.4541314,0.049124505,-0.6311231,0.26720363,-0.79268384,-0.08426896,-0.5267735,0.31176558,0.44740075,0.17187808,-0.35087872,-0.25131994,-1.0212525,-0.1233218,-1.7929597,-2.6966493,0.42977515,0.37952703,
			0.5713732,-0.17799889,-1.0529135,-0.66694206,0.58574754,0.43333167,-1.9454424,-0.6538322,-1.5837997,-1.814315,-2.8432436,-2.0116355,0.16159354,-0.40983894,-0.5669838,-2.764586,0.50416696,0.6078027,-2.7278671,-1.9797357,0.376311,1.0774798,-2.1783268,0.3808813,-0.90234274,0.21234852,-1.1054826,-2.0255718,-0.8202502,-4.0313153,0.6225878,0.71568555,-1.646547,-0.8159425,-0.22753088,-0.78476727,-4.120561,-1.5421898,0.4814848,0.46010303,
			-0.249207,-0.031203121,-0.9674206,-6.0480795,1.0890805,0.19484471,-2.2627463,0.2345225,-3.2067852,-2.4745722,-2.590935,-3.2036223,-0.59341717,-0.48963255,-0.9404201,-1.4730829,0.9002711,0.57211846,-2.959287,-3.4610894,-1.1034706,-0.7274453,-1.8104061,0.21200433,-0.97122294,-0.124573655,-1.2374557,-4.039221,-0.7768831,-7.1694446,1.0484016,-0.16312073,-1.50713,-1.8491495,0.6400595,-0.35183683,-1.6992369,-1.135681,0.3538474,0.4469223,
			-1.0444921,0.6712778,0.9159881,-4.1102786,-2.4825225,-3.621452,0.38254923,-0.50693864,-0.86978835,1.2104244,-2.2811165,-0.04953551,0.3880975,0.075091265,-4.030601,0.15920886,-0.41285348,-2.9783716,-0.9539077,-2.925065,-0.40594655,-1.5673901,-1.0261508,1.1463238,-0.47373018,-0.9796404,-3.3745592,-2.8197858,-0.7963405,-5.8875914,-3.338609,-3.9881957,-1.6745962,0.7505799,-0.20823747,-3.7791355,0.16003367,0.237919,-2.933946,-1.0429125,
			-2.5229523,0.7679357,0.29608962,-2.1501572,-1.5961932,-2.6934323,0.8157688,0.6887882,-2.0054512,0.5232868,-3.3370771,0.6364345,0.48256522,-0.83854467,-2.543556,-2.2523704,-0.4985831,-2.8905456,0.21820849,-1.7014579,0.17230809,-1.4499259,0.27530164,0.9709406,-0.14967738,-0.70397496,-2.7517068,0.25262475,-0.7682716,-2.7635462,-1.7350245,-2.365116,-0.6935391,1.1874062,-1.9496037,-3.0413282,0.39739424,-1.7909877,-1.6564173,-2.265203,
			-3.687239,0.7423763,-1.7358055,-0.014798707,-1.3777809,-2.5921834,0.1062556,-1.2125151,-1.3126687,0.6532497,-4.0401187,0.4787512,0.48538047,-1.5524567,-0.49886364,-2.1290631,0.056751885,-2.3001614,0.16704406,-0.26919818,0.51162195,-1.3086652,0.15662709,0.76365215,-0.6666682,-1.3273097,-2.1044233,0.59573674,-0.53960437,0.26122078,-1.5877938,-0.52343404,0.26501563,0.22315088,-2.0105455,-1.7418302,-0.00058555894,-3.6540945,-0.10143254,-2.3906991,
			-3.1332715,0.829551,-2.7120974,0.5916821,-0.13327576,-1.4460196,-1.5912848,-2.891913,0.4495646,0.20148428,-4.5812645,-0.6048026,0.41008905,-2.4240246,0.62936115,-0.33609214,0.48989412,-1.6803093,-0.36514091,0.6106794,0.67914236,-1.2283603,-0.3488194,0.3459279,0.82083035,-1.7036449,-1.5983537,0.19988352,0.36327675,0.3217555,-1.017244,-0.43506858,0.649206,-0.91662425,-1.7539152,-0.12663832,-1.7985183,-2.7027614,0.5456592,-2.1655438,
			-0.53152716,0.60671073,-1.2154814,0.46698815,0.5179652,-0.07087332,-1.783136,-3.5895514,0.32060286,-1.3208076,-3.8089907,-2.1340377,0.16536108,-2.2319794,-0.28693292,-1.5430758,0.43407625,-0.23133369,-0.94510543,0.5644425,0.54496634,0.11890132,-1.4619648,0.56181854,-1.2927068,-1.1148105,-1.5895809,-0.27094486,-0.55207765,0.013353713,-0.79342234,0.20566064,0.6952584,-1.0157466,-2.4415882,-1.812291,-3.8658543,-1.9733588,0.65796816,-1.9776033,
			0.8343778,0.5659225,-0.14482604,-0.19104175,0.4689266,0.6085315,-1.6776222,-2.4864683,-0.48619613,-1.431671,-3.4652646,-2.5259957,-0.8727374,-1.9702417,-1.3843827,-2.5986216,0.40162164,0.9218504,-2.757245,-0.2151271,-0.603497,0.8346006,-2.247584,0.8204025,-0.5102389,-0.66745037,-1.5925279,-2.671122,-0.7997282,-3.8481226,0.2625744,0.7980042,0.14429799,-1.4065315,-1.501189,-2.7289317,-3.5468943,-1.9071853,0.33854437,-1.8864272,
			1.0245978,0.6964822,0.6418972,-3.1467927,0.831671,0.58370495,-1.441758,-1.0357423,-3.0924091,-1.8373619,-3.7714765,-3.7595234,-1.8836188,-2.1673634,-0.72209877,-0.12618881,-0.126115,0.9052137,-4.805629,-0.70949095,-0.6228555,-0.9607618,-1.8591486,1.1698434,-0.08114864,-0.33276063,-2.018984,-5.4932837,-1.0585487,-7.4572186,1.1297843,-0.18344261,-0.113518536,-2.0324764,0.041776165,-2.7781594,-0.885544,-0.8121761,0.13450174,-0.96957535,
			-0.6288728,-0.5570791,0.7475705,-4.5227923,-1.8490127,-4.0864077,0.66144186,0.33729714,-2.4596698,0.6458087,-1.7779313,0.27698967,0.76684755,-0.41491196,-1.8663324,-0.106686786,-1.8489821,-3.7302825,-1.4060857,-3.6694846,0.4215027,-2.9138799,0.51290816,0.5152863,0.5707862,-2.063449,-4.70737,-1.1887491,-0.92872113,-4.497765,-4.9693146,-2.9552886,-0.94627136,0.074904844,-1.1679027,-2.5394022,0.59640837,-1.0725093,-1.4648967,-3.7322009,
			-1.0996342,-0.43838552,-0.84089226,-2.545903,-2.0351999,-4.369789,0.94277436,0.70240206,-1.1231213,0.66967237,-1.0178379,0.4051475,0.31551903,-0.56612754,-0.7025818,-2.2311976,-2.5163987,-4.237922,-0.88874996,-2.9058459,0.37601754,-1.2112043,0.7877445,0.29005784,0.83078134,-3.3037133,-3.637178,0.6895891,-0.9407587,-2.5978723,-4.178455,-0.8189032,-1.0646454,1.3235273,-2.8927212,-3.749935,0.83194983,-3.644107,-0.36708805,-6.2099648,
			-2.8187401,-0.99375314,-4.471137,0.054349363,-1.3466882,-3.6870043,0.030104203,-3.0342252,-0.05088659,0.9664413,-2.6556864,-0.44723523,0.48397213,-1.5258939,0.6750958,-1.7301669,-1.2329569,-4.1704493,-0.26129615,-2.4654372,0.45162567,-1.4527355,0.5626992,0.22549032,-0.61233276,-4.8396316,-3.1263087,0.30718297,-0.59472924,0.31444466,-3.3186674,-0.3187782,-0.51762813,0.19577813,-1.8313396,-1.7904159,-0.7682217,-3.663018,0.29142195,-5.3093185,
			-4.245153,-0.9566763,-4.6056046,0.4229919,0.055194087,-1.6764244,-1.3385266,-2.551744,0.65285283,0.5147828,-2.253561,-1.2433376,-0.053997505,-0.50902647,0.4207947,0.12757725,0.2653483,-1.6824652,-0.43391562,-0.62500644,-0.8147613,-1.058127,-0.31894612,0.07051499,0.44844887,-5.8390546,-2.1432257,-0.076333195,0.07415078,0.4050251,-2.131566,-0.39479998,0.1730391,-0.76886064,-2.625476,-1.3724675,-2.8581526,-2.562099,-0.036152642,-4.212041,
			-2.0436246,-1.0063667,-2.3014078,0.396672,0.5367557,-0.7938666,-2.4307346,-3.9100778,1.451094,-1.2253836,-2.3488474,-3.5720205,-0.4448738,-0.83494204,-1.6939151,-0.97704095,-0.7442996,-0.13449174,-0.23083916,1.0206265,-0.721946,0.32101828,-1.2302452,0.04759835,0.5803526,-4.378463,-2.6701834,-0.24506262,-0.3811631,0.3793428,-2.7740219,-0.24888453,0.9378501,-1.286928,-3.9179153,-2.2708206,-3.0049908,-1.2611023,0.08186653,-6.1522174,
			0.4030699,-0.23407729,0.35924366,0.2717099,0.8007982,0.12252764,-2.183151,-3.9222658,1.3265631,-1.657787,-1.6858975,-4.434303,-1.898905,-1.8277752,-2.8045542,-2.2846751,-1.5772104,0.9900794,-0.9004669,0.6883983,-1.4357632,0.9598495,-1.753993,0.49366152,-1.8090017,-2.8486314,-3.2294781,-3.2766702,-0.8482204,-2.433399,-2.0277193,0.23237318,0.73585165,-1.1718305,-3.2084727,-3.7084248,-1.9012468,-1.2810695,-0.15140386,-3.8413303,
			1.2801605,-0.51265895,0.6104114,-2.0414848,0.6080565,0.747635,-1.9073455,-2.2174253,-0.62579453,-0.91847754,-2.6257432,-4.5272536,-1.4131149,-1.5238063,-3.245814,-0.35347444,-1.5923942,0.91943187,-2.2264843,0.26107293,-0.31486857,-0.70251137,-0.8242992,0.50791746,-0.35074702,-1.7505454,-3.1433394,-5.6459208,-1.0679258,-4.9158216,-0.8995828,-0.1069758,0.6928669,-3.257339,-1.0048575,-2.3850074,-1.0318202,-1.5990204,-0.72902274,-2.4310606;

    b1 <<
			-0.4290298, -0.058847427, -0.07967301, 0.12824512, 0.5428507, -0.4342066, 0.03269618, -0.8017954, 0.18686329, -0.115661405, -0.36378542, -0.37136355, 0.10379166, -0.40767565, 0.2419317, -0.19903858, 0.19482328, 0.12552111, -0.021317814, 0.53211164, 0.38814276, -0.04819191, -0.11544597, 0.2628423, 0.23529929, 0.36456177, 0.010100997, -0.364729, -0.1032306, 0.09575998, -0.15569034, 0.22901282, 0.37269154, -0.09013977, 0.52614766, -0.1742729, 0.1988355, 0.052343566, -0.02132041, 0.42302826;

    b2 <<
			0.28772274, -0.34812498, 0.33265477, 2.3049793, -0.21518232, -0.25821048, -0.810342, 0.38062334, 0.11374048, -1.057412, -0.3757876, 0.056791075, 0.20697524, 0.76135087, 0.48284492, -0.01919708, 0.5285079, 0.8003194, -0.4174097, 3.4176793, 0.2997574, 0.46161088, 1.4691468, -0.3790004, -0.6076332, -0.24608338, 1.4258002, 1.9522165, -0.26045597, -0.39137098, 1.5638014, 0.19811371, 0.5891197, -0.1945672, 0.20266405, 0.6862517, 0.9461724, 1.9472154, -0.6430096, 0.026905563;

    b3 <<
			-0.27029195, -1.5759102, 0.9517182, 2.1652627, 1.7464371, 2.6182384, -1.7286531, -1.4432645, -2.484168, 1.473758, -3.6343167, 2.8495474, 0.97952616, 0.69851977, -3.3238957, -3.4276316, 0.8894856, -1.4088094, 1.2279551, -2.1696494, -2.09197, -2.5813978, -0.26416388, 1.2709644, -2.272821, 1.8002056, 1.2766873, 2.9639373, -0.34761208, 0.11197275, -2.5068169, 1.9474475, 1.2829819, -1.5148984, 2.0894523, -1.0817392, -1.7879019, -1.9006547, 0.7354259, 0.5746366;

    bout <<
			-2.4746442, -1.7823548, -1.0550325, -0.6855259, -1.1120945, -1.6302769, -2.5011237, -2.1533005, -0.5707892, -0.071112975, 0.7000929, -0.13323739, -0.66192424, -2.5398905, -1.6628126, -0.3262825, 1.158186, 1.4761971, 1.0718026, -0.617789, -2.0210834, -1.5630338, 0.1969077, 1.3446892, 2.3406017, 1.2687999, 0.064893626, -1.873708, -1.6675805, -0.27659908, 1.2705367, 1.5698743, 1.0316985, -0.4518742, -2.1149075, -2.0742097, -0.40436813, -0.07115575, 0.7354762, -0.25420302, -0.73977286, -2.4418843, -2.178448, -1.2948744, -1.0058001, -0.57941145, -1.0484211, -1.6224927, -2.2663085;

    BN_gamma_in <<
			0.9837959, 0.9362707, 0.8808524, 0.10639799, 0.16405046, 0.65279716, 0.8836522, 0.33288586, 0.22259337;

    BN_gamma_1 <<
			7.92456, 4.5911026, 3.4974499, 5.0584164, 1.3806475, 5.88109, 6.0638785, 7.5976596, 3.6565704, 9.095041, 6.1280785, 9.011712, 3.7729921, 5.065926, 2.5787303, 2.1479774, 3.3494885, 3.0037184, 4.5117574, 1.5329796, 4.2106733, 4.619827, 6.451407, 3.1903694, 3.1735704, 3.8947809, 4.09593, 4.7013626, 5.4693065, 4.9696584, 3.584497, 3.9427712, 3.3267033, 3.4770021, 2.9905608, 6.981059, 2.7220438, 3.488909, 3.6613235, 3.5703464;

    BN_gamma_2 <<
			0.3348778, 0.9370405, 0.2724585, 0.37398556, 0.6862862, 0.6212966, 0.6603534, 0.4114186, 0.2865497, 0.50919646, 0.68237895, 0.42215422, 0.2784697, 0.23599446, 0.19615461, 0.41915444, 0.2797344, 0.3487105, 0.5853583, 0.53694516, 0.5091204, 0.38302603, 0.28062576, 0.53740007, 0.68335605, 0.84648216, 0.36359766, 0.2767953, 0.26633185, 0.36419478, 0.3313198, 0.2568844, 0.29804167, 0.4406501, 0.33045793, 0.2664627, 0.36463025, 0.16476521, 0.74389356, 0.5166456;

    BN_gamma_3 <<
			0.16189761, 0.18090601, 0.109091744, 0.080463424, 0.10877824, 0.10065974, 0.16397169, 0.1629954, 0.14699927, 0.11356247, 0.43345034, 0.09559443, 0.10019272, 0.10781845, 0.19653666, 0.29922158, 0.11583995, 0.19912344, 0.11444284, 0.20439617, 0.19383757, 0.18967104, 0.10091589, 0.105497375, 0.15106104, 0.079606086, 0.12238959, 0.07914325, 0.17624088, 0.10797042, 0.18883306, 0.09806756, 0.110951945, 0.13973293, 0.11333452, 0.1271987, 0.16097814, 0.1895077, 0.08982453, 0.103990585;

    BN_beta_1 <<
			-0.058359075, -0.14656398, -0.12529649, -0.29676712, -0.939603, -0.16157022, -0.101234086, -0.1524013, -0.27770188, -0.110302195, -0.17994636, -0.16104962, -0.059086706, -0.17784685, -0.2759338, -0.5431182, -0.16967842, -0.12948632, -0.16563775, -1.1249342, -0.4639135, -0.14981298, -0.27880213, -0.71280026, -0.30282512, -0.06559933, -0.17090704, -0.23319072, -0.086960964, -0.16456728, -0.35037276, -0.40608484, -0.23561639, -0.42681375, -0.31497282, -0.13399586, -0.034172673, -0.18283376, -0.23886219, -0.267318;

    BN_beta_2 <<
			-0.2136731, -0.14430524, -0.35715428, -0.8342762, -0.1441375, -0.108365014, -0.02452953, -0.41843763, -0.26043242, -0.10972087, -0.10637507, -0.19654384, -0.15647909, -0.3818523, -0.21725765, -0.25259152, -0.23709232, -0.38063523, -0.1643093, -1.6200432, -0.288836, -0.14432101, -0.550492, -0.25729695, -0.15391007, -0.077114575, -0.7655846, -0.87068003, -0.19256558, -0.24336961, -0.6771427, -0.24363014, -0.39266774, -0.25659728, -0.23127532, -0.5526734, -0.4125678, -0.43755984, -0.04064294, -0.21820483;
    
    BN_beta_3 <<
			-0.058139376, -0.07190582, -0.07548103, -0.11254496, -0.21386212, -0.1618231, -0.06738502, -0.043153003, -0.06427976, -0.25403643, -0.027146928, -0.18851879, -0.09476613, -0.09043891, -0.03794441, -0.034577005, -0.083125226, -0.03628649, -0.15855776, -0.027723674, -0.032337826, -0.1132791, -0.0922081, -0.21883231, -0.06603794, -0.08466773, -0.11717145, -0.14556095, -0.29438388, -0.03503937, -0.039821755, -0.14282311, -0.14233062, -0.13772933, -0.16414902, -0.060349308, -0.04661368, -0.0417348, -0.11625645, -0.042073153;

    mean <<
			56507.399242974745,34517.838198360594,52451.06402331381,45546.1504550585,16591.305616264286,45237.984643191885,52636.086979434054,33991.76707303624,56211.6327472207;

    stdev <<
			191746.02936175757,132951.2006715246,174000.87613572524,163280.43821597245,99519.78906730057,161420.3262541617,174696.88931403443,131274.4842229441,189404.49396991613;
  }

  else if(m_pcEncCfg->getQP() == 32){
    
    embs0 <<
			0.3313727,-0.23007904,0.026419818,0.31677178,
			0.021725368,0.002141656,-0.002642736,-0.0020195756,
			-0.007994475,-0.0022755463,-0.00043187535,-0.00041001066,
			-0.029112015,-0.013908528,0.04656065,-0.024561152,
			-0.04107483,-0.0023441222,-0.0021528031,0.014418376,
			-0.07935029,0.07688155,0.06177001,-0.060447216,
			-0.11058893,-0.0056839334,0.006494241,-0.038821634,
			-0.30271676,-0.29894426,-0.20470281,-0.5000921;

    embs1 <<
			0.3155327,0.052016735,-0.12123424,0.28566578,
			-0.020570008,0.0011739656,-0.008434892,-0.003740043,
			0.012736032,-0.00011623386,-0.0040588356,-0.0039455756,
			-0.020076245,0.00625438,0.07029413,-0.0030936433,
			0.054748252,-0.001265127,-0.0067442004,0.0032385401,
			-0.020181973,-0.009838553,0.08524884,0.02765097,
			0.12417359,0.028989296,0.020243244,-0.053820003,
			0.2675393,-0.37544996,0.21572916,-0.52967256;

    in_h1 <<
			-0.1253139,-0.0063472064,0.03630233,0.004137002,0.13247682,0.020145886,0.15659337,0.0007538812,-0.10342942,2.3916035,0.36851797,-3.4584146,2.901511,2.0839424,-0.046105538,0.3851272,0.058449227,
			-0.6713655,0.025450502,-0.03188202,0.098562315,0.8718532,0.0036775258,-0.24848203,0.123544514,-0.88399094,8.893554,-0.03752723,-1.6937442,2.442108,-3.6482902,-0.34089473,2.4944005,-0.01734076,
			-1.3211069,0.04479587,0.2214455,-0.15967876,1.4872005,0.16654325,0.4015501,0.16565654,0.14785147,-9.0720825,0.17562038,1.4408652,-5.209515,-3.1962214,-0.3331427,4.044449,0.03550083,
			0.54326564,-0.219331,-0.32568055,-0.24319933,-0.80644995,0.13146947,0.12054303,-0.52190566,0.020081855,29.424253,-0.51275957,-0.079735786,-3.4509695,1.0538958,0.2695487,4.9417396,-0.31308272,
			-0.029085016,0.02784351,0.010637338,0.026729034,0.09333981,-0.0007057586,0.07073953,0.029582303,0.06766982,-5.683775,-9.245651,0.55002385,0.8678503,-2.1725814,0.69721955,1.3331442,0.67354107,
			-0.16809382,-0.03345518,-0.019538274,-0.05088417,0.1639136,-0.029665373,-0.030453937,-0.03974544,-4.7634807,1.8391931,0.5838619,0.021586506,2.3342896,-0.22103496,0.20906118,0.9857552,0.18745422,
			-0.009732451,0.062073316,-0.024807975,0.0482127,-0.04076533,0.03335357,0.18082015,0.0836948,0.23299345,11.733363,2.140904,0.058409333,1.0459892,0.80257,-5.743016,-2.1684031,1.542737,
			-0.1271394,-0.016620629,0.025913345,0.04189516,-0.046697125,0.019846553,-0.06535755,-0.030457899,-0.030911108,-24.378567,-0.7503008,-0.0093239555,-0.17468446,0.54646724,0.18072073,2.3544443,-0.0815141,
			-0.00032515707,0.20868328,0.07708396,-0.098348334,0.0085904505,0.13090357,0.39440256,0.23954083,-4.4382963,-0.9494436,3.2511013,-0.64607626,0.8082525,2.6440463,1.3764472,1.1768088,0.28264746,
			0.14397456,-0.008265364,0.10678395,-0.22954217,-0.5416419,0.081361756,0.13519746,-0.3301264,1.9516789,16.575188,1.4032409,-0.71759933,-0.22878674,2.9236689,-0.54533374,-4.1236553,-1.315436,
			-0.052873854,0.015398899,-0.0073868674,0.00042574073,0.16445738,-0.011272606,0.05257939,0.13621713,-1.6219804,-8.62655,5.3186507,1.734608,-0.7181418,-2.9272163,-2.1020632,2.9770472,0.4222857,
			-0.0019893216,0.0029622435,0.00012431825,0.001091671,0.007694996,-0.0051258462,0.015457279,0.0007233467,0.041753847,-1.716251,0.27287063,-0.04338473,-2.7965915,-0.23142749,0.055302404,8.012143,0.0752171,
			-4.3245287,0.0148461135,0.8994174,1.4466116,8.034349,0.2774071,0.07638475,2.4796844,1.4309046,2.2194357,-0.23320684,-0.13561505,-1.6816214,2.7174408,-0.964628,-1.5675545,0.4991765,
			0.16358222,0.14541863,0.038703177,-0.10310315,-0.109921485,-0.040978864,-0.0070091295,0.23777248,1.0262542,-14.553531,-5.4220457,0.8717379,0.10100155,-1.9204168,-3.0889273,1.8045512,1.8484434,
			0.74316853,-0.12681009,0.11217386,-0.08101799,-0.6382548,0.028597515,0.2142485,-0.07787949,0.044931762,4.588088,-0.33390623,-0.07299908,-8.60187,0.4114232,0.2161478,0.10329324,0.03896955,
			-0.86834407,0.07623645,0.016287172,0.11952495,0.9360168,0.043243386,-0.13450472,-0.04893498,0.19833654,-8.96444,2.1078172,-1.1533612,-3.3210118,3.9561782,-0.41357082,1.5741894,0.034525625,
			0.7443888,0.07634606,-0.04997496,-0.036760483,-0.23346755,0.047514573,0.05428414,0.22935851,-1.2908051,20.152107,-3.4569447,0.054603245,-1.3593572,-0.96739453,0.9168808,6.513158,0.90706545,
			-0.0497792,0.014121061,0.025540905,0.018179292,-0.02637546,0.018625572,-0.025470685,-0.0135894185,-0.56933117,23.40202,-0.92306304,0.11149279,0.24404053,-1.7073251,0.8820626,-3.347441,1.1137223,
			0.017123738,0.038470745,0.020811288,-0.09132548,0.01289863,0.049057465,-0.029217703,0.03243075,0.7137744,6.37941,-1.7568848,-1.6125538,2.3358161,-1.9130844,-3.2114708,4.578614,0.34067875,
			0.1386339,0.106599,0.01548166,0.008827409,-0.05587537,-0.07631814,0.13242191,0.2340227,0.22059067,12.234675,5.5346494,-0.1318014,1.4531264,-0.4974753,2.0548944,-4.0381827,-3.136667,
			1.0509673,0.044336546,0.006133507,0.00647396,-1.1345699,0.14569713,0.21890025,-0.08132398,0.35157067,-22.480862,0.35041624,0.05983701,2.3277707,0.32261243,-0.36996862,2.6291504,-0.42792588,
			-0.43749225,-0.013444634,-0.07192359,0.13703445,0.2421059,0.047830634,-0.33472967,0.09339592,2.5915565,1.4985482,-3.735212,-2.2064712,1.1707821,2.8639827,0.6908239,-4.5726943,0.54504377,
			8.235877,-0.05633157,0.13350303,-0.4031685,2.141127,0.6136827,-1.8750858,0.7493174,1.5911072,-10.055175,4.017193,0.14421281,-4.536503,-0.61541545,0.39542657,3.1228936,0.19075571,
			-0.022463327,-0.012780087,0.009312506,-0.009810961,-0.009226913,0.01492801,0.012660551,-0.0125342505,-0.22004417,21.627472,-3.350457,0.16119374,-1.1525477,2.2027166,-0.06379377,1.3064339,-0.505771,
			-0.04684324,0.027399661,0.046083584,0.052747786,0.16775727,0.0993599,-0.3106562,0.07659139,-1.445101,-16.232235,-4.205449,1.5255121,1.9771354,2.7942677,-1.7872521,-4.6117644,-0.54223937,
			0.02372566,-0.006850887,0.012191491,0.042522702,-0.039342605,-0.0031012055,-0.036445178,-0.019845711,-1.5839812,-5.8250604,2.508459,1.2468243,2.458427,2.9540913,-0.7510882,-6.3351626,-2.3634682,
			-0.2699012,-0.019967312,0.04028083,0.07162964,0.26618668,0.013265315,0.16499975,0.06451248,-0.25948212,1.0630425,1.4254401,1.8223295,-4.209787,2.2953873,1.4339483,-2.1397989,-0.047141585,
			-0.9685533,-0.15265955,0.16622122,0.751848,1.5976523,-0.0037575413,-1.2085896,0.1545484,-0.6100786,12.260751,-1.5526946,-1.3465087,3.2963262,-2.9508896,-0.3948598,4.6522346,-0.9441219,
			0.0490431,0.055444956,0.050106287,-0.15044172,0.2443487,0.03303042,0.4318776,0.24131365,0.24031742,-0.5670142,1.2531234,-2.8880558,0.6588946,4.7758503,-0.18233575,0.54281795,0.21242858,
			-0.22014621,0.059141934,0.023182848,-0.08806511,0.16530871,0.04163506,0.17621048,0.07265043,0.32463828,2.699049,1.6445825,0.24298842,2.649612,-0.54785013,0.044008628,0.44316468,-4.7976327,
			4.3365693,0.28490064,0.17447822,1.5045325,-5.7671266,-0.16504914,-1.5887853,1.5097519,-0.51029634,3.8251743,8.275772,0.5538709,4.3265667,2.357587,-1.371745,4.7911577,-0.5904764,
			0.052280895,0.15658447,-0.09150403,0.16959545,0.159572,0.10043785,-0.3323388,0.35406873,0.16904989,9.5061455,0.6963879,-0.1351822,-7.326728,0.34206423,0.6100019,-0.48044416,0.2631549,
			0.047630534,-0.0059985965,0.02030372,-0.14120626,0.10554708,-0.008361406,0.0480185,-0.11521884,0.50730485,-9.382191,0.47594425,0.44656184,-3.513999,3.0269613,-0.73705876,-0.16019367,1.6781883,
			-0.048418757,0.016222708,-0.025260024,0.020968342,-0.06773592,0.12849142,-0.32083932,-0.048426062,-1.6733828,-4.485634,7.587312,-0.35264546,-0.4594576,-0.47038993,3.462146,1.1905905,-1.4168512,
			-0.08848729,0.00071832386,0.020404397,0.0002707867,0.08468762,0.013962324,0.089598306,0.003991165,-0.001947193,4.7479057,-0.45658797,0.4753807,1.6939962,-5.845181,0.0029348992,0.43398803,-0.035112694,
			-0.0020031899,0.019652503,0.0042977724,-0.0051929,-0.024885114,-0.00044251946,-0.008499782,0.028271597,0.5824045,23.524595,1.5553199,-0.5818265,-0.7893439,-0.9301435,0.70965993,-0.3173662,0.14271991,
			0.000364011,-0.016285554,0.026460567,-0.0016686054,-0.024377156,0.0028384547,-0.013116204,-0.021328056,-0.44727072,22.474573,2.4092188,0.67359847,-1.1962359,-0.83610976,-1.1885985,1.2133408,-0.008539937,
			0.60941225,0.071061656,0.07839321,-0.06242141,0.25717324,-0.12171618,0.61828786,0.39080146,-3.1920059,-5.0989175,4.093979,-1.1257508,0.98486716,3.5428271,1.8675867,-1.3835521,0.684834,
			-1.4052838,-0.15212232,-0.0049720313,0.7097335,-1.8279725,0.2420671,7.4653893,-0.50552005,-1.5105522,-6.275474,-0.20009185,0.71896917,-7.161986,0.37932497,-0.5318069,-2.8573396,1.1220948,
			0.20155726,0.08941957,0.16789627,-0.22968167,0.37433022,0.114060625,0.36761275,0.05290766,1.7977996,-3.1385489,-3.1513236,1.033773,0.39641964,-4.6645756,1.8557854,1.9940952,-2.2234263;

    h1_h2 <<
			0.53802645,-3.1308737,1.5126047,-2.9126859,-0.27665734,-1.6646795,-1.4445188,3.5984285,-0.260974,-0.36148205,1.6718168,0.7167877,0.33835393,-3.109931,0.9916755,2.1376758,-1.3498094,-1.8377371,1.278062,1.4108782,-1.8644413,-1.6694133,-0.053845923,1.7850517,-3.2439508,-0.32585573,0.37624937,-1.885976,1.9019612,0.26001087,-0.68983984,2.3741975,-0.67603827,0.97378904,0.31074408,0.96185786,-2.185139,0.87660474,1.9013187,-2.7086654,
			0.34748864,-1.3335093,1.3264029,0.4117474,0.77461404,1.5703073,0.33082244,5.116301,0.39834583,2.948019,2.4842594,-0.0070926463,-1.5526061,-1.1921512,3.3841815,1.2392982,-1.011733,-0.3171627,-0.4405501,0.5257373,-9.485378,-2.134609,-0.011749418,0.8244943,-2.7296822,0.05109806,-1.3108163,-0.64873403,1.7842373,1.0643508,-0.66186714,4.983697,0.64851546,-2.4638011,-0.0547239,-0.69165426,-0.40330073,-0.8423494,-2.0403442,2.2243717,
			-0.18352602,1.0233245,1.7946002,-0.36506632,-1.0031564,0.10665681,-2.6481845,0.22672834,-1.0901239,0.79496115,0.14613703,0.9466676,-0.9277269,-2.5167077,0.45958668,-1.1060569,-0.84599113,-7.8124886,0.18046595,2.3788621,-1.363735,-2.2931921,0.87885684,2.3225372,-0.8349277,-0.006013627,-2.4360886,0.5803244,0.73803633,0.71226865,-0.9534451,0.52183944,-11.057985,0.014914584,2.8201675,1.0049682,1.258383,-1.1229655,0.54738194,0.9807287,
			-0.36238822,0.859828,-0.13531144,-0.70633477,0.6149286,1.2521971,-1.1894023,2.2400978,1.3277209,-0.6435144,1.8881581,0.36839005,-2.5377948,1.5769074,-1.9592736,-0.21620207,-1.0644885,0.73454845,1.4616833,-1.546866,0.39803216,-1.2377696,-0.7220846,-0.120576054,1.7160486,-0.9289789,-0.3579129,1.99929,-0.3589764,0.0597311,-0.059453957,-2.7057679,1.538546,0.596339,0.7556141,0.62866884,0.07762656,1.2453209,-2.419273,0.79298174,
			-0.478647,0.72262216,1.229189,-1.337647,0.9129634,-0.6035883,-0.5492496,0.38313228,0.5477209,-0.3861929,-2.564571,-0.09729544,-0.92165595,3.1353812,-0.4351692,-0.55372065,-0.65937334,0.63871205,-0.078333594,-2.0978007,0.243788,1.4634874,0.12080997,4.7977324,1.7539914,-3.0413637,-0.12415847,-0.94584155,-0.664348,-0.6797816,-0.3360874,-0.023134232,0.192075,-3.9711242,0.0937102,-11.465595,-7.2540865,0.27863973,1.1000024,0.38858622,
			-0.09715403,0.4994951,-0.013507947,-0.71370256,-0.15328342,-0.64886266,2.3103764,0.14086048,-1.4499993,1.2240264,-0.3019308,-3.0952764,0.67109716,2.7187696,0.47244537,-0.060225945,1.1123035,-4.8040934,0.2305398,-1.0193232,-0.28007618,-0.047042303,-0.3879303,-0.7185681,2.2770066,-2.8491166,0.25856057,-0.70726234,-0.2504096,0.2114871,-0.13479228,-0.41186988,-0.07265236,-5.471769,-0.3043465,-6.6803274,8.165331,-0.8440023,-0.3144056,-0.28912622,
			-1.8022691,-0.99986106,-0.024529904,0.52465534,0.77611905,0.31784588,-1.7781878,-0.5777149,-1.2737421,1.2126814,1.6172792,-0.026272543,1.1395313,1.5486887,-2.9340765,-1.5596912,0.601414,2.3149471,3.2593884,1.6623112,-0.32863814,-2.0594401,4.104899,0.42119193,0.75965005,0.7461302,0.22913836,-3.18538,-2.005008,2.9498315,0.26062724,-2.7166421,-0.11175267,0.22552145,1.5165806,0.20983747,-1.7992315,-2.438652,-0.2124126,0.54299194,
			0.3943943,-3.1501245,2.9204204,-2.7499545,-0.29289484,-1.8661242,0.035130527,-2.3372025,0.46931884,-1.2942562,0.2217282,1.398049,-0.2749734,0.703635,1.7267691,2.4931245,-1.5006181,-3.3923178,1.0837063,0.9868423,-1.9882777,0.14046259,-4.326668,3.0611792,-2.880055,-0.41398424,1.5178083,0.64972615,-0.18566419,0.6176016,-0.7694728,0.48536664,-0.6448472,-0.39312053,1.4191003,1.8323287,1.9684305,-0.8302999,-0.017022692,-0.3503846,
			6.4149714,2.6416388,-1.1385837,-0.03245515,-0.07678225,0.24774516,0.04553179,-0.28075084,0.35154456,0.1824764,-0.9904753,-0.21827759,-0.2814073,-0.61578184,0.07846598,-0.5149811,-0.0978331,1.3539342,0.18619816,0.018573754,0.09032829,0.40711632,-0.06561881,-1.2745816,-0.18057853,0.16451627,-8.503127,1.0670589,1.136918,0.04304156,-6.139727,-0.50735664,-2.878615,0.1307964,-0.008422502,1.1377,-2.048083,0.39099896,0.18396936,-0.4697776,
			-2.2376022,-0.9304305,2.6577144,-1.7786593,-1.0033551,1.4781837,-0.13144729,3.0973728,-0.2174443,-1.6278768,0.28851038,0.77959985,2.094443,1.3320476,2.108711,1.6044374,-1.1945283,0.72102594,1.4907632,0.15443619,-0.7559297,-0.36811787,0.9166728,-1.3438604,-3.1023636,1.4361606,1.6330079,-1.9016733,-2.3770514,-0.13583583,-1.8690989,1.6845596,-0.37567517,-0.2918822,1.7594271,1.0386348,-1.558074,0.74152905,-0.67284703,-2.8636322,
			-0.5790059,-1.6605504,0.040881556,0.014396589,-0.016061801,2.187506,-2.31288,2.1632798,3.0520422,-2.2638865,2.5244536,-0.81388783,-1.1443167,-2.8341126,-0.17763667,1.1892276,-1.1038874,2.965744,-1.0067581,-1.4219451,0.30307305,-2.5212831,-0.6990195,-0.034410715,2.4259405,0.2072205,0.9724452,-0.60764927,0.46692288,-0.19011717,-0.102340184,-0.26985362,-1.2449435,0.8114738,-0.561008,-10.343175,-3.9277668,2.205256,-0.18457933,-0.8114159,
			2.7220824,1.020122,-1.0626128,0.090317436,-0.11981969,0.32983866,-0.8000158,1.1032414,-0.5517497,0.6369295,0.30469793,-0.42223716,-1.3347123,-0.507618,-3.301104,-1.0919484,1.4065396,5.6307287,-0.10744156,-0.047499873,4.8845415,1.4778767,2.4085994,-0.6164524,-0.9870043,0.076483175,0.48070803,-1.5393935,1.5942751,-0.890688,1.3654176,-3.162173,0.04907819,-0.6443344,1.8430132,0.5099998,1.2072698,0.6511753,0.77327245,1.0319605,
			-0.7175207,-0.22414398,1.0716193,-0.7587045,5.320269,-0.57378924,-0.989269,-1.4330888,0.3580738,-0.014013268,-0.41720378,-0.8685975,-0.054002,-0.0034773024,0.11452374,-0.82107025,1.4820207,-0.5659993,0.39156285,-1.2993336,-1.4674716,1.8163135,-0.54430014,8.768647,0.16306369,2.5868201,-2.8863401,-0.73034364,-0.6894356,-1.223409,0.021296352,0.32326478,-1.0504713,-0.79460907,0.94116974,-4.676543,-3.1939733,0.54102623,-0.022399731,-0.6603655,
			-0.12065647,-1.7657936,0.5553253,-2.586136,-1.1222351,0.24060959,-4.3745375,0.20122865,-0.4219881,-0.7040594,-1.3532432,-1.6998022,-0.01801128,-2.924047,0.77954155,0.93954325,1.2376707,-6.5273385,0.5888615,3.52166,0.03599022,-0.669285,-0.47615507,4.837926,-0.13702185,0.17064807,1.5345247,0.9384785,0.34860134,1.4692843,-0.51147527,0.97369087,-2.7095973,-0.9127351,-1.5590284,-2.3019404,1.0168281,-0.17143866,2.4882503,-0.43551847,
			-0.659131,-1.13242,0.8088297,-1.1021553,0.051429264,0.46019763,0.20642595,6.8283424,0.14980307,-1.1124614,1.3319076,-0.6943991,0.015885,0.8782574,-0.039333705,0.7561193,-1.4737747,-7.765392,0.006842159,0.020285022,1.5521584,-0.583604,-0.075396165,-8.492239,-0.18569086,0.24009669,-0.19144641,-0.29420575,-0.4893113,0.20436499,-0.14141195,0.020369325,0.31701383,0.23160386,-1.0017451,-14.567312,-13.340631,-0.08627319,0.24517326,-0.028630806,
			0.59340954,2.3959405,1.466103,-1.2659569,0.22220191,-0.9149608,1.0753831,-0.9254613,-0.74355954,-1.0419606,-0.103310995,-0.18999322,-0.89463174,-2.5020478,3.242528,0.35173035,-0.49557784,-2.896953,-2.0711155,1.0852766,0.30161843,-0.42977464,0.58317363,2.301696,-2.0313263,2.5458148,0.20766121,-0.8303218,-1.1267097,-0.97964025,-0.14182088,2.245835,-0.27416545,2.7004411,2.8314593,1.0177959,0.794254,0.342505,-1.751211,-0.3380104,
			0.35186774,-2.1553638,2.1997938,-1.157805,-0.44354007,-0.78259397,-0.8262787,3.3896425,-0.43247524,-0.087699726,0.6576552,1.0031031,0.20792425,1.4660821,1.4443542,2.3473191,-2.4598563,-3.7634218,0.20634207,0.01303762,2.1364615,-0.8086794,-0.84828836,-5.5062356,-1.2191731,-0.1656548,0.35217068,0.47033644,0.1379864,-0.7814247,-0.4017339,0.37980488,-0.49519655,0.37706164,1.1575527,-10.07613,-8.01233,0.22375755,1.5827701,-0.40101734,
			1.4520506,-3.5915577,2.0958295,-0.8677074,-1.073678,-3.2295625,-1.8802805,2.278434,-1.3300956,1.7956321,0.8925456,-0.10952772,-0.42518136,0.41339487,1.9249462,2.2224183,1.667842,-1.0657079,-0.750695,-0.70264614,-4.4995465,0.1695908,-1.11417,-0.23479058,0.2573336,-0.5224128,1.1234729,-3.3483138,0.18440816,-0.8912681,-0.05130809,6.9350715,-0.15062653,-1.1937287,0.9554397,-0.8248764,-0.62454665,0.2880032,0.700694,-0.03743226,
			-3.9509225,1.1106976,1.5300097,-2.2547946,-0.87955934,2.45662,-0.8729274,-0.070563816,1.3793567,-0.3060302,1.2238053,-0.27573395,-0.15472826,-1.1743202,0.15961857,0.9010627,0.98430556,1.881218,-2.4552839,0.37067458,0.44394705,-3.404791,0.5320595,1.0605868,-0.79841226,-0.35072616,-0.96070766,-0.9203143,-4.44335,-0.7917554,-0.69453114,-0.03426013,-3.401721,0.294317,0.82710046,0.73709774,7.053869,0.5906781,0.41820318,2.023986,
			-0.5589671,-0.25246578,-0.23922206,-1.7838416,0.8393982,0.8691051,-0.9294854,-1.884983,0.9379968,0.3993128,-1.1161202,-1.0544665,0.34294638,-2.2208493,-0.04933402,0.7170942,1.2244794,2.7009559,-2.1024764,1.217627,-0.5213158,-1.562754,-0.22296727,9.096959,-0.37041667,0.057565797,0.10666211,0.1152324,1.2859763,0.5969808,-0.08436065,0.32293463,-0.47780684,0.52110136,-1.688233,6.49138,-4.162802,0.42844746,-0.5360894,-0.9029835,
			4.0107493,-1.2152209,0.22661439,-0.8128858,0.07820105,-0.5244194,0.71718854,-2.7107236,1.0285597,-0.20779222,0.1307142,0.9788055,0.026305879,-0.2802897,-0.76445085,-3.4012268,-0.6053084,8.419052,0.441794,-0.015695954,-1.8236836,1.4693489,0.5476224,5.205564,-0.4164284,2.4155276,-3.2333853,-0.6749205,-1.9477241,1.3711463,0.16861485,-0.2704306,-2.6269968,-1.7424868,3.388019,-1.9835936,-1.6198273,0.48583037,0.7321037,0.28762242,
			-0.61694825,-1.7315736,0.89386755,-1.1253364,0.45315793,0.29667327,0.6807768,-6.7781644,0.2705965,0.90016365,-1.5560672,-10.614291,0.57803226,0.0045954627,-0.021745743,0.38080943,1.1003592,4.0155106,-1.0156524,1.0770209,-0.81166905,0.6876297,-0.23532365,0.76154685,0.8054913,0.7015597,0.2931009,-1.2873414,-0.88301915,0.2780795,0.19399257,-0.62850267,-0.15060937,0.37064725,-1.3918561,1.2854636,3.2806396,0.24030356,0.5413247,-0.9020115,
			-4.592441,-1.3906196,-0.42606255,0.42720586,-0.15435532,0.970203,0.27534008,-0.0546929,0.44939262,0.89265835,-1.02792,-0.017231327,3.4079773,-1.754723,-0.43667808,1.3245167,1.3690349,-2.9069898,1.2054203,-1.2910852,-1.2855464,-1.1927011,0.5583777,1.373897,-0.018837545,0.39646456,0.55462295,-4.056709,-2.0077293,-1.9226973,0.212419,0.79034346,0.9099282,0.30045033,-5.6117573,0.07600661,1.315512,0.11185976,1.7065647,-1.1795213,
			1.3617666,2.7367525,-0.3375347,-0.17652631,0.4171208,-0.6296235,-0.8479965,2.2228894,-0.5639727,1.2965806,-2.8188074,-0.49122173,1.4869941,-0.69891113,-0.2586975,-1.0885855,0.24404739,-0.9557657,2.4578018,1.851809,0.98205346,0.3824281,-0.6090276,-1.7466676,-2.1479404,1.0689014,0.016916236,0.28199673,1.004352,-0.46035296,-0.062430244,0.56357425,0.042094126,0.24782301,-0.28328678,3.444127,-9.50443,-1.0485566,-0.81065863,-0.4904889,
			0.024386955,-0.09121691,0.2782392,0.15526679,-0.10526964,-0.10452044,0.3199948,-0.20720285,-0.057436198,-0.59063923,0.2035108,-19.237751,-0.093063824,0.05121055,-0.09223661,0.10941241,0.13782997,-0.9358665,0.07359457,-0.017297877,0.1308393,-0.32717314,-0.09585153,-0.08568272,0.15402004,-0.04495058,-0.057635378,-0.20263375,-0.12579042,0.196629,-0.06333008,-0.1197985,0.35913265,0.10057119,-0.09357242,1.2384399,-0.4259611,-0.22080062,-0.28132835,-0.018310305,
			-0.5473339,-0.5556797,-0.053998485,-2.9330552,-1.1190561,-0.06583665,0.47117114,2.0264199,-1.2726625,2.0684483,3.1651087,-0.5427149,0.30826044,-0.79436535,0.018312205,1.6572973,1.3699074,-0.47038037,3.3008575,-1.0741768,-1.233799,-1.0077486,2.3177984,2.2969842,-2.4349492,-1.1358609,-1.4324572,-1.3724988,1.6838279,-0.8587566,-0.23341021,0.37559092,-0.13227658,-5.0107617,2.1260555,1.9234183,1.5150776,-0.49692056,2.9764795,-5.620045,
			-0.032634262,-1.2389219,0.4126885,-0.0922486,-1.9182454,-1.6236758,-0.06647364,-3.260613,-1.0448358,0.18418014,-0.55338746,-1.3956971,-0.6711747,-0.75833493,-2.885096,0.43188873,1.7494165,3.2812402,2.112284,0.43611252,-0.23120578,0.7736394,-0.10923081,-0.15540282,1.2842163,0.4389482,0.6573155,-0.2514842,0.14797015,1.7112335,-0.2453252,-1.5271589,0.2695491,0.039244235,0.80542994,2.3405776,5.1387143,-0.975499,-1.1772176,0.5361644,
			-2.0800915,-2.5889394,1.4113947,-0.41231468,-1.9117402,-0.8604717,0.39617246,4.343525,-2.1752105,-1.9173433,0.83968014,0.52146727,0.5666279,-1.0922225,-0.966059,0.36025262,1.2359546,-9.115427,-0.95350766,0.9823625,-0.18722448,0.5526365,0.3210228,-5.953869,-0.8523426,0.6544841,-0.22993791,-2.3402402,0.13039474,0.5379307,-0.030902341,0.8174906,0.97433186,0.20723967,-3.3904133,-2.1669774,-0.07355479,-2.0515535,-0.17534943,0.7772313,
			-0.09120707,-2.1350691,-0.6620207,-0.5157286,0.016143356,-0.5933727,-1.0257288,1.0859921,-1.1837838,-1.4306113,-3.596587,1.6016864,0.8974197,0.73894656,-0.92436224,0.9236954,-1.0234545,-9.011146,-0.28379866,-1.1568167,0.2962322,-1.0892472,0.11585905,0.4042748,1.5120174,-1.4037857,1.3223397,-3.0777535,2.5235248,0.55155045,0.37143338,-0.4557996,-1.29964,-2.9509106,0.30567116,-0.014789766,-3.0629923,-1.9394262,-0.48023117,-0.24076284,
			0.8802406,-1.9708759,1.5321788,-2.0378387,1.4109572,0.7991166,0.7294796,0.63255644,-1.1219736,-0.45131344,0.44471034,-0.11976387,-0.6980525,2.009506,-0.034319982,-0.19974563,2.0026913,5.267122,-3.0343225,-0.9202507,-0.31543535,1.9696757,0.5964706,4.7026753,-0.95186734,-3.5792754,-0.35397914,-1.325124,0.061799634,-0.27993786,-0.12356134,1.261257,0.5274839,-3.417123,-0.24699971,0.6197119,3.2874951,0.34500918,-0.918442,-0.71729493,
			0.4467199,1.1419821,0.2385733,-0.64623207,-3.3562255,4.4870796,-1.0342596,2.0127313,3.757926,-1.1866187,-0.25666696,0.38237265,-0.08903564,-2.8707817,-0.38580552,0.68679696,-0.13028769,0.43303406,1.1360925,-0.80879337,-0.5906771,-2.2031968,1.0599711,1.5564575,-1.826363,0.06488945,-2.4104826,-0.22061479,1.1526097,-0.858753,-0.29105312,0.31122744,-1.8297222,0.032578316,-2.891295,-0.29874185,2.0258214,2.158001,1.7199633,-4.5392184,
			-1.8563603,-2.797569,0.34744054,-1.3829695,-0.10155249,0.09804599,-0.82184607,-5.1868334,0.35118768,1.5491395,-0.6784479,-2.0293612,1.0171287,0.0825575,2.337613,1.2908844,-0.17109406,3.8684006,-0.2533756,-0.3003811,-5.636621,-0.12904821,-1.2353235,1.8583702,-1.5642278,0.45626235,0.44619733,-1.04314,-0.62497956,-1.8753798,-0.856691,2.053566,-0.45662513,-0.18758488,0.7952082,1.4439842,5.7625823,-0.019101009,2.2432296,-0.6284338,
			-0.13473068,2.5824938,-0.14152892,0.02248975,0.3831664,0.15924023,-0.1241201,-0.444983,-0.2265743,-0.14357823,0.2738478,-0.19217575,-0.41954586,0.043999515,-0.03232274,-2.3658025,-0.03457119,2.1398966,0.18507029,0.06671644,0.06788613,-0.3638952,-0.014164606,-3.472536,-0.09376,0.08712365,-5.4633737,0.9057722,-1.0843918,0.23068114,-4.1854386,-0.341548,-3.7920063,0.032303803,9.447014,0.5480478,-0.30112454,-0.30325127,0.19511116,0.6801903,
			4.4899554,0.5814197,-0.9941051,0.08319965,-1.0327383,1.1570301,0.13909677,-0.60973626,1.2585344,2.2916465,0.14694855,-0.099773325,-0.28630468,0.24871029,-2.163302,1.3686497,1.054431,-0.9564451,4.5407515,-2.091679,0.08467333,0.91787314,2.653528,0.6420939,-0.5044841,0.08261433,-0.93717617,-0.8898587,0.16851792,-1.5770812,-0.31258866,-2.4357684,1.4251591,1.7167183,-2.8645277,-0.77964026,-0.09106194,1.6014386,-0.26003948,-1.9313129,
			-0.022853158,0.42161635,2.1213925,-1.2503511,-1.3819064,-1.5544319,5.0199304,-0.03312584,-1.2408208,-0.3863666,-0.22780341,-1.5400821,-0.008603813,0.74868554,0.5468725,1.1175575,-0.35507852,-6.481285,1.6262752,-0.8777373,-0.30322108,-1.0374829,-0.085439794,3.0400915,0.52737784,-0.41571692,-4.032992,-0.31346926,0.30916867,-1.6413094,-0.5397514,-0.0030264822,-0.7141439,-1.2779236,-1.0712672,-2.765116,5.979401,-0.5880488,0.18388015,0.038954597,
			-1.8029265,2.335171,2.6174245,-1.5891227,0.05932744,0.253923,0.11376121,-0.28777733,0.02267244,-0.6125126,1.0928003,0.4838569,1.1062571,-0.23803492,-0.32543334,-4.0775805,-0.18843159,3.11525,3.1409001,-1.8495843,0.5709781,-2.7775779,0.39321554,-2.6634178,-2.726627,-0.47461823,0.08559712,-0.17558792,-4.0444503,-1.6987314,-0.26501176,1.3543115,-1.1222949,-0.9022439,4.842156,1.0843542,1.6755524,-2.36674,3.4012518,-0.16772343,
			0.4613183,0.5137539,0.59287083,-1.1996,-0.88729155,-1.0520934,-1.4387735,-3.0176063,-1.0831469,-1.220287,-2.2096875,1.5764303,-0.18769827,-1.5334339,1.582816,0.83124155,-1.2141085,2.900258,0.11580433,-0.6423549,0.5676638,1.5073895,0.10595798,-0.49697948,-2.4391093,0.12943661,0.2164546,0.8958824,1.5945446,-1.1358863,-0.25358105,1.576611,-0.5944183,-0.9845503,-0.326593,1.7962596,4.4509144,0.17927451,1.131314,0.9038322,
			-0.37056747,1.0277843,-2.0734212,1.216617,-0.033731796,0.17043072,2.8174646,-1.8625909,0.35009855,1.8079093,-0.45502296,-0.08573919,1.3087698,-0.28586072,-0.4396548,-0.90492076,0.8426895,-7.7422514,2.6941333,0.8450178,-0.8503249,-0.26370552,-0.22091387,-1.2691548,-0.07796542,1.1032271,-0.13489605,1.5081201,-1.199457,3.34625,0.30262634,-1.2732717,-0.5632851,-0.082840085,0.17399548,-0.64792967,1.715221,-1.7359892,-1.3242373,0.8682743,
			0.54481703,-1.8783782,0.4081904,-0.69869703,-0.47688052,-0.57691073,0.2361963,-0.061897516,0.2021719,-0.82826394,1.5022095,-0.08217987,1.5430193,-0.10507427,0.84480083,0.50418663,0.027346153,6.6213136,-0.5757509,-0.33581606,1.0446526,1.4060735,-1.1920187,-16.247221,-1.6207386,-0.25282255,-0.10228576,-0.70943,-0.26860473,-0.22908096,-0.008062001,0.816824,-0.2583984,0.33041263,4.7278357,1.4149928,-4.738426,-0.44449532,-0.67625535,-0.15771271,
			-1.7890354,-1.0699421,1.208171,-1.0561976,4.1227894,-1.2418805,-0.26373023,0.05111967,-2.4640496,-0.39590356,-0.035797246,-0.05008742,0.13643423,0.5466695,1.5989376,3.1354554,-0.90224534,-2.7832015,2.8342497,-0.53652966,-0.44674715,-0.6191209,0.5309726,5.0329547,-1.5189625,-1.9638811,-1.6025327,-1.0835123,-0.90603834,-0.58278155,-0.30590537,0.5513302,-0.7437968,-3.0444624,0.05707274,1.9897376,-1.8211138,-0.7698996,0.93214446,-1.0051812;

    h2_h3 <<
			0.74474007,-0.11367887,-1.566141,-0.1683761,-1.021449,-1.181685,0.07482688,1.2068452,-0.25240743,0.6726227,0.20320106,-0.027359435,-0.10697902,0.38164732,-0.15453206,-0.17240106,-1.263532,0.31629202,-0.2657007,-0.51460075,-0.010437701,-1.6878104,-0.14048721,-1.1235822,0.67305714,1.31762,-0.6093475,0.94842786,0.7840959,0.042797722,-1.030957,-0.7836799,-0.16599582,0.15521508,0.23357162,0.68006235,0.6929763,0.27199915,-0.7660382,1.5705189,
			-0.7339569,0.32669768,1.3745198,0.37547177,-1.0367943,0.3880377,-0.73979235,-0.7083891,2.4216683,0.81073546,0.7994113,-0.8793698,1.19877,-0.56044006,3.3729084,-0.271677,-1.9999775,2.1434324,-0.36157942,-3.626017,-7.826411,2.406787,-2.708988,0.27347368,0.56968135,0.37857774,0.36924383,-2.5330207,1.8584495,-3.489995,1.4224087,-1.1840053,1.1620412,-1.2072227,0.20053497,-0.5678122,0.21951102,-1.0722818,-0.42452005,0.5400384,
			1.3463647,-0.058589716,0.1075062,0.27372277,-0.24122043,0.23053223,-0.25494075,0.183551,-0.08040656,1.5508165,-1.2184062,-1.4695646,-1.918881,0.22276798,0.60133517,-0.1888419,0.52842516,2.6773684,-0.81783104,-0.051793654,0.027429972,-0.16340962,1.5278132,0.048613627,-0.3612137,-0.0599825,1.568605,1.4063377,0.0020311556,-0.6350078,-1.3837514,-1.1344551,-0.06367879,0.110574044,-0.20900919,0.35894167,0.3108436,-0.58584255,-0.5460306,-0.69213957,
			-1.2784898,-0.37596133,-1.1182894,2.8789487,0.19637811,0.26501733,-1.7983863,1.1483514,-0.7350535,-1.1350031,-4.968198,0.048493426,-1.0407048,-1.0262551,0.80763465,-3.144032,2.992171,-0.3215937,-5.3579645,1.0478796,-0.3464056,-0.07082954,0.17847541,0.10788995,-0.18920815,0.5275617,-0.33501357,1.354785,0.71994036,-0.3741546,1.0969112,-1.0045202,-2.435395,0.21659994,-0.30592164,-1.1123643,-0.32312623,0.26088724,-1.8254335,0.90981936,
			-0.2329537,-0.13810657,-0.46748355,0.09778269,-0.22498468,-0.25029764,-0.25920713,-0.36475202,-3.2119362,1.5142252,0.20435195,-0.9084396,-0.55759436,0.76266557,-0.32196316,0.10486019,0.14693168,2.6336658,-0.45872745,-0.14241365,-0.103704095,0.09589353,2.7997024,-0.10183401,-0.095728956,-0.14659706,0.7768045,-0.81377274,0.49294165,-0.07796984,-0.15063256,0.7600305,-1.244127,-0.9234834,-1.8376101,0.21209419,-0.8030597,-0.541216,-0.5585184,-0.8454712,
			0.61086935,-0.027263217,1.469025,-0.5097504,-0.1098452,-1.103536,-1.7492617,0.94668496,-1.40076,0.7616604,-1.6487619,-2.9918718,-0.58509207,-0.38352165,-2.3453665,-0.31663668,-1.5061051,1.5990673,1.1492237,0.4299997,-0.12363728,-0.9045964,-1.6096864,-1.3713502,0.3226655,1.9174458,0.36668703,-1.6029143,-0.20688517,-1.5765471,1.2651507,-0.8254509,-0.6296272,-1.0521363,0.6528613,0.1785852,1.115178,0.27734786,-2.3296802,2.6476126,
			2.4718666,-6.2881436,-1.4358314,-0.772196,-0.78003633,0.43280643,-0.5939525,0.5681879,0.70082396,0.9023963,-0.9238412,-0.91260743,-0.81869125,0.6357704,-0.3143402,-1.4952041,-0.16521665,-0.5672931,-1.4599618,-1.7747673,-0.021982566,-3.5883572,-0.8334507,1.0139092,2.3666914,-1.1876408,-3.357101,-0.128041,0.9817119,-0.0054882783,0.2731164,-0.60561764,-0.098064214,-0.673982,-1.5246044,1.7109385,-1.366011,-1.8776037,-0.3992539,0.9590379,
			1.9927127,-4.5440526,-2.274734,2.2807777,-1.2665067,-0.66452914,-2.6628692,-1.4921055,-0.15860294,-1.1491947,-0.058045805,-1.8049971,-5.0757937,-0.34050077,0.35458156,-2.4226935,0.16349734,-0.653856,-0.36643788,0.186224,-0.101725385,0.30382818,1.241684,-1.1542866,-0.11706012,0.91610914,-0.5852197,0.25280672,0.39112985,-1.0081333,-0.14029497,0.5704611,-0.58977616,1.5179025,0.29016024,-0.66590995,0.27370754,-1.6583071,-0.9778581,-0.49289125,
			0.60056716,-0.75409997,-0.7451739,0.85198164,0.12745987,-0.0929247,1.5179788,0.08996726,-1.9409672,0.31377798,-1.7028778,0.031437613,-0.24230254,-0.4080081,0.39324132,-0.8490966,0.70193183,-0.36546156,-0.25139117,-1.1412807,-0.08512198,0.0010826894,0.16156153,-1.3230741,-0.067400984,0.044288434,0.84900415,0.32380667,-0.7145449,0.7273347,-1.8703536,1.3594517,-0.25872326,-3.43496,0.0509377,1.1210744,-0.72605115,-0.6105743,-1.0130019,0.75411814,
			-1.1015826,0.46061665,-0.7123492,0.6059666,0.49655572,0.5885972,0.2075935,1.5033222,0.47065416,1.2570266,-0.34398907,-0.06373036,0.1203957,-0.82783216,-0.28845748,-0.82947373,-0.50966287,-0.94523144,-1.0673456,-0.70034707,-0.24119411,-0.30769908,0.82656366,-1.330016,-0.055002585,0.39584315,-0.4993338,-0.26838347,-0.42635298,0.98676914,-0.9204974,0.8078436,0.42826405,-0.11218009,0.84310764,0.41397598,0.17724124,-0.58771247,-1.1563005,1.5052098,
			1.5202378,-0.70426124,2.3549716,-0.4668066,0.09482871,0.52775323,-0.24688081,1.0335059,-1.4429663,0.5476725,-0.43498686,0.004928999,-1.7968742,-0.72166824,-0.587097,-0.8827544,-0.38923454,-0.77055055,1.1155907,-1.2970883,-0.84062326,0.14266008,-0.12616609,-2.7556422,-0.760881,-0.66111267,-2.0473106,0.6823648,0.35297343,-0.97873634,0.5075035,-0.5729688,0.711803,0.12995584,0.56225175,2.026194,-0.6291223,0.24770364,0.009254711,-2.7680724,
			-0.053621616,0.414351,0.13458039,2.1308491,0.70502394,0.38345918,-0.6269681,2.327582,-3.4805613,1.1199075,1.1875235,-3.0008705,-1.189678,0.26223147,0.8529773,-0.3636424,-0.25875118,-0.094027065,0.59878165,-1.1593602,0.085271455,-2.6054657,1.6659983,-1.8835156,-2.4602861,-0.14155802,-0.6780498,-0.34444204,-1.1441567,-0.77260464,0.13689971,-2.2805097,-0.8289061,-1.7580047,0.86739826,0.51480275,-1.241992,0.36787146,-0.26779205,1.0251861,
			-0.48066923,-1.1519009,1.008316,1.8988496,-0.5482411,0.07490159,-0.43474597,3.0281374,-0.15571712,-0.2861259,-0.8021619,0.043676246,-1.8563708,0.15064088,-1.2968987,-0.3055099,-0.5223066,-0.39224446,0.36451083,0.16292158,-0.22215436,0.11132244,-1.0869695,-1.2871209,-0.22569111,0.2696374,1.9476972,0.03220882,-0.29559192,-0.3259837,-1.3089538,0.54385674,-0.04332634,0.5855662,0.7583113,0.07209245,0.007190992,-0.47488987,-0.09728541,-1.0478611,
			0.8682554,-0.005328971,-1.5629654,0.35519308,-1.0881882,-1.351673,-0.14952324,0.25151074,-1.0794054,0.3669172,-0.2511975,0.03489935,-0.24387205,-0.046262063,-3.5215738,0.0006065863,-1.7959738,-0.07687643,-0.4949392,0.68152493,-0.10577882,-0.15486333,-0.097563215,-0.42291322,-0.2696344,-0.4414503,1.1233544,-0.42843705,-0.640749,0.4094987,0.09979254,1.4217159,-0.052857507,-0.08357564,0.5097521,1.9807631,0.5618391,-0.71723515,-0.53412426,0.6029733,
			0.5110806,0.16526386,-0.013387889,0.3159299,0.42437348,0.3299921,0.36236277,0.238105,0.20303428,1.881163,-0.71678376,0.024037438,-0.41529304,-1.7667866,-0.22249508,-0.34285372,0.29501763,1.397837,0.03224919,-0.18842345,-0.10193564,0.14426045,2.5334582,-0.07298213,-0.23545036,0.05860174,0.6185542,0.2695336,0.029511841,-0.01402165,-0.2567445,0.9873272,0.13601565,-0.033118896,-0.3633417,-0.5013534,-0.62797236,-1.0537502,-0.13408369,-0.562547,
			2.0728683,-0.039670195,-0.92179245,0.782083,0.13980454,-0.5738686,0.05281288,0.4966139,1.700374,0.36662915,-0.16137572,0.0277349,-0.35723284,1.9767026,-0.6035641,0.59759086,-0.086948656,-1.565426,-0.86360687,0.9741988,-9.254835,-0.63390774,0.7122193,-0.68676573,-0.20584443,-1.4212875,0.23185636,0.31397343,0.7631753,-0.7548128,0.2570878,0.41362175,3.4832885,0.82509977,-0.033113908,-0.9277205,-0.45159566,-0.05687044,-0.9407022,0.27842224,
			-0.6727907,-0.42009485,-0.89377373,0.98775816,-5.3767505,-0.98063105,-0.34495446,1.3181492,-0.8659971,1.6051375,0.41109362,0.0014371414,-2.18891,1.0030233,0.3392655,0.46310765,-1.8365624,-0.3901304,-0.3632707,-0.044524197,-0.26260933,0.36555094,-0.41960096,-0.61577064,-0.40384597,1.9284202,0.91779524,-1.7906505,-0.52607465,-3.195814,0.9568885,1.8636854,-0.81103027,0.020618116,-0.5386518,1.4562932,-1.4443465,-1.3422072,-0.8350803,-0.19598837,
			0.5014247,-7.3021054,0.995766,2.9514832,-0.22103053,-0.4826251,0.35933366,1.7808225,0.4389846,-2.520586,-3.4006872,-0.37791985,-3.190304,-0.6687552,-1.9756691,-0.9148814,-1.2733958,0.152032,0.28378034,-0.33525047,-0.2180175,-0.3582193,0.10622769,0.5075079,-0.9627117,1.8157718,1.2643355,-1.0587368,-2.4592144,-0.48305538,-1.5037603,1.0471704,-0.2546248,0.17846973,-0.13612005,1.120688,-0.49911213,-0.4068167,-0.42172456,-1.7007905,
			0.74115837,-0.62527853,-0.9445779,0.8226622,-1.3476827,0.102861196,-1.4304632,0.51247877,-1.3859963,1.5627955,0.485809,-0.1232799,-0.6411019,0.36413687,-0.32722762,-1.2389432,0.38982055,-1.7784249,-1.3023963,0.26188397,-0.023150526,0.25675675,1.0555668,0.020801978,-0.005889172,0.9300437,-0.4444344,-0.28318572,0.24971142,-0.35191265,-0.5201692,1.3710108,-0.8403466,1.634531,-0.07413858,-1.092815,-0.017671308,-0.9810417,-0.66234404,-1.0221317,
			0.809758,0.05526516,1.3987238,1.8721797,-0.35616988,0.9336137,0.8302506,1.5064178,0.4507464,0.21347639,-1.3679007,-0.23537229,0.35442758,-0.7019732,-2.3846922,-2.282499,-1.9543363,-0.21751183,-0.50242764,-1.2411847,-0.16172248,0.2942022,-0.3882967,0.2075179,-0.6967815,-0.8268889,0.24979357,-1.892278,-1.5364708,0.5892539,-0.87426835,1.8301245,-0.8237121,-0.37180525,-1.1328248,-0.030986555,0.104607105,-1.7338284,-1.201447,1.9583757,
			-0.94664866,-0.6524037,-1.5025622,1.0083044,-1.5028307,0.024805749,-1.2928436,-0.10416736,-0.82722986,1.4817381,0.62698096,-0.7201564,-0.4593246,-3.5028877,-0.7498045,-1.8503507,-0.806344,-0.64290184,-1.2005919,-0.9528212,0.03784572,-0.07561267,-0.29745275,-2.2569852,-1.5120859,1.1068417,0.9770603,-2.581893,-1.2395686,1.0712873,-0.26063377,0.75410485,-0.0023519187,-1.5943257,0.4123214,2.8153794,-0.81936854,-0.52542776,-1.191942,0.70314884,
			-1.0741696,0.034106325,-0.54000014,1.5193603,0.21554022,-0.42988822,-0.32402894,1.9108603,-5.333649,0.87658054,-0.6817235,-0.88643956,-0.10721232,-0.7908325,-2.0761638,-2.2880137,-0.7523797,-0.46622804,-0.48019364,-1.589053,-0.098384075,-1.3793163,1.6244032,-2.2206771,0.17060599,0.51506513,-1.6313415,-1.1370138,-0.70938015,1.1152024,-0.20989524,-0.4519378,0.26686934,-0.87841254,0.006965376,-0.13878912,-0.3491633,0.5860183,-1.7316896,0.65593415,
			1.2634491,-0.16216633,0.19584988,0.3733648,-1.1914269,-1.2223791,0.8905149,0.9790579,6.3447227,0.03428716,0.8649314,0.015115785,-0.27035877,0.14010549,-0.37804437,0.12791915,0.11390752,-0.63138187,0.4915144,-1.0818744,-9.401103,-0.3391148,0.36858997,-0.70005465,-0.34652182,-0.85228676,-0.5243651,1.1606987,-1.4185332,-0.36572644,-0.25223106,-0.29542416,-0.13317853,-0.14046715,0.013213006,0.19624576,-1.0259966,-0.16009517,-0.35145915,-0.614928,
			2.3664455,-0.13616583,0.34180602,1.2249868,0.26802084,-2.200586,-1.3803688,-0.06268395,-0.7490457,0.047004063,-0.052278362,-1.1693723,-0.48534918,-1.3211659,-0.41752055,-2.7007608,1.046304,-1.1145353,3.2075727,-2.6159163,-0.15844223,-4.9936814,-2.5892305,0.4440452,1.0987437,0.5862006,-0.46152803,0.8880977,1.2849333,-1.1941806,-0.04988236,0.012995872,-0.6733497,0.16832642,0.11388009,0.2229166,1.0449722,0.3942355,-1.6856377,1.3882724,
			0.51379365,-0.4205786,-0.917783,0.2344411,-0.120966725,-0.057529766,0.4398534,0.057809915,-5.0229187,-0.37642246,-0.318064,-2.9843414,-0.66234404,-0.17663892,0.08217012,-0.3004086,0.5149101,1.9134243,-0.0976137,0.30380592,-17.683628,-0.105574585,-1.4976069,-0.57096756,-0.11996379,-0.3800542,-1.3274446,0.44607088,0.104677156,0.16301076,-0.062656164,1.6723508,5.8407693,0.40931255,-0.5569433,0.050914325,0.3299118,-0.34803092,-0.02548539,-0.28967115,
			0.2191858,-0.09130439,0.41229573,1.7315665,3.1036646,-0.7010484,-0.04400725,0.79279494,-1.8864131,0.69932324,1.9790882,-0.6577982,-0.5767855,-0.50712705,-0.2635777,0.3918527,0.32252535,0.12313813,0.50974613,-2.2117372,-0.32952896,0.22410917,-1.1984849,-0.12298965,-0.013498508,-0.305189,-0.6372444,0.6557101,-1.0683415,-2.8594666,-0.2525184,-0.16535708,-0.69838625,0.43670398,-0.29807243,-1.312783,-3.979584,-1.1196198,-0.6529478,2.5298042,
			0.2674586,-0.12987456,1.3349583,0.015493976,-0.0066036857,-0.25382653,0.28705078,2.3171675,-0.40360868,-0.33027005,-0.9900399,-0.43950295,-0.950223,-0.624571,-1.3280607,-0.3636474,-1.6342943,0.35963637,0.27752736,-0.033237908,-0.21278623,-0.6294676,0.06814073,-0.5715857,0.43573287,0.22976209,-0.5304624,-0.4309341,0.26411128,-0.23890314,0.47973275,0.1631262,-1.0012153,0.065913655,-1.2924842,-0.16488095,1.9292021,-0.7504878,-0.23962598,-0.39222497,
			-0.7120751,-0.4502331,-0.01863176,0.5519815,1.1524029,0.48489913,0.2991882,-0.23803562,-2.040645,0.019754747,-0.9604151,-0.026936209,-0.36980656,-1.2162219,-0.24163854,-3.7391765,-0.0022128099,-0.30406073,0.75005865,-1.4450673,-0.13943243,0.06658274,0.11225913,-1.3521105,-0.1630537,-0.28573337,0.031913653,-2.5435803,-2.3195481,-1.2595984,-5.9995155,3.1758323,-0.1842281,-2.2278001,-0.67227757,0.91433716,-1.2477124,-2.304118,-0.44958794,0.3767385,
			0.14058541,-0.11588972,-0.65424705,1.2729313,1.1419849,-1.7418439,-0.40899536,1.452585,1.1453425,1.4499059,-1.2150363,-0.4425961,0.14676714,-0.88640314,-0.07180887,-1.8142687,1.0585116,-0.05507155,-1.8526322,-0.42071205,-0.26867694,-0.15629718,-1.3865508,-0.37338755,-0.38506457,1.8847238,-0.8766037,-0.06732686,1.8854785,-0.038980935,-0.87596506,-0.53374976,-2.1608434,-0.6012004,1.1674402,-1.5895383,-0.2169504,0.40500137,-1.9990855,0.87723553,
			1.1987381,-0.8134657,-1.4490935,-0.1751251,-0.32307193,-0.96825296,-0.3253696,1.951125,-0.23135467,1.2346628,0.09530397,-0.09963354,-0.1359911,-0.52149105,-0.48810455,-1.4803258,0.5753345,-0.25459218,-0.11225541,-1.1984589,0.0064497367,-0.6228874,-0.45595303,-0.484963,2.3242035,-1.3745087,-2.0019326,0.16558607,1.1970283,-1.0866826,0.04004719,-1.4680315,0.08354436,0.18428826,-2.0167992,0.85509646,0.45470417,-1.8927528,-0.12755094,1.5112858,
			1.3808465,-0.5153189,-0.10429137,0.55870026,0.551246,-0.7123084,0.36281148,1.9650164,0.5052972,0.1385573,-0.34818694,-1.5282665,-1.0952137,0.64003414,-1.9702755,-0.42810684,-0.88454384,-0.668373,0.8062428,-0.25136846,-0.058066238,-1.2105145,2.0692027,-1.8348109,-0.6675143,-0.56465036,-1.1017057,-1.3823713,-1.5145934,-2.6595733,0.5329139,-0.61258084,-0.091888845,-1.317446,-1.737561,-0.5837996,-0.08765276,0.2046868,-2.2836883,-1.2803842,
			-0.39448223,-4.909754,-0.2079647,1.3371664,0.028745119,-1.7518681,2.2519703,-0.009648494,0.24195805,-0.670512,-2.3819366,-1.8340429,-0.3005804,0.2003318,0.7533076,-0.92646,0.71099085,-0.0467127,0.40882546,0.1099475,-0.1529157,0.6323785,0.21439411,-0.5915784,-0.23031007,-0.32234338,0.34298265,0.41534555,-0.13589148,-0.45229524,-5.6695514,0.12966192,0.20747778,-4.074321,-6.223691,1.276826,-0.23422949,-1.6451598,-0.39457577,0.18024735,
			-0.58820194,-0.089942195,0.023705121,2.403858,-0.30469853,1.925368,-0.1960407,1.0000992,-2.2507274,0.22525321,-0.21500841,-1.4341576,-0.4510212,2.54936,0.8451195,0.6287085,-2.3595219,-0.10345361,-0.82199395,-0.64483356,-0.14874142,0.2807295,-0.47551042,-1.025844,-1.6008162,1.0956385,-0.37239653,0.23865688,-1.3583207,-0.51114744,-0.2247861,1.0018373,-1.4790694,0.39414206,0.2793007,-1.0786936,-4.547128,-0.9600783,-1.0926492,0.8653364,
			1.8113979,0.5639573,1.1478237,-0.29061562,-0.9828024,-0.76775485,-0.06612776,1.213351,-0.88431436,-0.055321366,-0.21662918,0.039018705,-0.32451493,0.16722298,0.5260462,0.64592403,-0.90006596,-0.63436717,1.1760312,-0.17563821,0.05036095,-0.42463875,0.854894,-1.1828543,0.51800865,-0.8633005,-0.5291868,-0.18952604,-0.21992886,-1.375992,0.49808863,0.3947769,-0.18634093,-0.79762095,-0.9012896,-0.68483275,0.48411432,-0.49215066,-0.97601235,-1.2069324,
			1.111535,-0.69993526,0.10243126,1.100332,-2.9782288,-2.0658066,-0.5233139,1.0286391,-0.29670376,-0.26194757,0.28402162,-1.0015544,-2.0553029,1.3927639,-0.23320408,-0.46399406,1.3144215,-0.5744257,0.5473857,-2.724597,-0.40324864,-0.7225925,-0.025945093,-1.8731449,-0.38558707,-0.82827616,-0.6560818,1.6969291,-2.5257573,-2.556753,-0.37305558,-0.28683856,0.0062443684,-0.61869764,-3.9131687,2.5680287,-1.8045672,0.092944056,-1.2048411,-1.3146693,
			1.7551109,-0.47709227,0.86384493,2.2440245,-3.2399342,-1.1828947,-0.9606066,-0.10931145,2.0602248,-0.10134509,-1.9778936,-1.4877058,-0.7083964,1.7980714,-1.0336919,-1.6931915,-0.13675469,-0.8577081,-0.162416,1.7220176,-0.65587246,0.34377953,-0.33713037,0.6769786,-1.5544342,-1.5285192,0.7069957,-3.5151556,-0.45147142,-0.8427119,0.7861131,0.09207506,-1.401701,-0.062482778,-2.4500935,-0.12893529,0.15045638,-1.0835938,-1.9452745,-1.3069494,
			0.05533076,-0.88301694,-0.77674806,0.25196955,2.3729033,4.5241904,-0.08148887,0.9426307,1.2159323,1.74053,0.35098028,-1.1579778,-1.2706785,-0.28052518,-0.49544638,-0.08844711,-0.2493967,-0.34801242,-0.94504714,-0.57787275,-0.2711069,0.25017077,-0.48656854,-0.49745864,-1.0830592,-2.2973497,-1.0453781,-0.588965,-0.6582884,-3.278125,1.6680361,1.2655071,-0.3152169,0.32369566,-0.71735936,1.3960052,-0.6166657,-2.208681,-0.3211106,-1.1710328,
			-0.232345,-0.19453906,0.44152015,-0.44727725,-0.15242815,-0.059390265,0.5380983,-0.9639716,0.75832003,-0.6101125,-0.21786046,-6.9744477,0.17398752,-0.38045996,-0.061243802,1.0993006,0.5359346,1.8010943,-0.44181117,-0.3406339,-0.056666333,0.2936117,-0.815965,0.24828306,0.364245,0.046021074,1.0171058,-0.04922304,-0.021542592,0.9821073,0.6717736,-0.27301028,-0.33205086,0.42926407,0.50728506,0.033504423,0.66659945,-0.4135149,0.13874577,-0.098323256,
			-0.6088101,-0.6072262,0.2623201,0.17453998,0.4287707,-1.2810967,1.3559994,0.40441853,-4.379089,2.9509854,-1.5088577,-0.02894825,0.17616193,1.0795264,0.24511276,-0.26095164,0.65324545,-1.7606734,0.75927824,-0.5577738,-0.24224484,0.19038555,0.73307794,-0.09530467,0.08081456,-1.1574749,0.24197526,0.059793957,-0.1507995,-0.6191791,-1.3966324,0.9003885,0.11358184,-1.5942662,-1.4970145,0.23404661,-0.10984818,-0.2757707,0.09962615,0.309894,
			0.30652225,0.05969646,-0.639533,0.63452476,-0.34662348,-0.16570544,-0.44089946,1.5963602,0.03614505,0.5056027,-0.84930474,-2.703916,-1.2967315,-0.42737427,-0.48240212,0.8019623,-0.8632047,-0.17511712,-0.2765215,-1.0249745,0.05157647,-0.55039823,-0.18448025,0.06453218,2.6795785,0.06774543,-0.47030774,-0.48789272,0.17433675,0.20052047,-0.22936094,-0.19392027,-0.05993631,0.027709676,-1.5066833,1.1386961,3.6080704,-1.378862,-0.021123433,-0.28103894;

    h3_out <<
			-2.4088788,-3.0501754,-9.489192,-0.8190619,-0.22438556,0.4275093,-1.143159,-0.35631767,-6.1319966,-4.1957316,0.22540404,-0.20293018,-2.3993459,-1.2909174,-2.2417533,-0.47276643,1.0259476,-1.4449013,0.12296965,-4.6764913,0.05710699,1.4886417,-0.87284464,0.12294546,-0.35635915,1.4724294,-1.5269046,-0.72691363,-2.4713583,0.07363791,1.1143309,-1.7039012,-0.31993577,0.76975524,-0.96679056,-1.3116004,0.8197546,-0.098594695,-1.2704453,-2.0350327,
			-1.1152012,-2.0379179,-3.2676055,-0.57795215,0.13187528,2.0715432,-0.954624,0.8114617,-3.1318164,-3.525503,0.502811,-0.1437831,-2.621147,-2.3732297,-1.1465979,-0.12840521,1.1010612,-2.4924045,0.7793462,-3.1420817,-0.7498264,-0.28722817,0.2523282,-0.08460841,-1.6595204,-0.6154703,-3.2794154,-1.9124012,-2.1008303,0.16130808,0.6372725,-0.26957047,-0.21015207,0.55014396,-0.8231398,-2.485503,0.5015793,-0.5641976,-1.1531614,-2.2186193,
			-0.37773523,-1.9136982,0.012836646,-0.20999733,0.3957124,2.882197,-0.80912155,0.26528254,-2.0813954,-2.4689517,0.24359657,0.062821716,-2.4534671,-3.6352155,0.16452698,-0.3491811,0.2667941,-2.6252208,0.41277477,-2.632025,-1.0501211,-2.559412,0.65524477,0.27653491,-0.9736852,-1.008454,-4.4913406,-2.0543644,-1.2716358,0.19969927,-0.91921085,-0.5752777,-1.0918312,-0.23211007,0.2148508,-2.2814593,-0.18061724,-0.17044368,-0.6265618,-1.6988926,
			-0.84132457,-1.7278521,0.3972776,0.14471973,0.18018264,2.8862083,-0.64440936,-0.7363985,-0.69241667,-0.4487693,-0.2951006,0.26379254,-1.7060837,-4.815003,0.3357472,0.34227616,-0.929198,-2.7338128,-0.41165787,-3.092202,-1.3886166,-2.943149,0.76180714,0.24340452,0.47237048,0.24782051,-3.1969361,-1.4263452,-0.17078155,0.36359602,-3.2346807,-1.1483879,-0.6721294,-1.233953,-0.15637587,-0.79609007,0.28041443,0.60384846,-0.07046086,-1.9981642,
			-0.80954427,-1.8521174,0.03409332,0.017183512,0.35330367,3.0861552,-0.63273656,-0.9077579,-0.012687605,-0.21734913,-0.04237879,-0.17181316,-2.5702908,-4.6428275,0.55911785,-0.56793684,-2.9271665,-1.5634073,-1.4147373,-2.2367697,-3.0839398,-0.16424306,-0.86468834,0.43846822,-1.2485058,-0.6331399,-2.1078331,-0.37192628,0.7931287,0.19211835,-2.9339998,0.1873202,-0.68533015,-2.547356,-0.6854563,-0.82448983,0.332936,-0.18383676,0.32512364,-2.010156,
			-0.5914166,-1.9240212,-3.2716281,-0.6877855,-0.47689876,1.0283504,-0.43262172,-1.6962491,0.4306366,0.41660872,-1.2385689,-0.33221254,-2.4779236,-4.8800497,-0.57093126,-1.4247935,-4.063891,-1.9115846,-1.8184445,-0.095818095,-2.3786583,0.49898067,-1.17888,-0.2817849,-2.465539,-0.47791618,-0.9301683,-0.022416912,0.74130076,0.40937087,-2.3688633,0.7986743,0.019610677,-3.196712,-1.2424802,-0.95437723,-0.025169956,-0.28850484,0.64181936,-1.9893252,
			-0.2528255,-2.3911214,-7.791558,-1.3576761,-0.2484921,0.038575564,-0.7349155,-4.0484014,0.17328581,0.11718118,-2.258705,-0.20572461,-3.187575,-1.7987071,-2.5428977,-3.404487,-4.649091,-2.4954128,-1.9600953,0.9919045,-1.1152577,0.57941985,-0.6664817,0.015877701,-2.8230636,1.2570496,-2.0144339,-0.3318136,0.50921005,0.49824002,-2.4082034,-0.9485348,0.24311894,-3.0511172,-0.9577499,-0.60762125,-0.5920223,0.20374805,-0.085974544,-1.7686048,
			-3.5547657,-1.9338199,-6.886501,-0.32351604,-2.724626,-0.31490892,0.576673,-0.56607175,-6.1115565,-4.4598074,0.10829636,-0.59110963,-2.3074453,0.21761195,-2.2635312,-0.17510383,0.92274666,-0.7376884,-0.47984728,-3.0019383,-0.7574672,1.697703,-2.4415948,0.5704046,-0.7741903,4.1152077,0.4441812,-1.6840088,-1.3112624,0.53086376,0.5619861,-1.6310827,-1.622369,0.5849172,-1.7971206,-0.25674018,1.5860088,-0.12437236,-1.9842141,-1.0282665,
			-1.0340838,-0.64016354,-2.9311411,-0.03463121,-0.77983075,0.699896,0.41447023,0.5485243,-3.5582802,-2.9077742,0.6057918,-0.54718745,-1.9781073,-0.994737,-0.83360046,0.53394085,0.6610417,-1.9404565,0.65456414,-2.6086495,-1.0420121,-1.8455633,-0.7120403,0.4306549,-1.955274,1.7586648,-0.7075674,-2.2356608,-0.59425026,0.589649,0.5940846,-0.23772253,-0.33523986,0.7410956,-1.3751961,-1.4102092,0.98748434,-0.64013124,-1.0112094,-2.2204952,
			0.059982285,-0.95937735,-0.02564938,0.23005553,0.2623649,1.7896711,0.51648206,0.062497746,-1.8329835,-1.8181713,0.64782274,-0.40285698,-1.8864919,-1.6727462,0.29237753,-0.010794796,-0.02826319,-1.4573222,0.4122219,-2.6674073,-1.918079,-1.9388374,0.1360414,0.4532815,-1.0529518,0.43915772,-1.4793372,-2.2748613,0.030631673,0.8385649,0.23580405,-0.5998743,-1.0579736,0.5867041,-0.30538145,-2.034605,0.2719733,-0.4264082,-1.0082374,-2.2309582,
			0.3397392,-0.29938087,0.38884285,0.20814782,0.22178444,2.3305626,0.7660867,-0.97977114,-0.801144,-0.40935683,0.45165113,0.15190628,-2.1244328,-2.3795674,0.6031492,-0.21026956,-0.9334794,-1.3944386,-0.37687275,-2.11548,-2.1049273,-1.1582787,0.42247638,0.40677541,0.1779556,0.1432811,-1.0341355,-1.6645541,0.5833401,0.49453467,-1.6773964,-1.2432735,-0.29599154,-0.41854396,0.27802286,-1.6885952,0.28562894,0.2858761,-0.07626685,-2.013475,
			0.45026156,-0.83980423,-0.24715067,-0.5865287,0.345551,1.347114,0.70701575,-1.3108972,0.20880385,0.19671333,0.4285571,-0.4704846,-1.828706,-2.9839842,0.4371809,-0.7417955,-1.7999289,-1.4303292,-1.4718183,-0.8232872,-2.0947506,0.3259471,-0.017495345,0.43240845,-1.390815,0.11724118,-0.3332548,-0.24381065,0.6337066,0.7884764,-2.9799888,-0.22300385,-0.7472475,-1.4970317,0.14470977,-2.3777914,-0.27935544,-0.31945854,0.3611305,-1.8483465,
			0.4350962,-0.26119128,-2.990168,-1.8442765,-1.4863011,0.42406538,0.6620935,-2.5551815,0.4788865,0.6743093,0.057756063,-0.39573315,-2.2074363,-1.7193664,-1.215064,-1.7188649,-2.7083862,-1.991605,-1.6162438,0.542084,-1.1476016,0.42965788,-0.7558832,0.2720389,-2.3194375,1.173047,-0.21488635,0.15671366,0.08158269,0.5970651,-3.041495,0.6183056,0.15663722,-1.9147208,-0.42092985,-1.6354327,-0.4873,-0.37630117,0.7623281,-2.130906,
			0.56906325,-1.2794628,-5.6125636,-2.87512,-1.62864,-0.26995584,0.43754083,-3.163559,-0.40335643,-0.017943019,-1.0871046,-0.41549993,-2.653925,0.1656989,-4.943887,-4.382787,-2.8527007,-0.93127835,-2.6712022,1.6382021,-0.0054772627,0.21067908,0.0037063598,0.35933158,-2.581701,2.924047,-1.0680056,-0.33999094,-0.7088945,0.9140505,-3.1301994,-1.0860308,-0.39090288,-2.9925706,-1.1141042,-1.3014288,-1.1990345,-0.034951326,0.23450537,-0.8759452,
			-1.4113698,-0.91586244,-3.495385,0.12782918,-5.0433726,-0.6944867,-0.024445955,-0.925033,-4.637184,-3.7196422,-0.5766865,-2.9927604,-0.89057535,0.52272075,-3.8452237,-0.028491078,0.6731852,-1.518268,-0.28132138,-1.8762143,-1.882908,0.015838973,-3.995136,0.46945825,-0.75221324,1.7594928,0.63348705,-1.5575418,-0.63206106,0.516439,-0.4683318,-1.7342036,-1.3482207,0.009682949,-1.8033465,0.63692874,1.1839199,-0.07613975,-2.905797,0.8887348,
			-0.19972706,-0.43562585,-1.7131134,0.49862057,-1.6203979,0.32020593,-0.23426238,0.81365013,-3.039964,-2.230184,-0.1699264,-1.5245993,-1.1891803,-0.09062295,-0.95887834,0.58106774,0.51804084,-1.5661113,0.56599075,-2.00635,-1.9378952,-2.1989346,-2.1749754,0.5892241,-1.8849225,2.3791735,0.49581602,-2.8887525,0.022720058,0.61128646,0.23819983,0.37544578,-1.2200502,0.41817844,-2.092472,-0.0053448635,0.36177054,-0.57497406,-1.9528394,0.21746078,
			0.41075608,-0.22892489,0.13677683,0.40848842,0.3827373,0.63455325,-0.21929173,0.11982208,-1.4191616,-0.69336534,-0.012002322,-0.28090498,-1.4327867,-0.44109765,0.22037682,0.2643726,0.19399536,-1.0502555,0.40887633,-1.8233442,-2.4863927,-1.2559917,-0.65631455,0.3851773,-1.2433792,0.6669083,0.3458314,-2.8303194,0.5669395,0.40566406,0.48111418,-0.24206235,-0.4432652,0.5858054,-1.3609464,-1.1444411,-0.018338857,-0.39752755,-1.1930867,0.24843322,
			0.5728268,-0.3548187,0.30045062,-0.13371268,0.27271363,1.045969,0.00011013343,-0.9657109,-0.708504,0.31683636,-0.023550907,0.06650386,-1.2784598,-0.7803419,0.53036827,0.049098913,-0.7497057,-0.48563594,-0.39506343,-1.000378,-2.0731332,0.23418812,0.42199516,0.08517489,0.24536091,0.30654186,0.2905313,-1.5296668,0.3857229,0.32598057,-0.10311145,-1.1162738,-0.43146807,0.13939054,-0.24455744,-1.9791468,0.24411133,0.46973947,-0.20522659,0.3358117,
			0.57155055,-0.18276648,0.056081172,-1.6950396,0.26843715,0.52848595,-0.16355832,-1.2165399,0.15424511,0.4355519,0.4071717,-0.14467587,-1.2481837,-0.7920284,0.3186882,-1.223968,-1.8064588,-1.1344389,-1.2940425,0.07732968,-0.9472964,0.58057016,0.24960364,0.10942564,-1.2410417,0.43981868,0.48665366,-0.4838992,-0.08797898,0.2631892,-1.5808547,-0.03671661,-0.2945492,-0.29364148,0.46369267,-2.533513,-0.10848132,-0.29532877,0.25770533,0.16223617,
			0.37650946,-0.48026112,-1.5540886,-2.6036932,-2.4102528,0.39974353,-0.15477261,-2.043381,0.48295316,0.27318284,0.5722217,-0.47521573,-1.2814747,-0.18724976,-1.5031034,-2.2668607,-1.938607,-1.1818529,-2.1030004,0.70424294,0.08672159,0.13055106,-0.08535888,0.17747529,-2.0307684,1.7468485,0.26565552,0.065615065,-1.4816998,0.4421372,-2.6700628,0.7701152,-0.7351043,-1.1986004,0.3924148,-1.9930882,-0.73121274,-0.36244687,0.45598075,0.23283939,
			0.16552386,-0.6008016,-2.6892881,-2.5979192,-2.2398381,-0.32675385,0.07110887,-3.5385227,-0.20516008,-0.5077449,-0.2546898,0.41639334,-1.5781361,0.6817827,-5.798074,-5.267226,-1.3409745,-1.4077928,-3.6792593,1.1075894,0.82893395,-1.0980178,0.011089071,0.30074814,-2.1157465,3.0291073,-0.5091724,-0.02891951,-2.1829476,0.3199119,-2.8903494,-1.2404664,-1.1648685,-2.4147456,-0.62281585,-1.2454429,-0.9675667,-0.22758637,0.22382447,0.9189328,
			0.26131427,-0.21457729,-1.1501659,-0.09864315,-5.7926073,-0.20431277,-1.5762897,-0.87738544,-5.979212,-2.0951128,-1.5252216,-2.4557035,0.23660006,0.12252938,-4.58681,-0.6379704,0.23582584,-1.5194832,0.3189193,-0.8825637,-1.6208026,-2.5494657,-5.0828133,0.6996254,-0.6520994,1.1239965,0.5586487,-2.2796278,-0.12875684,0.33736673,-2.0505552,-1.8182973,-1.4403741,-0.44135877,-2.700213,0.26784974,0.3133086,1.022431,-2.0100908,0.490447,
			0.34242448,0.83887464,-0.6750801,0.48361272,-2.5576413,-0.20589517,-1.3892481,1.0541357,-2.2285268,-1.0848554,-1.020496,-2.090635,0.032247283,0.169312,-1.4159875,0.30238745,0.2420595,-1.4008327,0.6086838,-0.97357875,-2.067437,-1.5830629,-2.7255304,0.40028965,-2.0909817,0.96282643,0.5541113,-2.4784594,0.6237656,0.14684856,-1.0833427,0.18109721,-1.1575572,-0.30384177,-3.0520122,0.5847883,-0.70332223,-0.015610677,-2.604221,0.5922069,
			0.51598746,0.50209945,0.23447633,0.1683674,0.44088846,0.14684065,-1.2991318,0.44486913,-1.0341285,0.061066296,-1.016171,-0.48106483,-0.082793534,0.23560272,0.075136945,0.31974524,-0.03359837,-1.2543348,0.2827708,-0.9883198,-1.6199375,0.12449348,-1.7604388,-0.16289681,-1.187448,0.9912638,0.5120448,-2.6278582,0.4796947,0.18498388,0.21181726,-0.21095629,-0.7807723,0.3632055,-1.9874777,-0.062312987,-0.514825,0.5863157,-1.668524,0.35043594,
			0.1803051,0.8489786,0.23464301,-0.9788378,0.3527122,0.36142477,-1.2362118,-0.7580765,-0.56563455,0.4943296,-0.9183724,0.34864727,0.046680465,-0.18925758,0.38077632,0.028407311,-0.45111066,-1.1067655,-0.23673514,-0.22691321,-0.84701836,0.6316863,-0.08933242,-0.6110853,0.21650296,0.65995324,0.46238446,-1.3495389,-0.30443776,-0.02385005,0.48272368,-0.9966724,-0.22178604,0.42011687,-1.0613858,-1.0052439,0.004612857,1.2532053,-0.09105458,0.46527818,
			0.38211694,0.35657609,0.32560498,-2.220181,0.19482511,0.3336753,-1.3826985,-0.7719585,0.29355502,0.18882918,-0.29158497,-0.13277502,0.021682158,0.075826675,0.13555032,-1.2686998,-1.0689495,-1.1945667,-1.3287671,0.23193128,0.060301196,0.35822552,0.26151106,-0.156237,-1.3176436,0.8351171,0.5033167,-0.37503713,-1.6520301,-0.00637185,0.15534824,0.27425137,-0.80630356,0.6320454,0.059802476,-1.8392003,-0.76529986,0.6870251,0.030462466,0.34669748,
			0.03455773,0.5803257,-0.6261258,-1.7651675,-2.9347937,-0.08711639,-1.4046866,-1.9220018,0.47433248,-0.42741972,0.3374119,-0.5513727,-0.12058269,0.28300363,-1.6263878,-2.6217442,-0.892247,-1.2347358,-2.3957062,0.38358167,0.69824857,-1.3823051,0.08234094,-0.035793148,-1.7810135,0.99825263,0.480065,0.117838465,-2.7237399,-0.16841854,-1.3778237,0.8646036,-1.7605801,0.0669357,0.61869794,-2.0059903,-0.9747827,0.10650582,0.42487037,0.5129792,
			-0.4663652,-0.004229921,-1.1665897,-2.8987494,-3.2815557,-0.011934093,-0.9588929,-3.3798041,-0.13703316,-1.3138491,0.19587995,0.055438563,-0.037614938,0.36512032,-5.316307,-6.6224146,-0.35630584,-1.2084235,-4.604974,-0.010292213,0.70826495,-3.1695373,0.113845386,-0.30797318,-2.1530848,1.914676,0.39540574,-0.40360746,-1.532933,0.04504037,-2.2720757,-1.0861443,-1.6633469,-0.20471022,-0.17311552,-0.6633409,-0.9468711,0.8907811,0.1800458,0.66312987,
			0.4404003,-0.8384293,-0.67495203,-0.10756113,-6.3333097,-1.0155256,-1.6145133,-0.58928037,-4.780441,-0.69406307,-2.0266874,-1.8318038,0.06106296,0.29753578,-4.759259,-0.7946799,0.52853537,0.073305346,0.48904738,-1.219023,-0.95530564,-1.1879922,-3.756063,0.87027687,-0.51933944,1.1309427,0.2094087,-1.8668554,0.4035332,-1.0597588,-3.323575,-1.7639107,-1.7509253,-2.8849819,-3.6425235,-0.29772964,-1.212364,-0.12112139,-2.3786018,0.2025768,
			0.4623685,-0.23041558,-0.914305,0.6837073,-3.1242628,0.22315003,-1.6852897,0.91297156,-2.0663667,-0.100864455,-1.1332355,-0.17621216,0.5179536,0.43590704,-1.2722548,-0.09874685,0.095412284,-0.019692466,0.6590755,-1.0123099,-0.895037,-0.03690786,-2.4398725,-0.23106715,-1.5286047,1.0838548,0.19202468,-2.9091384,0.7979186,-1.0030227,-2.3433886,-0.54539585,-1.6304495,-1.6382776,-3.7198074,0.36585405,-1.1916372,-0.42308322,-2.1460898,0.42087433,
			0.11102523,0.09343826,0.41207466,0.23768799,0.09616119,0.5812567,-1.3168297,0.14575875,-0.82641846,0.5459651,-1.2441223,0.20178951,0.2936885,0.52147734,0.22123392,0.24715908,0.12302184,-0.14486298,0.33064398,-0.47711164,-0.27402845,0.6284461,-1.9758259,-1.1781328,-1.2092292,0.81453437,0.14220494,-1.9914736,0.051549356,-1.1574033,-1.2257429,-0.6758546,-0.28280362,-0.6762848,-2.7815604,0.627521,0.089298725,-0.12305609,-1.6067502,0.24834053,
			-0.5406517,-0.10867191,0.2451472,-1.1260549,0.3979483,1.2288513,-0.75622106,-0.8539511,-0.15866233,0.5614119,-1.7288944,-0.49197567,0.33877578,0.39293855,0.46580628,0.47890407,-0.10642593,0.0020718835,-0.33388957,0.19206043,-0.043598052,0.3880813,-0.16507974,-1.3862461,0.21714164,0.66431844,0.29704776,-0.5670425,-0.76389176,-1.0559419,0.24795422,-1.3337587,0.060334634,0.03147826,-1.4251872,0.0695392,-0.042811386,0.68650806,-0.43434027,0.3506628,
			-0.25555605,-0.4204609,0.51118106,-2.0653594,0.05540647,0.45396954,-0.9949563,-0.9341892,0.34829688,-0.26098207,-1.0913527,-0.16326855,0.4100038,0.46266517,0.11204358,-0.03870293,-0.7046963,-0.076611266,-1.5599794,0.3713789,0.32414803,-1.3283914,0.24999006,-1.3143638,-1.5171394,0.45994127,0.32701212,0.123912275,-2.2117152,-1.237821,0.39809757,-0.07004373,-0.38553005,0.6039522,-0.20277584,-0.554505,-0.62375844,-0.18257302,0.13130589,0.0960823,
			-0.05331859,-0.6221313,-0.07682704,-1.5733104,-3.5670118,0.49246913,-1.4699445,-2.03867,0.39263472,-1.5357286,-0.27369708,-0.24337453,0.4936644,0.26122537,-1.4518441,-1.3126272,-0.5840351,0.0068441494,-2.6962202,0.40039682,-0.15354158,-2.9059618,0.39442593,-0.38369483,-2.199157,0.6525135,0.37129027,0.45068386,-2.9092598,-1.2921622,0.11555349,0.6116403,-2.1489637,0.51994145,0.41182375,-0.88959193,-1.6580911,-0.45689484,0.5546005,0.06792844,
			-1.123692,-0.85072535,-1.3269942,-1.8001164,-4.9207635,-0.15089308,-0.65973544,-4.298009,-0.45697805,-3.6363978,0.11307463,0.29887304,0.32274252,0.074920386,-3.520007,-4.6608267,-0.7494391,-0.004973561,-4.3249984,0.78952247,-0.23432896,-1.9726769,0.27826214,0.29915938,-2.2029743,1.7227103,0.53538877,-0.5019839,-1.9906778,-1.43778,-0.9140042,-1.0462866,-2.0968654,0.39302087,0.40690076,-0.53576607,-1.9560547,-0.021334738,0.3389442,0.6203399,
			0.67729723,-1.2624671,-0.5369752,0.09045777,-6.3240886,-0.4180784,-1.0472127,-0.35134995,-2.1233819,-0.011346845,-1.0251476,0.8544319,0.80659896,-0.025428003,-4.5465474,-1.1732394,0.68826777,0.61987686,-0.08900262,-1.4689733,-0.017399417,0.0422825,-3.8030183,-0.015667522,-0.4052486,1.1908137,-0.9550668,-2.985973,0.5310724,-2.021093,-2.5171838,-2.3607924,-2.449153,-3.937903,-5.0371737,-1.1771487,-1.5322977,-0.018960994,-2.899185,-1.7658317,
			0.028860714,-0.2680485,-0.837412,0.8484192,-3.2696948,1.003759,-0.9734342,0.6840565,-0.9760625,0.5318902,-0.48034114,0.6314522,0.84905213,0.15449269,-0.81431836,-0.85598624,-0.08799787,0.53918284,0.6530808,-0.84375083,0.29197508,0.56913894,-2.1816874,-1.7585552,-1.6856052,0.5273062,-1.3468993,-2.4326937,0.43828708,-1.9468323,-2.501834,-1.6132716,-0.5453153,-2.2757344,-4.8125663,-0.3587647,-1.44166,-0.32607672,-2.0913815,-1.3338096,
			-1.0955735,-0.49429533,0.11493055,0.3155283,0.0506404,2.0333571,-0.74148345,0.12547971,-0.2490969,0.43997452,-1.3568681,-0.28380492,0.7415107,0.44794655,0.4024824,-0.51128703,0.06968722,0.46340442,0.46382916,0.009693348,0.37837282,0.4996639,-1.4486253,-2.6593044,-1.0721785,1.095258,-0.98937815,-0.9643728,-0.80067325,-1.6734996,-2.187841,-1.371567,0.2112691,-1.9761293,-2.9199178,0.41618165,-0.47152647,-0.25250697,-1.759139,-1.9331552,
			-1.6584612,-0.16376588,0.06486961,-1.2967985,0.47285962,2.451093,-0.5712732,-0.81917393,0.057170223,-0.065262005,-1.7293277,-2.0175352,0.438034,0.5390003,0.5264199,0.1391149,0.34338838,0.48421386,-0.20782803,0.4856165,0.1567788,-1.1072525,-0.24156876,-2.408512,0.28133994,0.34141147,-0.9116284,-0.12141616,-0.87594754,-1.6248541,-1.0214086,-1.3675898,0.14379339,-0.7467111,-1.7222818,0.7353893,-0.039822567,0.2882251,-0.5807149,-1.9178338,
			-1.2795025,-0.94256157,0.44934276,-1.5517277,0.12897697,1.7619592,-0.23362996,-1.3247548,0.39595523,-1.214696,-2.2550337,-0.85490596,0.5766554,0.42508903,-0.034529146,0.4397373,0.17427771,0.4709986,-1.3544136,0.34273386,-0.24220048,-2.938769,-0.08076317,-2.6950123,-1.4722881,0.8609634,-0.8098256,0.19703126,-2.0020967,-1.5404317,0.2587172,-0.143512,-0.027637837,0.10357248,-0.20606886,0.44153193,-1.5668801,-0.49575466,0.20180246,-2.351285,
			-0.505214,-0.80663985,-0.38185507,-1.2029163,-2.9400375,0.6699927,-0.56348366,-1.9902892,0.41111535,-3.1069665,-1.4716896,0.1868436,0.8409717,-0.13962461,-1.5074427,0.1456371,-0.15709852,0.5378194,-2.7368116,0.116197154,-0.8567697,-2.779538,0.1423219,-2.025537,-2.6814818,0.59738696,-0.6685727,0.15300763,-2.0542092,-1.6959808,0.59837335,0.5135177,-0.87961,0.7963099,0.47905487,-0.009144503,-2.2633238,-0.48607948,0.5589901,-2.4202373,
			-0.54183245,-1.9039769,-0.7060964,-2.2833867,-5.2266293,0.030037187,-0.11524956,-2.5624404,0.06982746,-6.148551,-0.4676798,0.4689134,0.86567706,-0.8346244,-4.5429454,-1.131945,-0.7823135,0.5181616,-4.2152,1.2125304,-1.1619842,-0.40643254,0.13944544,-0.17045568,-3.3988042,1.5748125,0.12895148,-0.73008955,-1.2732084,-2.1618185,0.2980667,-1.1967314,-3.0186183,0.85708106,0.12479507,-0.1904447,-2.4083598,-0.11269891,0.16226871,-2.219172,
			-0.24357429,-2.3607411,-0.27463397,0.05905225,-8.915309,0.51988053,-0.37941954,-0.24350703,-0.5707015,0.25873294,0.13089296,1.0670475,0.66589844,-0.56470734,-1.898785,-1.1547867,-0.2059882,-0.5178857,-0.49921948,-0.92929614,0.15830274,0.6933051,-3.6857784,-1.2957284,-0.34699437,0.2409544,-2.8835535,-2.0705256,0.3541145,-3.1147852,-1.612193,-3.6639514,-0.36619022,-2.7815928,-5.4299765,-2.083529,-1.0336131,0.17480943,-3.287327,-2.9126208,
			-1.6839736,-1.4626453,-0.2339282,0.43492994,-3.115111,1.9662712,-0.3551935,0.72970533,-0.07228262,0.6458777,0.8518376,0.8880721,0.72889715,-1.051766,-0.20929672,-1.8162766,-0.8698836,-0.40328568,0.5735255,-0.5533543,0.45632994,0.55611765,-2.3376167,-3.162843,-1.9269758,0.6565341,-2.8808594,-1.4917722,-0.36941355,-3.034201,-2.6834388,-1.5369292,1.0831894,-3.3349714,-4.6716843,-0.75757825,-0.2528954,-0.26454017,-2.7898252,-1.8030497,
			-3.9614105,-1.4701582,0.30757034,-0.3151917,-0.04589375,2.1610472,0.0794984,0.3520122,0.27254337,0.16887435,-0.54885256,-1.1378646,0.5304908,-0.36614743,0.5055873,-1.5360346,-0.579762,-0.6396291,0.3801696,0.121586874,0.0973304,-0.288519,-1.1856828,-3.471611,-0.5643295,0.7737176,-2.285327,-0.4606803,-1.2533377,-2.6314433,-2.1030588,-1.5430373,0.92958194,-3.080281,-3.2412808,-0.24769895,0.2875653,-0.10823454,-1.9742886,-2.6440241,
			-4.602867,-1.3707235,0.14678097,-0.9405926,0.24272446,1.4317585,-0.5502515,-0.5297312,-0.19378385,-0.658941,-1.2586385,-3.5219398,0.14265646,-0.018742358,0.5347811,-0.08791573,0.25553226,-0.95465076,-0.2457535,0.5252659,-0.6362705,-2.4298534,0.6407658,-3.4350653,0.73871225,0.26176128,-2.1353323,-0.37373775,-1.130862,-2.4227743,-2.102942,-0.99065757,0.13359977,-2.0598629,-1.3686527,0.19765183,0.027757358,0.4960602,-0.3736396,-3.1282868,
			-3.0190754,-1.8907206,0.6213702,-1.4754043,0.37556943,2.4765556,0.7589767,-0.9688056,0.09058507,-3.444636,-2.7462873,-2.343538,-0.26309085,0.17924722,-0.15969332,0.41604415,0.44005892,-1.0164099,-0.61918116,0.38301328,-0.92918557,-1.9138534,0.2505016,-3.5353267,-1.387547,0.35675508,-3.2476027,-0.120415874,-2.1533291,-2.6141233,-0.28470832,0.15103954,1.1076595,-0.9749594,-0.2068603,0.6945668,-1.7317054,-0.3140769,0.17100714,-2.909416,
			-1.460641,-2.2662394,0.027232679,-1.0615922,-0.8180002,1.5917811,1.126427,-1.2613325,-0.03752289,-5.1890054,-2.8032255,-0.1469151,0.30848575,-0.7370246,-2.7787232,0.7555533,0.23547128,-0.5843245,-2.052326,-0.12198456,-1.2461505,-0.34787065,0.24317227,-3.2910938,-3.0824654,0.57897824,-2.5998647,0.025964558,-1.8159391,-2.7042143,0.7778395,0.83559513,0.98486453,0.051746055,0.09594179,0.37192342,-2.8810878,-0.68482697,0.75587994,-2.9440289,
			-0.97895336,-2.8570554,-0.2852664,-0.89734393,-2.3698611,0.86395586,1.0977311,-3.5065155,0.2852106,-7.4400954,-1.2353201,0.23663281,0.6419806,-1.6425552,-5.842032,0.40422687,-0.27743092,-0.89589286,-3.162695,0.5422293,-1.9362171,0.5363805,-0.035179563,-1.3503214,-4.096547,0.45619738,-0.90779924,-0.76981324,-0.31429157,-3.1672187,0.93087137,-1.0877842,-0.37985867,0.65979993,0.022884835,-0.022610106,-3.4627576,-0.2343331,-0.09799235,-4.261838;

    b1 <<
			-0.377037, -0.42619133, -0.061033428, -0.11387919, -0.09009364, -0.4450072, -0.07300148, 0.014292731, -0.13911955, 0.075887784, 0.029963434, 0.16861147, 0.43727583, 0.15366247, -0.45244136, -0.0023014566, 0.10410095, 0.19504619, -0.35274288, -0.11154668, 0.2590883, 0.20519504, 0.13708128, 0.073019, -0.15045057, -0.2533095, 0.406958, 0.0449593, -0.053973533, -0.46514323, 0.571088, -0.09457882, 0.39843258, 0.1804665, -0.22719511, 0.13895245, 0.12733972, 0.25664547, -0.63370985, -0.031787902;

    b2 <<
			0.23031978, -0.20883873, -0.44037554, 3.008993, -0.3364086, 0.27638164, 1.6793747, 0.48643067, -1.0554365, 0.86487955, -0.10104917, 0.23602864, 0.057560977, 0.058262635, -0.15057303, 2.060482, 0.93719965, -0.6671162, 0.17477293, 0.6172235, -0.88844836, 0.8877328, 0.94600856, 2.286085, 0.050246906, -0.45621297, 1.6558425, 0.60216725, -0.13088718, 0.8601556, -0.3438471, 0.31771365, -0.8587126, 1.8262655, -0.024069287, 0.85410696, 1.2487924, 2.486393, 1.1270809, -0.03741556;

    b3 <<
			1.475253, -1.5765631, 1.5884347, -2.2123353, 1.0551523, -1.2994027, -3.2149367, -2.6640954, 1.001962, 2.0156205, 0.6056846, -1.2860739, 1.7807634, 1.463424, 1.4995077, 1.6224015, 0.7874363, -2.5248919, 1.5456862, 0.5521427, -0.8796294, -1.3767612, 0.5339881, -0.020703692, -1.6515435, -1.0695117, 1.483922, -2.097011, 0.7824401, 1.4889574, -1.7175419, -4.6331067, -1.947835, 1.669383, -2.3737822, -1.4944022, 0.3002582, 2.7797928, 1.6955518, -0.76355207;

    bout <<
			-1.5544962, -1.1595033, -0.66968036, -0.19284052, -0.78289384, -1.3305403, -1.9697057, -1.6231263, -0.3996486, -0.21741207, 0.62053716, -0.26440933, -0.6502076, -1.9929811, -1.0671884, -0.2946901, 0.774121, 1.2334743, 0.73275906, -0.48144495, -1.5200204, -0.696896, 0.34497255, 1.1910373, 2.2310152, 1.0453542, 0.16628204, -0.93567914, -1.3108919, -0.3290209, 0.8301316, 1.2515455, 0.64256465, -0.50730914, -1.2751606, -1.7896909, -0.41592103, -0.23696892, 0.5475182, -0.35424224, -0.59429246, -1.7238915, -1.7118456, -1.2178471, -0.76435167, -0.24208386, -0.81754655, -1.1591574, -1.6142529;

    BN_gamma_in <<
			0.5502204, 0.018167853, 0.13643163, 0.8454186, 0.3926643, 0.30086726, 0.3646767, 0.17805278, 0.6079451;

    BN_gamma_1 <<
			9.623143, 3.2813966, 2.759064, 3.6576233, 7.0849876, 8.759602, 4.676445, 7.181304, 4.0263395, 3.3490014, 6.0711627, 11.22673, 0.787117, 2.9810724, 4.3272514, 3.4865074, 2.5985224, 3.5367405, 9.485789, 3.5091074, 2.9103444, 3.3579733, 1.1251065, 6.823548, 3.9767659, 9.331651, 3.8662148, 1.5533592, 3.9897337, 7.711715, 2.6128664, 3.151311, 3.2877645, 2.8402672, 9.726488, 4.866838, 4.993018, 1.913315, 1.9331435, 2.9136467;

    BN_gamma_2 <<
			0.28229842, 0.5612741, 0.6378022, -0.40950507, 0.6292669, 0.49863562, 0.30746338, 0.32250875, 2.6221786, 0.26374307, 0.52406985, 0.1826587, 1.0419184, 0.52259016, 1.2141262, 0.36587188, 0.5186842, 0.3194695, 0.3877078, 0.35768098, 6.2373548, 0.63759327, 0.28394476, 0.40534428, 5.3425174, 0.34950945, 0.3284666, 0.34981275, 0.30043033, 0.26308703, 0.40114808, 0.38474157, 3.4994395, 0.28591314, 0.6971862, 0.37293282, 0.31708264, 0.4890231, 0.5452586, 0.41499278;

    BN_gamma_3 <<
			0.090018936, 0.23880865, 0.0821982, 0.12250506, 0.083089836, -0.123161815, 0.14948493, 0.19163054, 0.11304497, 0.09420496, 0.098402284, 0.11202727, 0.10042243, 0.0899402, 0.079193205, 0.097771615, 0.15049256, 0.13735129, 0.11282689, 0.113513045, 0.15489234, 0.11991351, 0.14100087, 0.16284463, 0.19958185, -0.14481139, 0.08809131, 0.15558816, 0.11958737, 0.10739053, 0.13049069, 0.16420957, 0.14943983, 0.10977978, 0.1703866, 0.14108035, 0.10447789, 0.18988544, 0.11101628, 0.098389894;

    BN_beta_1 <<
			-0.10963983, -0.33393964, -0.23475696, -0.019350048, -0.2478588, -0.11374181, -0.2133762, -0.15376751, -0.26176727, -0.19056553, -0.15477218, -0.0061081266, -0.1624559, -0.44384405, -0.21656978, -0.17236024, -0.00786851, -0.6302668, -0.106336676, -0.2013279, -0.33232677, -0.5811523, -0.064028464, -0.29578072, -0.2869087, -0.042502046, -0.1615535, -0.6966273, -0.19016714, -0.13350625, 0.005053781, -0.6407708, -0.10287298, -0.39273277, -0.08578107, -0.29695088, -0.35099944, -0.53218865, -0.03544403, -0.16007043;

    BN_beta_2 <<
			-0.3060034, -0.06517321, -0.18170485, 1.1855553, -0.124908835, -0.2521983, -0.6561128, -0.46785417, -0.03485424, -0.36046544, -0.21715659, -0.21111219, -0.115679584, -0.23916446, -0.24368623, -0.62584865, -0.5917407, -0.13419434, -0.17031418, -0.24031563, 0.0024168117, -0.23971887, -0.5454544, -0.7340342, -0.010128584, -0.18810558, -0.7122525, -0.54687613, -0.2650082, -0.27073005, -0.16488905, -0.34423652, -0.04341451, -0.6015376, -0.13098204, -0.50915945, -0.6905588, -1.1526121, -0.5536959, -0.23946035;
    
    BN_beta_3 <<
			-0.07791695, -0.1501698, -0.055265225, -0.04870662, -0.056397785, 0.044923183, -0.056615952, -0.05276592, -0.05556994, -0.09273655, -0.095233, -0.03273824, -0.1187285, -0.08228542, -0.07996854, -0.09595151, -0.10477209, -0.06301469, -0.10226204, -0.075527795, -0.048776574, -0.03216004, -0.108212225, -0.061965257, -0.03383883, 0.066764496, -0.09227819, -0.037607968, -0.100425676, -0.11364566, -0.037194364, -0.06913353, -0.04950956, -0.15134934, -0.023624638, -0.057381596, -0.06406086, -0.57081395, -0.1698725, -0.039233062;

    mean <<
			53991.36364392145,33257.668097682115,50095.274195828366,43682.39837787222,18007.941259832016,43390.68477625337,50232.91952429436,32796.54279079314,53657.59988786227;

    stdev <<
			186297.61308186426,129892.12705934106,169029.02226540862,158732.7801306334,100064.040933794,156973.92476459267,169453.5458230367,128201.11799824524,183685.12884825488;
  }
  
  else if(m_pcEncCfg->getQP() == 37){
    
    embs0 <<
			-0.15496941,-0.23738562,0.20376089,0.067307174,
			0.004361913,-0.0014439413,-2.6964699e-08,0.017966837,
			-0.0031143562,0.0015375349,0.0014963377,-0.007240195,
			0.029065501,0.0019448526,0.07647026,-0.017472094,
			-0.019460758,0.0019900324,0.005692601,-0.042486813,
			0.07999203,-0.0018005641,0.108529784,-0.07951984,
			0.07624341,0.00027921217,-0.005561914,-0.11676453,
			0.23819236,0.4140254,-0.03714498,-0.25605246;

    embs1 <<
			-0.29502264,-0.078529894,-0.36476833,-0.2807599,
			-0.0159587,0.0035639883,0.013120214,-0.001567521,
			0.0059872298,0.00065900345,-0.0058437074,0.0027730372,
			-0.082981646,-0.01887234,-0.17072566,-0.022181075,
			0.03416319,-0.011271814,-0.029909525,0.0027798729,
			-0.09623474,0.0397653,-0.19671384,0.030519158,
			0.06875361,0.028431349,-0.07390688,-0.073731214,
			0.1356047,0.38348418,-0.1648414,-0.22722334;

    in_h1 <<
			0.24868664,0.1739239,-0.02312496,-0.01607174,0.035090752,0.06362006,-0.12703961,-0.24377283,0.025391486,2.468177,-3.7589827,-0.0012872932,2.6161084,-3.1945388,0.20985645,1.0227716,-0.42776868,
			-1.2444235,0.104762055,0.16905148,4.76878,-3.7284253,-0.013658669,3.6881902,1.0160875,0.59567034,-2.9114492,6.6113496,-2.7836325,5.6865797,-1.8296975,1.4219604,-3.3780353,1.852236,
			-0.075244375,-0.00851675,0.03798584,-0.20853564,0.14884159,0.06608842,-0.106145956,0.080290735,-0.05373144,-0.4890092,0.25800872,0.57116973,3.854307,1.5830003,-0.050965004,-3.6724455,-1.9392685,
			0.025534114,-0.03776047,0.0071308296,0.010380127,-0.07052388,-0.01769199,-0.107725814,0.0025448431,0.050864335,0.662173,1.2425858,0.118253,4.018332,-0.34921712,0.01920075,0.54641485,-4.2178164,
			0.15378411,0.13309716,0.07798408,-0.18113819,0.06989394,0.06048667,0.07492769,-0.20459421,-0.5466178,1.1230137,4.6919546,0.79341966,-3.5629957,1.7402247,-0.002344653,-0.9497201,0.6692999,
			-0.040058646,0.01223464,0.009634062,-0.104167886,0.016826183,0.002454816,-0.15912674,0.051099684,0.5761473,5.4313426,1.6866968,-1.5619855,-3.2250886,-0.5954921,-0.0059006475,0.37081185,0.32406634,
			0.3488142,-0.15918024,-0.23254901,2.1996305,-0.30384246,-0.87137455,-0.0107686715,0.20466216,-0.7212818,-3.8894181,2.03119,-0.7288096,2.2659538,2.6185493,1.0457422,-2.6696634,-0.7380781,
			-0.12894416,-0.017033294,0.09032379,-0.21593295,0.014142919,-0.034387972,-0.13957508,0.095287934,0.08422595,-6.6573744,1.6136559,0.72263205,1.4593853,-0.37427333,-0.25675783,1.643627,0.14323165,
			0.22952086,0.0149149345,0.015872715,0.6726202,-0.733524,0.10647263,0.32296675,-0.1257952,-0.55917746,3.7293177,-4.162651,4.2727156,-4.9040027,2.0119262,-0.9610353,2.9541457,-1.557005,
			-1.305732,0.17094113,-0.13301584,-3.426604,2.544279,0.26574162,-7.421891e-05,0.7906625,0.2990674,3.158512,0.18531416,0.8293963,-4.7300916,-0.41160455,0.7797581,-1.1690608,-0.19366635,
			0.4148171,0.02505951,-0.27312994,0.43751943,0.28379977,0.0059692445,-0.0528532,-0.00028077152,-0.27945724,2.1364398,3.3815815,-3.1372466,-1.7322375,2.423097,-1.9421197,-0.17750263,1.3608387,
			0.059400745,0.057480697,-0.11831114,-0.25693977,0.22480862,0.04376488,-0.10185175,0.027514387,0.97552663,1.242649,-7.164211,-1.2564929,2.01663,-1.9278512,-1.5469997,1.3913201,0.82746303,
			-1.1486789,0.12720224,-0.45949024,0.14993224,-1.8036773,0.054666087,-0.85996777,0.14795041,0.48143396,6.3845596,1.823291,-1.806433,3.5505054,-0.38030735,0.25152215,-2.021768,-0.4936,
			0.5203461,0.0075803366,-0.00838257,0.08170305,0.43903473,0.005983884,-0.6311112,0.2044732,-0.48494908,1.6996876,-1.1325071,4.1463575,0.50140613,-3.278625,-0.60059106,1.7626573,0.7656462,
			1.0973394,0.03328319,-0.5798705,1.3683404,-3.7102451,-0.43559963,-2.533713,-1.0504074,0.0732185,0.5079344,-0.34570822,0.10020521,-9.1915,0.31001803,-0.1615004,0.94337076,0.22836144,
			0.3847397,0.031213282,0.11649572,0.14209092,0.2935429,-0.019734269,-0.28888068,-0.3022227,1.1389177,-1.4048686,-4.882312,4.861503,-1.9212385,-1.9503384,0.80148244,0.6347384,-0.20970714,
			0.24511838,-0.0057578012,-0.19274454,-0.14449586,0.17707784,0.2650395,0.078359485,0.00040287484,-1.0809695,-0.32927147,4.128358,-2.9020617,-2.1968591,1.098848,2.1724284,1.5603625,-1.5494976,
			-0.084435076,-0.056105554,-0.08041898,-0.13539551,-0.2649652,0.12760025,-0.08092699,0.086238444,0.67098784,-1.0365466,10.69239,1.436866,0.7024349,-2.3025475,-1.3169973,-0.26329842,0.68163776,
			-0.7987095,-0.04731309,0.077827856,-3.1110427,3.165771,0.05369162,-2.0687096,1.14676,0.3738089,-0.84332687,0.85408586,-2.712269,-5.2261353,1.3132069,0.05128548,1.4076651,-0.358806,
			0.008739289,0.0028719553,-0.0040688803,-0.011432366,-0.018958788,0.0075945603,-0.014224695,-0.011303859,-0.15463424,1.0762845,-0.8637335,0.7738012,3.7108393,-3.1714947,-0.2184905,1.0323784,-0.5678492,
			-0.07964524,0.022848304,0.041834347,-0.4209242,0.55913377,-0.22699724,-0.0044426396,-0.018964346,-0.13342594,3.622644,1.8306911,-1.4986497,2.7072024,1.0291433,-4.2188177,0.092454895,0.25533125,
			0.4796055,-0.009435505,-0.045556508,-0.09175246,0.31697172,0.20879765,0.4192317,-0.18961333,0.76725376,4.2037797,-1.9694365,-3.1041307,0.8445491,1.674056,0.52511156,-3.2615833,-1.5104742,
			-1.5349333,-0.22788142,0.25050288,-2.0871172,2.776701,-0.13395898,3.8211503,0.26062772,-0.5527135,0.17470323,-3.2273135,-1.7242965,4.0439024,-0.40846917,-1.0328736,1.9572111,-0.9012433,
			0.13481177,0.29145503,-0.037900172,0.4425674,-0.17231,-0.17396744,-0.26005197,-0.14000435,-0.04719238,2.5082815,7.0276604,2.2413812,0.9390803,-1.0505718,0.15105198,0.91661614,-4.210756,
			-0.19872332,-0.030971466,0.050790697,0.0013097383,-0.26575586,0.059660196,-0.10297355,0.20050243,0.79987365,1.464877,-10.782684,-1.9814278,-1.3819052,1.5831069,-0.22093157,1.168211,0.2186791,
			-0.14787184,-0.10685659,0.16200463,0.04858464,0.20346528,-0.13875075,-0.10461739,0.19413552,-0.89009297,1.668046,6.338838,1.3951966,2.0421689,-2.119901,0.70063937,-2.9735475,1.0489115,
			-0.00021354642,0.005532115,-0.0012459892,-0.044168886,-0.016834797,0.02524596,-0.07142778,0.010168048,-0.00671429,-6.0647006,-1.0162504,0.35806882,2.0246825,0.27582622,-0.090855174,0.956589,-0.1242826,
			0.072868735,0.13759558,-0.22490862,-0.23635766,0.3163761,0.09850185,0.027656546,-0.10323682,-0.30230004,-3.6439197,-4.1181064,1.7556157,2.9873066,0.17091095,-0.18182097,-1.4811399,0.6716436,
			-0.006054414,0.024803534,0.0026656566,-0.099715605,0.090944074,0.046601728,-0.042327773,0.021311482,-3.4810336,1.8161447,0.3549671,-0.709909,2.811191,0.45888045,-0.0009865754,1.5624251,-0.12869059,
			0.09077719,0.028475428,-0.33796114,-3.1777694,-0.24327302,-0.0097491965,-5.040149,0.20267847,-3.0122025,-1.5771768,2.4373822,2.05578,1.7513525,-0.3574243,0.7311107,-2.1052418,-1.6675392,
			0.0002292553,0.0063630603,-0.00970753,-0.01024396,0.026450047,0.0029855473,0.010792188,-0.0026700925,0.32852802,-1.2887478,0.69755834,4.962457,-2.8477533,0.004479503,0.23260833,-0.40516835,0.095253296,
			-0.42601848,-0.026719147,0.04322042,-0.25675985,0.1880203,0.015738655,0.269229,0.13740928,-0.6548645,-2.6796446,4.3635116,2.422071,-1.0597632,-2.2524953,-0.19187824,3.031395,1.7570481,
			0.11831797,0.058504988,-0.0033214428,-0.1405235,0.040110312,0.04969114,-0.25237405,-0.03780464,-0.5370178,1.5381856,0.5973918,-6.163205,1.4544225,0.67613155,-0.14514427,0.43595356,0.34648076,
			-0.02075944,0.03065212,0.07178987,0.0018776867,-0.090921186,-0.038824618,0.06641199,-0.0992777,0.14364345,1.5929959,-4.555192,-5.4783053,-0.6324484,2.3682268,0.9742934,-0.1934935,-0.7010219,
			0.33138624,-0.011547896,0.07569218,-0.50669515,0.0037838344,0.16618241,-0.85488385,0.13730311,0.5474855,3.3828783,0.21129206,-4.715493,-7.2825913,1.3307756,-0.7477602,-2.2322328,0.37206355,
			0.07465042,0.036883872,-0.003215644,0.040978447,0.0017267364,0.03491023,-0.014209572,-0.07475099,0.056265574,0.6203886,0.63626677,1.1204779,-3.5607836,1.061993,-0.4931572,2.761236,-1.0585034,
			-0.18397164,-0.049320087,0.007895294,-0.2637447,0.4836812,-0.07305913,0.0354088,0.2667999,0.36716047,-0.5918479,0.6166346,-0.87214446,-8.35813,-0.5842351,0.08687262,0.1617607,0.46792063,
			0.022228157,0.016557278,0.11395168,-0.03414193,-0.12592615,0.12862732,-0.107306115,-0.12634152,1.322965,-0.46097884,-4.4057956,2.3676457,3.5846007,0.8713405,-2.3090696,-3.428556,0.05642503,
			0.026526157,0.011593776,-0.027856782,0.035489798,0.09051202,0.0006438012,0.081694506,-0.002408527,1.0161474,-4.3860283,3.769695,-3.804924,2.32227,-0.41871145,0.27484944,-0.2932043,-0.03132246,
			-0.00028964604,-0.012255609,-0.0011325636,-0.0005089304,0.014784365,-0.0013641141,0.0029471254,0.0041824626,0.16331105,-0.62932605,0.5364803,-0.99854875,-3.9159036,-0.20489182,0.2090879,3.9645882,0.15019368;

    h1_h2 <<
			-0.26375824,-0.063148454,-0.82877743,-0.23744038,0.49438184,0.09990009,-0.35696974,0.35272402,-0.9696081,0.34518543,-0.10089005,0.13359693,0.48313355,0.096212424,-0.05072316,0.40344903,0.20457321,-0.45499364,0.11725294,0.32969117,0.03709466,-0.26622242,-0.4558662,0.19420318,-0.41055903,-1.283544,-0.70228595,-1.4699788,-0.07243285,-0.0044197203,0.020682376,-0.8100696,-0.18187417,-0.100800715,0.10770133,-1.3017347,0.12920772,-0.65679437,2.9818623,-9.109659,
			0.62523395,-0.12935084,-0.32430214,-2.0968285,0.044648476,0.35922563,1.380345,1.1975816,0.6299349,0.25351825,-2.9162145,0.7476397,0.42748415,-0.17737135,-1.1542683,-0.05868569,-0.6263968,0.7784959,0.346898,8.309729,-1.8319281,1.8936872,-2.0632675,1.5629302,-1.9486346,-0.95138264,-1.1764107,-2.172104,-1.2632594,1.9836924,0.51855624,0.39023468,-4.5271244,-2.5071347,-1.599561,-0.4008138,-0.8392292,-0.77581465,-3.0490763,0.36627582,
			1.360253,-0.1709182,2.1884315,-2.717107,0.13700132,-0.70946586,0.3979722,-0.22695531,1.5217323,-0.6733661,0.06245555,-0.14928867,1.9761665,-0.052744165,-0.1979553,-0.39371252,0.022126243,1.0723873,0.1739511,-0.17515875,0.48277798,0.28321457,0.8692449,-0.15265808,-0.45890194,0.37776807,0.00865182,-0.11008686,-0.5276651,-0.3023086,0.2992348,-3.2022004,0.18929608,0.0011441227,0.12244926,-5.2704997,-0.9290389,0.4611776,4.7589855,2.188222,
			-0.92793614,-0.13207568,-4.5057325,1.4544516,-0.62305903,1.396135,-0.6387868,2.1635213,-2.8776238,0.90749216,-0.000558022,0.19664335,-1.5245494,-0.21951587,0.15198489,0.84287053,0.86401033,-1.6256969,0.547478,1.1806337,0.011306828,-2.2070713,-0.8629845,0.54455435,0.6599622,-3.2641685,0.27596006,-3.4330566,-0.2774577,-0.18218666,-0.23201592,2.391958,-0.43051007,-0.8189468,-0.07468567,8.921426,0.24906348,-2.346909,-2.5489755,-2.172836,
			-1.2324693,-0.91563874,-3.1491659,-1.3363335,0.67101616,0.7801026,1.2072669,-0.44827405,-0.8077192,-2.2630434,1.5610125,1.6847732,-0.5701787,-1.2842247,1.2186102,-5.244018,0.22989929,0.64339507,3.7802548,0.47916505,-1.3954848,0.4251093,-0.35797423,-1.3847607,-0.13658008,-0.96529317,-1.8422902,-3.7523575,0.31782478,-0.9214061,-0.8535434,0.15867622,1.2632911,2.2213988,-1.9098864,-0.2641933,-2.091395,0.049190275,-1.1744106,0.43824324,
			-0.77235544,-0.5194319,-1.4066446,2.0579822,-0.65412325,-2.7101367,-2.4981387,0.0636617,-0.28750232,-0.11375449,3.9125357,1.641784,-0.3122491,0.20493844,-0.16501272,-1.0465249,-5.131393,1.3420339,0.019596057,-0.60435224,1.6057652,-1.1467364,-1.1042268,0.6580463,0.13790426,-2.8850667,0.49697447,1.1739982,-1.1376297,-0.25441062,0.5150827,1.0492868,-0.8795602,-3.7953763,0.19702284,3.5777123,0.19123416,1.3148941,-2.91141,-2.9170647,
			0.70479566,-0.7990201,-1.8648597,0.51127654,1.0876855,0.2088055,-1.2341307,-7.843498,-0.4977734,2.4002492,0.17572667,0.6477996,1.6584716,2.4820013,1.3979508,-0.10011521,-0.37635753,0.27847058,1.7736658,-2.5381265,-0.090510786,-3.2635307,-0.34053558,-0.7622424,-0.89524746,-0.5853149,-4.895297,-3.905705,-1.135389,-1.716042,0.29423946,-0.62033415,-0.06021906,-0.4252574,-0.60749215,0.79271495,0.9043258,0.0077230893,-0.8260364,1.0677464,
			-0.2841834,0.50964296,2.1551235,-0.061427638,1.6998019,-0.60753393,-1.4016105,-0.36637542,1.4782264,-1.4892356,-0.46998638,0.23927355,0.49818805,1.484961,-2.1982443,0.28708762,-1.1557469,0.5725919,-2.2850792,3.6766484,-0.5285507,0.8253059,-0.5064512,-0.29216632,-1.1362327,1.8286717,-0.011787774,1.2036029,0.7838961,2.0777733,-0.036872614,-0.74430877,-0.049157225,0.9159599,-0.19015968,-4.2762747,0.530687,1.3720005,-0.69837224,1.4309232,
			0.73424274,-0.4030132,-2.2643878,-2.3083441,2.0164168,0.21406259,1.6119635,-1.1197991,0.5703373,0.90438014,0.6592687,-0.18478498,1.2417524,2.9492714,-0.58661926,0.20459862,-2.841401,0.44287562,-0.95479393,-3.8005505,1.6948401,0.20652817,-1.4244102,-3.7901697,-1.555705,-1.4619536,-3.7953846,1.1963079,-1.4369391,1.0343705,-0.55938596,0.6407047,-1.0915943,-2.3429437,-1.1795313,-3.229721,-0.69309235,3.3779337,-6.918411,0.3150484,
			-0.34745073,-1.0288112,0.11523846,3.596046,2.4852145,0.7888102,-1.7272538,1.2239183,-1.1902027,2.07034,-0.16653846,-0.18526508,-1.4181464,-1.4983933,1.5854895,0.79126984,-2.9363477,2.3116157,-0.3304136,-2.0702288,-0.22205548,-1.5684052,-1.6117308,-1.7896943,0.09248381,2.2532024,-2.4276977,-5.2637463,-2.944623,-0.2265288,-0.10222868,-3.4889898,-1.3272573,1.3406459,-0.4880696,1.8444333,-0.39301032,0.32873404,-0.24182652,-1.2887872,
			-0.66841096,0.012917279,-2.7925005,2.1082044,-0.2939404,5.2557087,-0.37060386,-0.70634025,-0.674185,0.7627251,0.45948726,-0.57003546,-0.7317198,-0.48482013,0.20812085,-0.3213663,1.0008903,-1.9742954,-0.23448941,2.4921143,-0.004964221,-0.9806712,-0.78963846,0.15139984,-0.13933986,-0.3650286,-1.3838843,-2.442146,-0.15467268,1.1531457,0.106454395,1.2663095,0.050072107,0.12304247,-0.48367965,2.567169,0.8715722,-0.79580706,-2.4564743,-2.1895962,
			0.23941055,-0.5095926,2.787706,-1.2335416,1.5522091,-6.8680973,-0.86650616,0.1131067,-0.31939417,1.0375682,0.70922047,-2.423829,0.23734134,0.096273825,0.22401029,0.027407391,0.51455784,-1.980271,-1.4418312,0.42173317,-0.7876983,-2.1974247,-0.1894061,-0.8927308,-3.176661,3.5558088,-1.5028194,-0.39107957,1.1371088,1.9665596,-0.4675529,0.54050714,-1.0972803,0.64270914,-1.4666392,1.982334,0.7122549,-5.160558,-7.0813437,-0.50431484,
			-6.213258,-0.27392423,2.0095403,1.5484248,-0.13712458,-0.33343765,2.2058914,-1.2562068,0.110163316,-0.86662334,-0.1975021,-1.648151,-0.11359257,-1.1464685,-3.5892634,1.2646872,-0.69243157,0.8109724,-2.5551605,5.930876,3.4582283,-0.75999117,-2.881686,-0.37313232,0.4206871,0.5324897,-1.5047905,-2.1148303,-1.8178585,1.4204186,-0.45570844,1.0043718,-0.7670511,-1.6703657,0.39009055,1.6956083,-4.7914553,0.87110597,2.6087017,-0.3425602,
			0.86007494,-0.3645521,3.8846483,-2.4898348,-0.6619248,-0.6014987,0.4515232,-1.1115351,0.1937579,0.86375535,-4.266969,-1.6140205,2.4314048,-0.36774316,-0.343895,0.8579659,0.4009266,-0.72898626,-0.0016512752,-2.1437018,-1.8034228,2.933554,-1.3828146,2.74097,-1.4050857,-1.0665519,-2.2093856,-3.9603214,0.33720234,0.57722574,0.03714458,-1.8110116,0.72617376,5.2444634,-2.97544,-1.1154484,-0.74539137,-1.0381858,-4.284427,0.5961746,
			-1.5992405,-1.1060187,1.6200432,1.3423414,0.41833144,-2.0096617,1.0557666,-2.581496,0.06400843,0.6596554,-0.15498017,0.33033887,1.3683921,0.99054617,1.4402105,-0.7964926,0.4521373,0.76460487,1.6960865,0.25757626,-1.0327235,0.3859358,-1.4520664,-2.073638,-2.5578628,-0.09174684,-6.093847,-0.12702645,0.8317106,-0.4223241,0.6767119,-0.74304223,0.73372936,2.701006,0.6157292,-5.9217334,0.83205324,3.6656783,-4.734215,-2.2778254,
			-0.7428909,0.10748194,-0.69921446,-0.10252821,0.22780228,1.2027633,-0.08493863,0.85584646,-0.7832752,-0.67169505,1.3398304,0.9056712,-1.3903327,-1.1474477,0.49936938,1.6303358,-2.0091014,-0.19102554,1.4184719,-2.5580156,-0.32636434,1.2057621,-0.8166502,0.65359026,4.6964917,-5.739676,-1.2068267,-0.74383134,0.7355684,-1.0970619,-0.18080437,0.7583441,-1.2006813,-1.2548028,-0.30697224,2.2482467,-0.12680711,0.21653199,-9.079212,-0.6225978,
			-1.3010845,-0.17342262,-0.63390654,0.1558621,-0.47746795,0.6255684,-0.7630351,-0.22639608,-0.6017325,2.1724489,-0.20972994,1.3228651,0.88190925,-0.18733692,1.5306605,-4.529997,0.2681232,-1.5334406,1.6143962,-7.127848,-1.536821,0.641229,-3.1054685,-1.0662533,1.0046979,-2.1027062,-1.3444031,-2.9603772,-0.4261873,-2.354798,-6.3202696,-0.6075244,2.385124,2.0411088,0.27026442,0.1845293,0.25371942,-2.822144,8.155472,0.08781099,
			2.400105,-2.915932,-0.30122617,-0.003406353,-5.6358294,-3.3932447,-0.86501133,0.09823347,-0.13053936,-0.78013897,-1.8586966,2.2585082,-1.014389,1.637265,-0.40629557,1.9195329,-1.4960853,-3.4811766,-0.22643915,0.8966015,-0.29894537,0.199419,1.1197361,-1.1908165,5.496107,-2.808538,1.1752279,4.483477,-0.2735485,-0.012048655,-0.9281992,-0.92656934,-0.09053737,1.175707,-0.32822236,-3.3435419,-0.21678732,0.4603026,-6.59844,-0.39827666,
			0.05828624,-0.05223116,-1.8245043,-0.6084632,1.954209,-0.0978934,1.12029,1.0285212,-0.05965172,-1.6499635,0.885256,-0.6832818,0.41676974,-0.0313055,-3.6906903,-1.7556896,0.12833588,0.6465977,0.6059641,4.4753413,2.377695,2.734196,-1.6046277,-1.2845402,-0.43799004,-2.1813643,-1.3443979,-2.6435974,-1.4647468,4.3104234,-0.26941106,-0.04961269,-1.5076118,1.0494807,-3.2936907,-0.061752137,0.0039878595,1.5184863,1.8981986,0.20237865,
			0.40274194,-4.4974775,-0.04471627,-0.09367589,-0.7357445,0.14960678,-0.027339654,0.028118521,-0.32901815,-0.109327324,0.1857577,0.077076145,-0.041807413,-0.45188117,-0.026933676,-0.53279054,0.23192242,-0.170122,0.057195704,0.26859385,0.088566035,0.13772611,0.18048891,-0.046468638,0.28590813,-0.2140457,-0.0656325,-0.18025517,0.06645446,0.024345841,-10.18181,-0.18783632,1.7385348,1.0573874,-0.02898765,-1.384426,0.070622064,-0.10175731,7.304404,0.0046136244,
			2.477688,-0.21661307,-1.1247407,1.6352627,-2.561407,-1.0718192,-0.21580094,-1.9159533,-0.16253132,1.6101176,-1.6087283,0.80741006,-0.80270034,3.5421999,1.0351657,0.8564439,0.7255248,-2.7369635,0.64967346,-6.193492,-1.7651545,1.1170546,-0.31214407,-1.7363883,4.8584776,-1.9493037,0.40607944,0.132192,-1.4261109,-0.6405254,0.21783043,0.902255,-0.74027103,1.4175296,-0.20160463,-0.7231679,0.7713754,-1.3374882,-3.8853278,-0.57956475,
			1.2757716,-0.7087025,-1.329604,0.67927146,0.7827746,2.2900338,-0.42213157,-2.5070944,-1.0282142,1.3719549,0.18895952,0.71390426,0.591688,0.4344791,0.312626,0.6900018,1.3004642,-0.4457911,1.0232278,-2.680061,-0.61310726,-0.2998865,0.60031873,1.7274574,-0.6253282,-0.76788,-4.928639,-3.63864,-0.4992302,-1.1404514,0.102428965,-0.6997776,-0.81453127,-0.69558597,-0.5758173,1.0613779,1.021481,0.6562959,-2.4553895,-4.3119373,
			-0.7429846,-0.21801545,-4.44906,2.1514115,1.6096733,-0.77393085,2.695448,-0.92279685,-0.035966996,-0.5301241,-1.7326895,-1.0263063,-1.0114046,-1.0226399,0.8183942,-2.899116,2.7210276,1.1484423,1.3805559,-3.898674,-0.97613084,-1.2770375,-1.0363492,-0.38210422,-1.0447186,0.092290886,-0.050713938,-2.5127938,1.6565468,1.6083021,-1.0844766,2.8730736,0.42994162,-1.7523596,-1.3280436,1.9861264,-0.6869037,1.6864879,-2.4670186,-0.89324874,
			0.41934344,-0.93236977,-3.027354,-0.6780558,-0.79906875,-4.2216096,0.008394537,0.4469372,-0.7875924,0.18671988,-1.4600797,0.7684766,-0.57780796,-0.26040435,0.65099174,1.9065014,-3.680596,-3.1940298,1.3020161,0.35447487,0.07151711,-0.09019944,0.35473156,-2.1290932,5.445183,-0.8421677,-0.40281516,3.7265031,-1.2220974,1.4204222,-0.10191079,-0.94053257,-0.8070755,0.20893808,-3.0678313,0.32636774,1.2842873,0.29090923,-2.6762714,-0.32201648,
			-2.4691856,0.20463443,-5.7047777,9.564744,-0.08455086,-0.5840001,-1.7491547,-0.46023118,-0.25276133,0.29662427,-1.1266139,0.036161434,0.31456026,0.22146475,-0.5548247,-0.6460555,-2.159358,-2.074225,0.9247678,1.9649332,-0.80094045,-2.640652,-2.3029425,-2.2329652,-1.60605,-1.3195403,2.57181,-0.88182616,-2.6142037,0.7765496,0.6292337,-0.77541775,0.71059066,1.5149186,0.0014534612,0.9168668,0.5686662,1.1758778,3.2530565,0.775109,
			0.8038819,0.21786378,-3.8417842,-0.523789,0.23581396,1.0801942,-1.3171096,2.0073807,-0.9004938,0.6567985,1.7342353,2.3980777,-1.0693538,1.1387221,-0.16168702,0.20852418,1.7311405,0.1941624,-0.5835294,1.51468,-0.8982971,-0.37295115,2.389556,0.98934,-2.3741608,1.094803,-0.31436458,-3.8716664,-1.5611899,2.0810173,-0.17204961,2.4211316,0.40466377,-1.8025016,-0.8035139,3.9629831,2.8662164,-0.3624424,3.7361188,-1.5751983,
			-2.2898855,-0.3997753,1.297083,-0.99122626,2.8441713,0.754195,1.8384316,-1.744337,0.01858436,1.8649124,-1.6071079,-0.29747382,0.32993487,-2.4330132,1.079957,-0.71691746,0.4610455,-0.7991799,0.7673189,-6.5121403,-2.9786148,1.1507046,-3.4091861,-1.9523124,0.48342878,0.0007324502,-0.72963065,1.5906267,-1.6405482,-0.5438757,0.5403873,-0.50604916,-0.38847992,-3.42355,1.3680202,-1.0745227,-0.54603326,-0.4823799,1.5982841,0.3451918,
			-0.95120066,-0.12073823,-2.5765793,2.8794904,0.18424131,-3.0209951,-0.3258979,7.5815964,-0.42265093,0.074773535,-0.26808295,0.41500518,0.5879357,-0.73052496,1.713743,0.70468813,1.981799,-0.96942043,3.008355,-3.605393,-1.1064113,0.453378,-0.82271206,2.2068372,1.5272326,-0.83845097,4.6142664,2.0534122,-1.0431857,-3.0787506,-0.2807365,0.30519977,0.38832003,-1.2275757,-0.34811983,0.9300958,-0.796492,-0.6518963,2.9869173,-1.5530822,
			0.0914954,-0.044140287,-0.37148517,0.018954793,-0.19552754,-6.1154594,-0.22203851,3.377447,-0.27146727,-0.18880002,0.13596682,-0.08303343,-0.2581225,-0.0020806561,0.0714696,-0.023571448,0.105013356,-0.17409755,-0.1451752,0.35520947,-0.037437487,-1.4005018,-0.09849808,0.02016788,-0.93842953,-0.38882017,9.98143,0.02987886,-0.02525905,0.20277451,-0.031693865,-0.20121337,0.02138837,-0.1264972,-0.03378691,-2.0400996,0.32866108,-0.21817984,6.970484,-0.89986885,
			6.6725326,-0.3323561,-2.9322655,2.742018,-4.1295834,-0.25314632,-1.6610878,0.65679127,-0.5046268,0.6663783,-1.204247,1.3825516,0.73524946,2.4621232,0.6624611,1.6785187,-2.4324439,1.3341876,0.78290915,7.183467,0.03373258,0.5230587,-1.7025187,-0.22687909,-0.14079303,0.082093224,0.46629924,-0.7542903,-0.2178849,-0.9794943,-1.743639,1.3748463,-1.7772913,-1.5895288,-0.7464601,-4.723331,1.0408348,0.7183831,-8.848141,0.09934914,
			-2.6509442,0.48532265,-0.9638988,0.40265158,-0.022649968,0.07245412,-0.012216078,0.150664,-1.0321449,0.54954106,0.1536068,-0.44142565,-0.55841005,-1.0679915,0.35182083,0.16999412,0.43212098,-0.5773185,0.75670606,-8.71617,0.20428745,-0.16938524,-0.21346937,0.3171339,0.5523194,-1.859297,0.21682014,-0.39604872,-0.11557156,-0.045629296,-0.29591173,-0.7068843,-0.38709143,0.23404558,0.09353606,6.927399,0.39723054,-0.2074624,-6.635905,-0.48283163,
			6.640142,-0.4612649,-0.5742243,-2.2732306,-1.014318,0.96647125,-1.9955051,0.57708424,-0.43914637,0.51507527,-5.5055714,-1.0321282,-1.1221277,4.0641346,1.3225341,0.18450646,-0.06467395,0.5440864,0.41895697,-2.202351,-4.2093782,0.28734013,-0.72053206,1.1561946,-0.81320775,0.47534165,-0.041012056,-0.4966009,-2.4055943,1.3957784,0.57845175,0.10333712,-9.793598,-4.089937,-1.7830994,-0.3615326,0.070152976,-0.98439,-2.8789477,0.05705355,
			-0.26424918,-3.4258626,0.068855695,1.1170192,-1.8332922,0.2937487,-1.6243935,1.9027785,-0.36454904,-2.4412298,0.32636285,2.3441741,-1.2304331,1.7078662,0.021825355,-5.582668,-2.6884055,0.54927427,-0.01832961,-0.5197869,3.925341,-0.09072129,-0.45390248,-1.8309027,0.4362864,-2.350205,-1.1956705,-1.2179801,-0.46854398,0.119765386,-4.4062614,-0.04945991,1.561002,-0.8835705,-0.76178217,2.5553458,0.45680487,3.5377495,-0.0027502012,-0.4250968,
			1.1554935,-1.4361594,-2.2416494,3.887828,-0.50122315,-0.9691237,-0.035010017,-0.47602457,0.1413272,1.6454664,1.4315661,-0.031848066,0.116332866,-0.30101636,3.2754567,-1.3359239,-0.40462354,0.8620541,2.630854,-8.171982,0.39436385,-0.67225575,-0.24303499,-0.9963832,-0.69406855,1.3282961,-0.12585342,0.45918304,-0.43606275,-3.3449035,1.0332497,0.7233892,-0.3518557,-0.2731783,-0.094921,-1.5699484,-0.5399421,-0.9581963,3.2726161,0.22816151,
			0.6295234,-0.47110733,0.3898776,0.38800642,-0.23549539,0.24824348,-1.2684017,1.4907025,0.20599963,5.87263,0.5903543,-2.1079886,-5.5273066,0.5049114,5.5335255,0.40985316,-0.0986508,1.0592512,-0.20628278,0.22125283,-0.37574247,0.2708796,-1.0963111,0.93803126,-0.5595801,-0.13287719,0.189009,-1.3099948,0.63763565,-3.4021018,-0.19805388,0.5767108,1.3259193,2.172934,1.492414,-0.84431475,8.5247135,0.119552195,0.011174229,-0.33482933,
			1.869937,-1.0681163,-1.2629452,-0.7020865,-3.0501575,-0.41997957,-1.2852689,0.72505337,-0.31939614,1.2949935,-0.4437009,-4.9580393,0.68773514,1.3267785,0.7131608,-2.1355183,0.91898715,0.48365316,0.6273812,9.0700445,0.0137256235,-1.5759821,-1.4577007,2.7102952,-2.632245,2.0016825,-2.7819722,0.48591763,0.8843146,-0.49166197,-1.5815384,0.535672,0.58140635,-0.19521026,0.72474384,1.1264181,-0.26220408,-0.91871864,-6.4124036,-0.06817851,
			0.10266301,-1.247088,0.213994,-0.025107231,-0.5783306,-4.9584107,0.28362975,0.13268884,-0.038310137,-0.3258365,-0.3064799,-0.45877206,-0.09339663,0.08704946,-0.030226141,-0.5532963,0.16161035,-0.013405041,-0.39613038,0.22917674,-0.026941676,-0.76963735,0.48344737,-0.11370336,-1.9634751,1.4564573,0.5006463,-0.038993042,5.9948773,0.23846915,-2.0394669,-0.1605957,0.381495,-0.35992923,0.015075628,-1.8945571,-0.111932755,-0.516784,-3.7513015,-0.44476843,
			-0.7851801,-2.0554357,0.61004996,-0.0839434,2.6878088,1.0735589,-1.1832564,4.972059,-0.60844076,-0.23962317,-0.34568995,0.29881763,-1.1597716,-0.70454437,1.3696139,1.646337,0.70034945,-0.18172503,3.7375247,-2.5745857,-0.29277086,0.41796222,-2.6621554,0.5998809,-0.35939443,-0.8722686,-1.632482,-5.1144967,-1.2102695,-1.389849,0.2863223,1.0773929,-1.7869229,0.8589675,-1.8335104,-1.2327864,-1.8483464,0.29496092,-3.328721,0.14000998,
			-0.07784481,-0.016787367,0.21978433,0.08723386,-0.1575276,-8.948361,0.3485808,2.7231116,-0.7475648,-0.31506643,0.23044376,0.12291795,-0.10253081,-0.11715402,-0.12602185,0.13119298,-0.4444752,-0.13870932,0.2621951,-0.13822293,-0.0049843243,-0.50065047,0.17303336,0.009525337,-0.31483537,-0.2433749,8.004789,0.65997386,-0.1579682,0.043497223,-0.019367725,0.09416784,0.014535667,-0.512725,-0.09268986,-1.785034,-0.44063124,-0.04328078,5.623061,-3.3204308,
			0.009991521,-0.21262892,-4.374837,3.181168,-0.057018507,-0.19181281,-2.3881576,2.4223726,-1.2968261,-1.515188,-1.0455211,-0.126376,0.91482055,-1.2693944,3.3487444,-1.8285601,-3.1376536,1.0235782,4.0204363,0.37727952,-0.24910484,-3.4370208,-2.0856285,0.34865925,0.6604767,-0.8861386,0.114498205,-0.57609475,-3.3347104,1.9227101,-0.3075038,-1.3985493,0.5816757,-0.7796945,0.66304964,3.3801548,1.2381843,0.34625095,-2.5787687,-0.33471248;

    h2_h3 <<
			-0.1572283,0.59097373,-0.7200948,-0.42898855,-0.039500233,-0.39494988,2.0841775,-1.9055336,1.981908,-1.1572285,1.7055006,-1.0922785,-1.5915091,-0.5657016,0.38170332,-0.42698887,0.56922555,-0.06641862,0.48724592,-0.42731375,-1.385126,-1.6578914,-2.3735793,-2.1302874,-0.979235,-0.40890634,0.048950132,-1.3636204,-1.1657059,0.082756445,-0.609217,0.39315113,0.27719206,-0.74863017,-1.1303496,-0.85476756,4.5171814,0.76606977,0.08667193,1.3362352,
			0.2760202,-0.38677996,-0.791205,-0.3997686,0.20865288,-2.9656482,2.1689322,-0.5361191,-0.82893044,0.0013267111,0.20318137,-1.0393573,-0.27949005,0.3586577,-0.88492954,-0.26488426,0.14745124,-0.19468233,-0.44687483,0.30474126,-0.41325697,-0.5561908,0.0155827785,-0.80721325,0.93856984,0.23643844,0.5340283,-1.8589436,-2.1659892,0.17505945,-0.17058851,0.3010506,-0.27877322,-0.6272048,2.0556123,1.5190059,-0.55840886,0.41352704,6.653763,0.32035437,
			0.51921076,1.4760287,-0.38977093,-0.1870204,-0.13002074,-1.7675992,0.8070167,-1.3712709,-0.34297916,0.44863346,0.16590244,0.29867384,-0.8504884,0.1551499,-0.94135666,-1.9469334,-0.88120127,0.42930594,-0.34659162,-0.21478885,-0.32409462,-1.2220075,1.2877896,-0.99651974,-0.35208446,-0.95056546,0.18059406,-0.4421446,-0.1758484,-0.36409628,0.85134417,-0.5868538,-3.317414,-0.5927933,1.003584,1.0213547,-2.2285223,0.9200045,-0.13126203,0.60654247,
			-0.5932016,-0.3179275,-0.16682245,-0.50780964,-1.1275791,1.7051013,-0.15395927,-1.8023413,-0.6309019,0.82262933,-0.9982166,-1.2966526,-0.5584612,-1.7231169,-0.6794626,1.2024059,-1.3333633,-0.61490494,0.85468745,0.3161217,-0.8776807,-0.3477176,0.36041316,0.614676,0.2119735,-1.5559543,0.14703798,0.07203668,-0.22952901,-1.2130369,0.08744087,0.43447146,-0.214478,0.10430842,1.1893426,-5.3958383,-0.45610932,1.0300105,0.6198727,2.3515778,
			-4.4157915,0.11643996,0.029652923,1.1321994,0.04755334,-0.061334305,0.83663076,-0.17887652,-0.03847311,0.61508816,-0.05029122,0.56218874,0.007101902,-0.112248704,-0.44110334,0.29112762,0.54299676,-0.27684686,-0.28309268,-0.39243564,-0.30774218,-0.99293464,-0.6777917,-0.35685936,0.662956,0.7243629,0.21251887,-0.15572837,0.09089162,0.09057268,0.3256643,0.2900617,-0.18073267,0.36092564,0.3006511,0.24122322,-0.2300685,0.65457827,-1.1607591,2.1439579,
			-0.1261217,-0.29292604,-0.38168627,-0.24439755,0.56517404,-1.3326938,1.656092,0.02547148,0.30499706,-0.72185904,1.2850649,-0.47333112,-0.64118797,0.80654216,-0.53660226,-0.74627495,-0.101691745,-0.03426649,-0.6167999,-0.73130584,-0.2299086,1.5558084,-0.46615025,-0.6446334,-0.104727894,-0.31955463,0.04751204,-1.6200813,-2.3169215,0.12307063,0.2886385,-0.25735146,-0.08602096,-0.33931836,0.3222329,0.091529496,0.13383946,0.69377285,0.06664535,0.96811545,
			-0.42026988,0.32932457,-0.5626003,0.55485785,0.048403163,-0.75524753,0.8091031,-0.12200045,0.09638696,0.7294771,-1.8681512,-0.62626,-1.8606418,-1.2067158,-3.3883088,-0.96529853,-0.17820747,-0.29844758,-0.1005022,-0.15666471,-1.611615,-0.93966514,0.75631785,-0.6014673,1.5788976,-0.2436445,0.863441,-1.0370029,0.1938583,-1.4500902,0.015535531,1.2108313,-1.1496398,-1.2598544,-0.35579726,1.5838687,-0.06591553,1.1120859,-1.0939906,0.95419973,
			-0.65022135,-0.38640183,0.12491067,0.15102729,0.7165595,-0.79653126,-1.2940923,-0.4961455,-0.66304314,-0.15630178,0.47770703,-0.29946706,1.1042396,-0.38860208,-0.7448865,0.1170322,0.44116676,0.4758951,0.70335674,0.56561595,1.3588747,1.0022283,-4.455554,0.6397033,1.2069185,-1.5818717,0.42531982,0.3300249,-0.41053817,0.23459142,0.2621981,-0.35518652,0.5661175,-0.8585501,-0.01277664,-3.6493633,-0.37353587,0.8374352,0.51345646,2.6085613,
			0.07706328,-0.059804898,-0.42538077,-0.06558958,1.3861707,0.07877333,-0.37848923,-1.3247153,-0.24668035,-1.0108091,-0.10111615,-0.22398618,-0.760463,-0.5734461,0.94420356,-0.8867366,-0.11680292,-0.2811361,1.4329909,0.11656057,-0.86837006,0.0283167,0.38474056,-1.0180552,1.1994338,-1.6897768,-0.25469136,0.7104913,0.42528847,-3.8881094,0.037618615,-6.844606,-0.37214175,-1.0038384,-3.8109872,0.14093676,-0.08652265,0.46610722,-0.88975257,2.575423,
			0.28592053,0.4044646,-0.46036014,-0.28542864,-1.8048702,-1.6515497,-0.044789333,0.0066426964,0.4197776,-0.044101525,0.46522558,-1.1811097,1.9832233,0.5861896,0.084565766,-0.3929772,-8.081921,-0.466632,-2.9508123,-1.4617707,-0.10408618,0.42801479,-0.5242983,0.07957039,0.702737,0.06840617,-0.104567155,0.555717,-0.22168204,0.04527787,-0.25254717,0.9247881,-5.9381275,-0.14358509,-4.7168508,-0.5546155,0.053169113,1.0300952,-0.14378259,2.57937,
			0.17481841,-0.37443545,0.27107596,-0.2616086,0.1425963,0.13603431,-0.04079213,-1.0797287,0.053922914,0.591513,-0.23160845,0.020765908,0.20041622,-0.23881166,-0.26483792,-0.02885347,0.095367,1.0464288,-0.7701983,0.7397198,0.03948718,1.1210344,0.2505116,-0.5068957,-0.19722457,-0.9266178,-0.51250863,0.5031345,0.4785247,0.24286163,0.26175353,0.58033246,0.76404154,0.9310352,-0.047875397,1.4175503,1.9167743,-0.64028215,-0.9205204,-0.7652345,
			-0.8493926,-1.0706658,-0.57555693,-0.50881404,0.29692894,0.36255652,-0.10334221,-0.24083142,1.0009083,-0.63690346,0.9420542,0.24908042,-1.3562278,-0.85328287,0.17380477,-0.72592556,1.7561991,1.9413792,0.301024,-2.750806,-1.6968488,1.1950425,1.2358344,-1.2373227,-0.12368249,-1.3560588,1.0306789,0.5494853,-0.35365596,-0.43720445,-0.26969647,-1.1432495,0.5492154,-0.362273,0.247211,1.3066758,0.7101523,0.9192511,1.1068674,0.25775692,
			-0.005194538,-0.5903967,-0.44321293,0.6240133,0.13053098,0.38788524,-0.012706688,-1.3159714,-0.032763734,-0.46469757,-0.033733033,0.013768393,-0.3218859,0.026036656,-0.59853476,-0.8499275,-0.32393914,-0.02185013,0.35961556,-0.006506877,-0.07709017,0.07660599,-0.028548583,0.49419418,0.015209959,-0.08507646,0.68333095,0.017994106,-0.09642307,0.39535603,-8.87709,0.4682235,0.05042396,-1.1291257,0.18903515,0.3668526,-0.033439964,-0.13380109,0.056506947,-0.22300968,
			0.30467916,2.1968114,-0.90128803,-0.5944642,-0.5109247,0.43076694,0.45751315,-2.351839,1.7812325,-1.0708377,0.3133538,-0.9470929,-0.91401505,0.76566935,0.17962186,-2.5106452,1.9307488,2.3409336,1.0619416,0.52858824,-1.5827688,1.0572972,-0.92014766,-1.04268,-0.42241642,-0.0761369,0.5827237,0.30065718,0.9795723,-0.5629927,-0.15796381,0.70226085,0.7423891,0.24174272,-0.16328622,0.70272833,1.750482,0.7312234,1.6542615,-0.38893306,
			-0.21750867,-1.4484385,-0.6847113,-0.25697875,0.29868367,0.5436926,0.02765513,-0.39780295,0.17931063,-1.3520598,-0.23677328,-0.23254015,-0.28771576,-0.22493939,0.50223964,0.7332472,-0.5275597,0.06396364,0.444464,-0.17453268,-0.061748084,-0.7493977,-0.63964874,0.19485009,0.5652671,-0.53047806,-1.6716149,-0.08697453,0.048116792,-0.68097043,0.16740113,-0.11364325,0.0588741,-0.02141521,0.066085234,-1.7631977,0.039349608,1.5602483,-0.21885414,0.8957907,
			-0.27139652,0.24520984,-2.6037283,-1.2729852,-0.038890176,0.17495859,-1.2164007,-1.2787961,-0.7383006,-0.49184915,-5.1033125,0.19260688,0.4937021,0.6080755,-0.31624246,-1.1731462,0.082691215,0.074528836,0.7677552,-0.16456875,-0.010496669,-1.3401725,0.07064399,0.31191483,0.070556715,0.076634824,-0.019169489,0.41952136,2.7823935,-0.15389113,-0.85396415,-0.009596809,0.1700492,-0.056461412,-0.25578004,-0.27185047,0.0668457,-0.14663354,0.2264567,-0.7476225,
			0.96455485,-0.15388241,-0.16092417,-0.0814521,0.46358627,-0.082873866,0.9276486,-0.065066345,-0.4599267,0.69381195,0.49540445,-0.16405901,-0.8905797,-0.39840668,0.10863066,-0.08408265,-0.0031442665,1.2463357,7.6474505e-05,1.3502356,0.17280091,0.14677289,0.13669877,-0.24604066,0.6052768,-0.74442595,-0.057540733,-1.0912352,1.7345809,-0.38056728,0.25208458,0.120458595,0.6403328,0.05354795,0.28438902,-0.30625826,2.058485,0.91719365,1.6830434,-1.9667475,
			-0.18002443,-0.5927892,-0.18655396,-0.017523382,1.0898212,-0.13613579,-0.7299501,-0.56181645,-0.53930604,-0.55194384,0.21950054,0.6437759,0.32454988,0.2745049,0.1484415,-0.5348818,0.0804151,-0.21030961,1.4882277,-0.32846135,-0.50667673,0.2741037,0.40746257,0.17252728,0.11443468,-1.0446202,-1.1354921,0.32027283,-0.3658399,-3.903611,0.64220005,0.13025585,-0.20945995,0.09214483,0.6709918,-0.5411829,-0.4424285,1.0007838,0.23612174,1.6682734,
			-0.4756538,1.4049038,-1.135301,0.044003587,-0.78981364,-3.4369488,-1.248709,-1.0424088,1.5649854,-0.19322386,-1.5013108,1.6408476,1.4179143,-0.82209903,-0.013168135,-2.2182364,-0.62119675,-1.0945294,-0.7093216,-1.7184368,-1.4904912,-1.094828,-0.7735948,-1.574552,-1.7915277,1.2082136,1.4281942,0.7606385,-0.00892549,-0.8158825,0.86061406,0.66370475,-2.1232426,0.3663615,0.97369885,-0.18130426,0.003168278,2.3875864,1.0295334,1.7393088,
			2.3625588,-0.029181706,-2.7364256,-6.6447806,0.018594973,0.15685563,-0.0057046595,-1.9283067,-0.6501849,-0.2809966,-0.17114088,0.034177825,0.82664275,-0.17530134,-0.9174675,-0.7925432,-0.07864804,-0.019949611,0.46798262,-0.08027625,-0.08429716,0.60074174,0.057492595,0.14069103,0.13603216,0.24700074,-0.123917714,0.41510078,-0.14659663,-0.21771222,-0.75184476,0.1488129,0.1719136,-0.24442323,-0.2618403,-0.13975406,-0.040116966,-0.07419297,-0.055089265,-0.21157789,
			0.21153128,-1.483005,-0.8459109,-1.6979364,0.5970219,1.2184074,0.8348466,-5.5405097,-1.0945733,-0.6520184,-2.6878924,1.4121137,-0.123302996,0.3629214,-1.5461372,-6.0980477,0.19881421,-0.2824923,-0.72234505,0.20529391,-1.104503,0.20434146,-0.38104486,-1.296143,2.6373827,0.9284632,-2.0856094,-0.29569936,0.11112922,2.6787896,-2.7850928,0.49262613,0.04434218,-5.0058937,-0.3212808,0.16665754,-0.21761152,-1.0839015,-0.27400485,-0.79274446,
			0.30989644,2.022222,-1.25841,0.18245825,-0.29886708,0.19356802,-0.7504602,-1.458032,1.8191,-1.389495,-0.44400728,-0.8481675,-0.6372217,-0.79153425,-0.14680475,-0.7745715,-1.6117028,0.45717508,-0.6493138,-1.0075899,-0.19567348,-0.5444113,-0.54730344,0.3420142,-0.18476583,-1.5179508,-3.495702,0.32189876,0.42923924,-0.17334032,-0.17407346,0.9498577,-1.869658,-1.0883777,1.25642,-0.17656113,-3.1012578,1.5185599,-0.80569553,0.42660463,
			-0.23121195,0.25775105,0.4597752,-0.067812845,0.10538891,-1.6921581,0.023767475,-1.6025529,0.2533218,-0.21878427,-0.47696936,-0.14767432,-0.6864252,-0.7165617,0.0077686436,0.10836823,1.6456455,-0.39175746,-1.0583746,-0.97341883,1.6148564,0.18603489,-1.1184336,-0.484957,1.4795601,-1.1178802,-1.241189,-0.20481788,-0.6348339,-0.007994575,-0.3214475,0.6651836,-0.03364863,-1.5460285,0.351648,0.30328527,1.5640916,2.2956536,0.26404464,0.12988505,
			-1.7342658,0.32201302,-0.4978581,-0.33188632,-0.79795617,-3.3530853,0.027051546,-0.98489004,-3.1698277,0.92342955,-0.9124115,-0.07259597,-0.8122111,-3.5157044,-1.8414931,-0.23382741,1.1708163,0.15167183,-1.0582091,0.5635402,-0.09339378,3.2037733,1.2600114,-0.2846969,0.8915858,-0.04608496,1.8078561,-0.5483053,-0.089767076,0.47876206,-0.43309802,0.111082725,-0.6541012,-1.2987708,-0.53795135,1.2480986,0.45440373,4.111803,-0.29949182,1.181532,
			-0.24323387,-0.037992664,-1.4096352,-0.4082695,-0.5890188,0.07233971,2.2142882,-2.3775182,0.8073539,-0.59027755,0.00045903056,-2.997962,-0.7971486,-2.0226195,-1.2246696,1.3566555,-1.5285561,-1.0692961,-0.4232213,0.57926786,0.9571043,-1.0433915,-0.5435284,-0.7014193,-1.2552134,-1.0651399,1.3314646,-0.206809,-1.9290392,-0.576227,-0.338131,-0.9114073,0.09156985,-1.9110938,0.46727347,-0.70675445,-2.2173645,1.3346792,0.40727556,1.2976389,
			-0.09592519,-0.2809385,-0.8848267,0.44042858,-0.5385414,-1.6784993,1.7496387,0.17247652,-2.5765097,0.37098807,1.2735054,0.5560923,0.5299558,-1.0790612,0.7341252,-1.6445589,0.3612978,2.5890908,1.1204371,0.40136254,-0.15772043,-0.027808096,0.60673964,-1.0416281,0.8460409,-2.597696,-0.8713194,-0.40041992,0.21600705,0.2872425,-0.656253,-0.39738637,-0.0034314604,1.6866002,0.83896255,-0.51999915,-1.5174071,1.0208874,-0.16928224,0.6145103,
			-0.41057363,-0.08662945,-0.95919394,-0.9653193,1.2382512,-0.54129076,0.5422681,-1.1423931,0.75579137,-0.16302167,1.8522295,-1.5809152,-1.9312116,1.0853877,0.025245128,-1.2568269,0.13011754,-1.4762964,-0.34280697,0.85488945,-0.3451023,-0.5777122,-0.7338428,-1.0132549,0.29370907,-0.85262954,0.06445156,-0.4395549,-2.1149151,-0.51646113,-0.018675793,-0.40085042,-1.3283575,-1.810652,-0.08415205,0.43059686,-0.5260641,0.86951613,-1.1203927,0.4582142,
			0.73059,-1.0118222,-0.49997342,-1.1383398,-0.1610067,0.38306832,2.2672937,-1.600215,1.1828068,-0.3647505,0.5449969,-2.0946739,1.3582906,-0.814741,-1.1997721,0.87208545,-0.17178221,-0.77090734,-0.64317226,-0.042538967,-0.54864967,-1.7965513,-0.59863573,1.3107833,0.70750976,0.091679186,-0.05220404,-2.4605618,0.38888645,0.17369208,0.024911204,0.05510907,-0.76203084,-0.8439331,1.2590191,0.8646541,0.20302898,1.2661211,3.9073982,1.0063324,
			-0.42078382,0.794641,-0.016320756,0.413893,-0.8315054,-0.70568556,-0.3475413,-0.37697756,0.052567173,-1.0610459,-0.00056408823,-1.182014,-0.33560947,-0.12404667,-0.72438854,-0.25087103,-0.6881521,2.1870546,-0.3712361,0.9322013,-2.0415723,0.27297318,-1.3376541,-0.86488295,-0.0892417,-0.22481637,-2.4870262,0.20187408,0.62193024,0.5248792,0.46982515,-1.0394872,0.5655109,-0.07280572,0.7400684,-0.8161291,2.6151369,2.1103241,-0.4971983,-0.4023414,
			-0.018900385,-1.0053438,-1.3814632,-0.7231124,-0.47602475,1.1617106,1.6387074,-0.5038865,1.9300727,-1.5845134,1.5319915,-0.6610822,-1.4405677,-1.0494372,0.9567275,-0.03642967,-0.65066,-0.14295827,-2.2206156,0.82941645,1.7602987,0.04638045,-0.8466258,0.433553,0.39549628,-2.3165636,1.5482718,0.21256568,-0.93070495,0.5955885,-1.6178206,-0.16106394,-0.074202135,-1.5418972,-0.79720354,-2.0855892,0.48225287,1.9333732,1.0690949,1.0620837,
			0.47706935,-0.9614487,-0.49016118,-0.06710273,2.7682753,-0.58916014,-0.8740754,-0.8655554,0.18224972,-0.8021417,-0.22334114,-0.46056554,3.1200001,0.21955058,0.5458939,-0.5901774,-0.55002135,1.4849164,-1.6026374,4.2532206,-0.40210515,-0.54374045,0.30001274,-0.6565721,1.195243,-1.0230254,-1.6194282,0.091469094,0.040669434,0.6558772,-0.025203627,3.5987537,0.3548921,-0.2031744,-3.373329,0.5461691,-3.4613752,-0.42658648,0.18127796,0.03739465,
			2.3615727,-0.4163666,-0.4016414,-0.76127046,-0.018990522,0.08079331,-0.94499904,-0.45292386,-0.6006331,1.8968759,-1.1707339,0.553993,-1.8166254,-0.8835568,0.54666466,0.07364274,-0.2524829,-1.0444146,-0.6046231,0.112535864,0.012633389,-0.98320246,1.2550995,0.3132067,2.1021345,0.10323055,-0.05002148,0.07614647,-4.070236,-0.7904585,-0.2838893,0.3191918,0.59879446,-0.27712503,0.5337029,0.13240072,-0.09118062,1.7759625,0.4811524,-1.5163689,
			0.622396,0.74427587,-0.493816,-0.21743055,0.07653465,-0.06160406,1.1024956,-0.06804212,0.28872198,-1.4078162,1.2581712,-0.6831082,-0.14867304,-0.97794354,-0.50646967,0.27276787,-0.11621945,-0.293718,0.8745967,-0.5854813,0.101068966,0.43116906,-0.81137294,-1.8113261,0.12427568,-0.81711185,0.545235,-0.8541328,-1.6684444,0.6663172,-0.50691104,0.30871478,0.7515365,0.2249325,0.5149383,-2.5349472,-0.4224653,0.030822527,-0.6128891,0.8477684,
			1.9136333,-0.22034855,-1.1340473,-0.08043509,0.24750015,-0.9126044,2.331755,-0.27591005,-1.1889192,0.8071476,-2.1270626,-0.37134984,-0.30983323,-1.0847157,-0.69564664,0.8786536,0.02161659,1.7608243,0.27868083,-0.40640205,-0.06798192,-0.958762,-0.39135128,-0.27553383,1.1502168,-0.78546625,0.07417763,-1.45577,-0.008716931,0.19534244,-0.4220441,-0.0039520096,1.5719122,0.6580679,-0.20929253,0.24690074,0.43800658,0.8245267,0.32441574,0.17312615,
			-0.592696,-0.47197044,-0.5657782,-0.398805,0.30909985,-0.14062658,0.048452314,-0.5645673,0.70172906,-0.30273053,0.16440062,-1.9988405,1.0581143,0.3597147,0.66077274,0.24373701,0.16622506,-0.34237957,-0.5381657,5.5898833,0.1838614,-0.8641937,-0.26653317,0.45648563,1.720757,-0.909998,-0.2668956,0.033883892,-1.0945529,-1.864982,-0.06858029,-0.1885328,-0.18206432,0.22283667,-0.0745285,-0.21659954,0.6225196,-0.42713287,0.08810243,0.05803067,
			0.16585475,1.2855815,-1.4608034,-1.6751195,-0.7103058,4.213689,1.7288405,-2.8370032,-1.3400016,1.196066,-0.58889043,0.07775854,-0.74692607,-0.3218661,-0.7819386,-4.4189024,-0.9006488,0.15589465,-1.2514796,0.07934625,-0.7679675,-0.7140583,1.7745339,-0.007053931,-0.40240774,-0.605538,0.7188715,-0.35857671,-0.16496162,0.023930412,0.6679558,-0.8356308,3.7915978,-2.0810642,-0.82458276,0.42217958,1.3779707,2.9038715,-0.04160132,-1.4184389,
			-0.44434047,0.76081973,-1.0166298,-0.42544243,-0.6232251,0.048128728,-0.6292784,-0.43392688,0.14945257,-0.40635136,0.8336564,-2.3891582,-0.13841236,-2.32678,2.4140139,1.4427155,-0.92658144,0.7906493,-1.8176696,-1.9953376,-0.64994794,-0.4505544,0.16675344,1.9736328,0.5483083,-0.3530985,-0.3113319,-0.5401192,0.70253026,-0.66894734,-0.27350017,0.7006144,0.12193603,-0.6963472,-0.39823788,-0.35249716,-1.5215725,0.4746658,-0.18746601,-0.6278983,
			-0.51804537,1.2422494,-0.62577075,0.0022400913,-0.6694541,0.42329678,0.2980717,0.17771171,0.74466515,-0.1361867,0.170212,1.2893091,0.31866163,-0.6848353,0.049056556,-0.16334486,-0.32311636,-0.28542086,-0.25078055,-2.6582718,0.5351288,1.0943056,0.54138577,0.12983774,0.6547396,-0.76573646,-1.2815017,-0.084122054,-0.9093117,-0.64686,0.0031825423,0.97178566,-0.46010774,0.23711362,0.5284559,-0.00831618,-0.9418999,0.93765575,1.0474385,0.6121032,
			-1.6455544,0.13292158,0.78113526,0.6638629,0.62541664,-1.4525403,0.1285358,-1.625485,-0.9507209,-0.23121609,-0.18132465,-1.173343,-0.6094196,-2.0722575,-2.0962403,0.14474072,0.05997397,-0.6610875,0.18054174,-0.4459339,0.21923843,-1.1712192,-1.0977091,0.68045557,-0.4923107,-0.33303413,1.2001036,0.2501488,0.056881692,0.17357165,0.5053751,-1.5331533,1.0458385,-1.0442419,0.31973508,-2.8645787,-1.5524505,0.072143525,-0.113428116,2.5139468,
			0.18375036,-0.458828,-1.3973668,-1.2849848,0.45112205,-6.497833,-0.14507931,-1.8599024,-2.9109783,0.09544876,0.57741386,1.2183721,-0.810851,1.04451,0.87881047,-3.5860152,-0.025322948,-1.5214552,-0.2165654,-0.57819384,0.70869315,1.2912796,0.545244,-1.8571202,-0.056658905,-1.2596276,-0.69981396,-0.13509524,-0.39297903,-1.8168849,0.3259205,-0.41223696,-1.1347861,-2.348323,0.49873665,-1.3539585,-0.44671014,1.5591713,0.6797637,1.6455548;

    h3_out <<
			-5.066469,-0.72864825,0.9048519,-3.6283038,-0.5757647,0.35573074,0.31988955,-1.2900298,-0.4064239,-1.9649595,0.47610292,0.9914164,-2.4382503,-1.6987063,-1.3899119,-4.2799253,-2.019606,-0.3789008,-1.097573,-1.6802263,-0.2088789,-6.6277637,-2.5320373,-0.12482004,-1.6236578,0.44890237,-0.98377776,-3.8525004,-3.9114845,-2.2629745,-2.4396505,0.39553836,-2.3844857,-0.43017504,-6.484232,0.1572909,-1.4363699,-0.35982758,-0.7785212,0.48602974,
			-4.564518,-1.8352789,0.43570045,-2.6836944,-0.29240805,-1.5686713,-0.044348888,-0.9893974,0.9684862,-0.92922,-0.0040157754,0.35314435,-2.4977844,-1.5232763,-0.9508314,-4.112784,-1.1953729,0.60954267,-0.078497015,-1.636283,-0.26102576,-2.4709759,-2.0456073,0.09936982,0.52714384,0.35266614,-2.8100843,-3.5718548,-1.8590106,-1.9457445,-2.4813108,0.6554414,-1.8258998,-0.99076444,-7.1938214,0.4314963,-2.701896,-0.0522328,-0.65097755,0.5646814,
			-4.9659014,-1.759489,-0.050737027,-1.6968994,0.011268607,-3.5233033,0.021768095,-0.44589344,0.49274138,-1.2015433,0.12804547,-0.2864892,-1.3693806,-0.91388446,-0.023633417,-3.8558438,-1.7069775,0.4602374,0.40259773,-1.550792,-0.14629222,-0.4017814,-1.4298357,0.13635464,0.0272985,0.3934775,-1.6219004,-3.3517668,-0.3321262,-1.7150972,-3.1143548,1.0779083,-0.9683568,-0.71813357,-5.582312,0.15030745,-2.122019,0.025024207,-0.29000115,0.054240774,
			-2.8834403,-3.044717,-0.7839111,0.13907695,0.14714232,-3.2600603,-0.17392464,0.18136847,-0.4911806,-0.752936,0.75535756,-0.55647445,-0.75730634,-0.37723982,0.11408948,-3.5811942,-2.3181489,0.04363709,0.08029339,-1.619274,0.59293276,0.2138197,-0.2284485,-0.07032677,-1.2421453,0.28002173,-0.7687048,-2.0111117,0.47239178,-1.2490362,-4.356485,1.5686675,-0.6377781,-0.21504007,-2.1793575,-0.18452992,-1.0825119,-0.3228541,-0.36997035,-0.8417068,
			-3.5995529,-2.308847,-1.4490453,0.22726436,0.0049959887,-3.1213048,-0.36713707,0.72649795,-1.2217467,0.15671428,-0.11300097,-0.76985365,-2.6899805,-0.70165336,0.5637223,-3.871171,-1.8063943,-0.3069444,-0.5139096,-1.571965,-0.24746823,0.114093244,0.29302827,-0.4563089,-1.2034832,-0.8668896,-0.22948481,-0.4755461,0.099697106,-1.1734747,-3.5048468,1.2399787,-1.8083608,-0.016958164,-4.2784333,-1.7258024,0.339158,0.12122021,0.14020452,-2.4170847,
			-3.7119656,-3.0678437,-1.3400795,-0.32713413,-0.4235897,-3.1762726,-0.9542624,1.0324311,-2.1795232,0.46803877,-0.2929179,-0.65433395,-4.3962474,-1.3697461,0.21999364,-4.500502,-1.3798696,-1.7176095,-1.6806506,-1.3870875,-0.7981681,-0.12439263,0.66103613,-0.031243593,0.1032603,-1.7370406,-0.29286975,0.27850768,-1.5390531,-0.028213006,-2.9617922,0.5478789,-1.5766658,0.24947853,-5.610118,-1.353354,0.65381616,0.46159878,-0.033629734,-2.7615871,
			-2.8575318,-2.77709,-1.8221307,-1.0218134,-0.576815,-1.3886386,-1.0841844,0.8476549,-2.849993,-0.59426755,0.54802614,-0.8704128,-4.332569,-1.69142,0.2617145,-4.495811,-1.042772,-3.5117302,-1.9495533,-1.5384439,-2.7065709,-1.0599285,0.6903062,-0.035128165,0.93989944,-2.2202163,-1.1556532,-0.17694353,-4.378311,0.55259544,-3.1652522,0.34960005,-0.41133225,-0.07797261,-5.0758657,-0.9403646,-0.08956767,-0.2812862,0.102486506,-2.128604,
			-2.9067824,-0.23706836,0.6086285,-2.120736,-0.24679251,0.6862278,0.7460171,-0.29065242,-0.5556715,-1.9745668,-0.24661945,1.1561435,-2.3009865,-1.2943342,-1.2729052,-4.6862383,-0.54782957,-0.20891666,-2.7053156,-1.7582808,-0.5026488,-5.330251,-0.77475643,0.31829157,-3.292397,0.08427784,-0.31746408,-2.761456,-3.4958997,-1.3691901,-2.3124702,0.020374732,-2.8219068,-0.5965081,-7.457097,-0.024878195,-1.2799203,-2.6885412,-1.0016732,0.08384684,
			-3.4996521,-0.4797889,0.38990024,-1.6692903,-0.114167266,-0.17837948,0.65513444,-0.23873363,0.78195584,-1.0347952,-0.41916955,0.49942163,-2.4903038,-1.0699471,-0.6023268,-4.8137484,0.13427937,0.5560641,-1.4043764,-1.8170476,-0.26939368,-3.2732368,-1.2759295,0.20220953,-1.8397372,-0.40306637,-1.6467505,-2.6667652,-1.155092,-0.57775605,-2.4326282,0.20637003,-2.4720626,-0.5722903,-8.249333,0.1840183,-2.4264576,-0.5391113,0.011115397,0.42897916,
			-2.6377244,-1.2481275,0.33643055,-0.46500707,0.17763819,-1.2207175,0.82341516,0.07970955,0.44778162,-1.1129196,-0.4540959,-0.19928415,-1.658205,-1.0757018,0.16426706,-4.229575,-0.051916704,0.4777126,-0.29761133,-1.7849325,-0.3525911,-0.77645874,-0.60429627,0.33707976,-1.8447075,0.17457958,-2.245628,-2.11723,-0.08348836,-1.563368,-3.1046643,0.48468867,-1.9404451,-0.49132338,-6.281776,0.23719971,-1.7530782,-0.20954627,0.19063441,-0.2023852,
			-1.2344173,-1.5926946,-0.33601618,0.6978991,0.27978292,-2.0921915,0.5727821,0.38357458,-0.64450586,-0.88955873,-0.12282073,-0.44473547,-0.8433343,-0.28323856,0.20244019,-4.647585,-0.15152168,0.03674903,0.3038445,-1.7838382,0.27197048,0.10086051,0.073114865,0.37649223,-1.4353297,-0.1269786,-2.2037222,-1.259459,0.4446026,-1.1045096,-4.354524,0.5563513,-1.6573989,0.0031016865,-2.7313547,-0.15680523,-0.7041346,0.05351474,0.13725825,-0.7973088,
			-2.1852481,-2.1806989,-1.0631429,-0.15397727,0.4645778,-2.1307578,0.48976493,0.5477782,-1.5295086,0.110510305,-0.5701881,-0.70228595,-2.687976,-0.93323237,0.24200094,-4.728028,-0.20159407,-0.8715149,0.07352437,-1.7311646,-0.16768968,-0.009326904,0.4179852,0.2498829,-0.48451117,-0.5792082,-1.672608,-0.17209487,0.108621046,-0.56932503,-3.5634665,0.38663402,-1.2837887,0.29916376,-5.1948233,-0.98549944,0.40705195,0.3721872,0.14959128,-1.8370128,
			-2.2205596,-1.7860329,-1.437282,-1.1386172,0.2632016,-2.374305,0.16724579,0.5871681,-1.5873305,0.46224576,-0.609683,-0.48137623,-5.0163703,-0.7198546,-0.049836878,-5.059243,0.08421891,-3.4551442,-0.6418689,-1.7955755,-0.2700292,-0.42111364,0.44540137,0.34892976,0.20436825,-1.3613486,-1.7363498,0.0334827,-1.2788389,0.4703484,-2.8698847,0.0023643067,-0.2524079,0.2854936,-6.4507833,-1.2238383,0.21897964,0.44695225,0.03119902,-1.6937034,
			-1.4659535,-1.6324441,-2.3576362,-1.9842569,0.44660473,-1.1817949,-0.7029857,0.06535773,-2.2823198,-0.33678186,-0.039271224,-0.75485814,-4.0710497,-1.1346129,-1.9450728,-4.4229336,-0.08919233,-5.0086493,-0.44361854,-1.7981969,-2.456297,-1.1593997,0.8420695,0.68518233,0.89179677,-1.3921772,-2.128625,-0.71617913,-3.5384781,1.0711714,-3.1143084,-0.19411403,0.28317726,0.323413,-5.531905,-1.2981355,-0.63888776,-0.4450931,-0.04055654,-1.6217512,
			-2.9111872,0.66865027,-0.09371834,-1.0711807,0.295625,0.5386804,-0.06348152,0.13793606,-0.5307514,-2.0493946,-0.2922045,1.0966928,-2.3078673,-0.49599093,-1.5044106,-2.3857613,-0.4927296,-0.12372147,-2.2477067,-0.7447418,-0.4090029,-6.058105,0.34828806,0.039704125,-2.3096952,0.34661067,0.20171906,-0.87471163,-3.1399117,-1.6164238,-2.398054,-0.5040894,-1.9396544,0.1294534,-7.018856,-1.251145,-1.1449901,-4.2637415,-0.69699216,0.2511141,
			-2.2776694,0.20255679,-0.071431994,-1.0455253,0.11826602,0.30109906,0.21504724,-0.014762419,0.83371913,-1.3403507,-0.45788828,0.3947681,-2.4776235,-1.0640314,-0.6073985,-2.7849362,0.37173796,0.51036245,-2.4578128,-1.1085124,-0.3744244,-3.338806,-0.29165733,-0.18622473,-1.7077838,0.13717979,-0.14597625,-1.3599249,-1.1269498,-1.5401961,-2.3648434,-0.32834136,-1.9280891,0.03572975,-8.362819,-0.25509197,-2.3532908,-1.8850158,0.28190327,0.3221707,
			-1.6418117,0.14215115,0.23382285,0.056738496,0.20074575,-0.024153627,0.21688832,0.12654144,0.26544398,-1.2727965,-0.33069772,-0.19220483,-1.653929,-1.0333784,0.41120288,-2.9945438,0.32216978,0.4686133,-0.97725993,-1.3113561,-0.44280228,-0.60223126,-0.22384562,-0.20215508,-1.2130098,0.06877584,-1.0105003,-0.8190626,-0.07818641,-1.8167368,-3.1108913,-0.049897246,-1.5890616,0.17132515,-6.413648,0.22864981,-1.5753089,-0.27175143,0.349444,0.055757016,
			-1.0180184,-0.49522266,0.21370901,0.51472706,0.410449,-0.22457054,0.2455303,-0.0012376684,-0.8527564,-0.92724174,0.06683295,-0.5455253,-0.7561275,-0.5216918,0.37420017,-2.8819494,0.031165611,-0.01653709,-0.046335958,-1.1390749,0.08285616,-0.008097541,0.23733397,0.041639443,-0.38865313,0.19444236,-1.505061,-0.22159763,0.31598788,-1.0757484,-4.4219666,0.039702583,-0.9770477,0.39812538,-2.7165432,0.12616865,-0.39021593,0.17530087,-0.08156684,-0.6373778,
			-1.2258346,-0.11434379,-0.3506555,-0.5273586,0.36185166,-0.72357166,0.44268894,-0.23233305,-1.6030804,0.11899472,-0.45584813,-0.5343473,-2.5770314,-0.78207475,0.14296499,-2.8321555,0.013847609,-1.0761735,0.42348698,-0.95248276,-0.31670022,0.1599797,0.3455568,0.030767005,0.027928397,-0.6154487,-1.6316718,0.1893544,0.12982379,-0.22035442,-3.5862992,-0.18230034,-0.3302607,0.33301896,-4.4777355,-0.34104523,0.30681625,0.49778116,-0.36715704,-1.8080581,
			-0.9321408,-0.20155556,-1.2909151,-1.8510059,0.36200663,-0.86750776,0.5691239,-0.51126724,-0.94373184,0.5692421,-0.34842137,-0.6356971,-4.4956284,-0.82434803,-1.4112989,-2.768039,0.030294217,-3.5147257,0.3739414,-1.0927173,-0.6380372,-0.24667121,0.38919887,0.13466513,0.1315293,-0.90964836,-1.2089133,-0.005289477,-1.0081987,0.4842588,-2.797505,-0.43321726,0.44063827,0.22764263,-6.92088,-0.8034622,0.25904474,0.29951224,-0.68988097,-2.4225416,
			-0.13303189,0.3844801,-1.9724308,-1.0546031,-0.024190221,-0.42508417,0.15701829,-0.60330164,-1.9511833,-0.27765062,0.10848023,-0.7870599,-4.402511,-0.94608545,-4.645114,-2.6649182,-0.25958315,-4.1258335,0.03257109,-1.14152,-2.3383007,-1.4335662,0.54783916,0.3656994,0.0119821895,-1.2446724,-1.8313153,-0.4687508,-2.75584,0.7857292,-3.1744027,-0.44890475,0.6276326,0.30260256,-5.2607813,-1.2993047,-0.78034145,-0.3960763,-0.6026316,-2.441667,
			-0.9947264,0.18322983,-0.5550728,-1.060177,0.5783022,0.3708603,-0.50709635,-0.11890543,-0.15365483,-2.861998,0.3802805,1.1491143,-2.7003646,0.10818728,-1.7469363,-0.3396474,-0.47360098,-0.6329731,-1.2875836,0.15668929,0.36993876,-7.9242325,0.57464945,-0.8652747,-1.608661,0.083013944,-0.34739694,-0.27869707,-2.49312,-2.0272703,-2.5348802,-0.44345972,-0.119847804,0.34879377,-8.066865,-2.714967,0.28215876,-6.1781306,0.08058568,-0.049675565,
			-1.0797958,0.7175165,-1.0917549,-0.5598647,0.20366813,0.073052436,-0.74182945,0.16079563,0.80028695,-1.1555394,0.09281202,0.19999452,-2.9678433,-0.47219884,-0.26943946,-0.6054508,0.4786321,0.41177043,-2.1387856,-0.09174163,0.2214292,-2.828754,-0.4768211,-0.5500185,-0.8702744,0.065800354,0.5397902,-0.46401536,-0.8702527,-1.4880413,-2.3544981,-0.35721233,-0.76816154,0.20671967,-9.117831,-1.1038567,-1.6247586,-2.9096975,0.4586633,0.2570152,
			-0.75000435,0.2883907,-0.057069942,0.080458224,0.16070785,0.26612732,-0.55587906,-0.19837879,0.31942502,-1.3995459,0.37657705,-0.23085776,-1.8413118,-0.7045275,0.4460509,-0.5076857,0.44709408,0.3781605,-1.8785443,0.07466405,0.14997527,-0.563333,-0.3545089,-0.7873485,-0.06609356,0.26073968,0.035750583,-0.06682433,0.13967983,-1.4595449,-3.0190654,-0.414962,-0.49297813,0.28025973,-7.159481,-0.20349099,-0.9153158,-0.76600003,0.058100015,0.1839081,
			-0.32307386,0.12832479,0.37618285,0.047192786,0.16082394,0.0945035,-0.43431023,-0.67006356,-0.7648963,-0.88205445,0.7490044,-0.52042323,-0.9726617,-0.077392966,0.4129394,-0.61167675,0.26181754,-0.15798506,-0.6770288,0.045639392,0.83003026,0.09024572,-0.025383348,-0.66385907,0.16054043,0.33264118,-0.67326415,0.29758114,0.36110878,-0.56779325,-4.369769,-0.29967067,-0.25032225,0.15663919,-3.1023445,0.27952346,-0.13502972,0.01843654,-0.561199,-0.24823824,
			-0.25918016,0.25342113,0.3184843,-1.4684962,0.29098248,0.105682276,0.15238577,-1.0872563,-1.4225432,0.3123708,0.44547328,-0.8504538,-2.9116247,-0.44545203,-0.36011776,-0.57572836,0.06357053,-1.1172768,0.14471811,0.021909975,0.14983384,0.33316267,-0.16381192,-0.5381524,0.085211255,-0.17908359,-0.7299123,0.19168542,0.20051374,-0.058474608,-3.443034,-0.5730888,0.15274799,-0.11302132,-5.673668,0.06789933,0.41612667,0.28012425,-0.76587445,-1.3296833,
			-0.015736295,0.7245074,-0.32134238,-2.117763,0.1104507,-0.10364929,0.38280585,-0.61285466,-0.37246162,0.58943796,0.20039997,-0.52321833,-4.639929,-0.2717161,-2.941105,-0.6822413,0.04027074,-3.3599553,0.6575314,-0.034684256,0.020470778,-0.07509228,-0.30151314,-0.33124238,-0.51695794,-0.7557943,-0.85513103,-0.33061323,-0.6901673,0.35409275,-2.6524637,-0.48568305,0.41095835,-0.31914777,-7.5130186,-0.51124173,0.17519651,0.16995287,-0.9119903,-2.500452,
			-0.06213043,0.5183889,-0.8738076,0.22464791,0.031116093,0.14535971,0.7456966,-1.0322108,-1.1461674,-0.075629726,1.0723476,-0.7524865,-4.1724234,-0.030991402,-5.3811865,-0.4193304,-0.15283385,-6.686167,0.14796145,0.15774986,-2.4307754,-1.6168329,0.08587047,-0.53262615,-0.98402846,-0.9347596,-0.59544253,-0.110401206,-1.9113255,-0.16031545,-3.163989,-0.42487016,0.5419817,-0.45009485,-6.261315,-0.63662064,-0.328794,-0.83601916,-0.7760413,-1.0043523,
			0.63306653,-0.12030104,-1.8449508,-0.54861957,0.376123,0.12804414,-1.8793756,0.21995944,-0.3945338,-2.405339,-0.34527138,0.799943,-2.3703368,0.25829846,-0.76981694,-1.3638906,-0.6519524,-0.47139385,-1.7981813,-1.7936236,-0.22856212,-6.314269,-0.3039836,-1.7121884,-0.8539401,-0.19903824,-0.6478007,-0.8497609,-2.334462,-1.9162469,-2.635935,-0.5008291,0.2192578,0.7673553,-6.908171,-4.873073,-1.0240754,-4.9870872,1.0489619,-0.6757964,
			0.12324533,-0.35660943,-1.9413793,0.050914463,0.15658249,0.109436296,-1.3979173,0.4343798,0.618681,-1.6611643,-0.34875417,0.22037771,-2.5266368,-0.15927328,0.04440302,-1.5828315,0.14192216,0.3802881,-2.0415342,-1.8882244,-0.097089574,-3.029344,-1.2272754,-1.7410532,-0.16527112,-0.2117559,0.37619063,0.18949135,-1.0791864,-1.4280233,-2.5137033,-0.36810288,0.29767004,0.2659411,-8.563503,-2.074089,-1.2940427,-2.7180004,0.26318097,-0.05631091,
			0.14296491,-0.33553717,-1.0699254,0.39020666,-0.09391507,0.2672739,-1.5394006,-0.11964929,0.06919729,-1.603193,-0.21951939,-0.09208081,-1.4407002,-0.32816944,0.58994406,-1.5989472,0.26285583,0.4146633,-1.7935194,-1.7537067,-0.33372265,-0.38330004,-1.0203323,-1.9012306,0.13829182,-0.24550101,0.44919392,0.38720548,0.10836674,-0.7957054,-3.161289,-0.29249594,0.2689077,-0.0327027,-6.224197,-1.1974674,-0.5477366,-0.5704768,-0.5169867,0.44618016,
			0.25620788,-0.54411775,0.092294015,-0.28478423,-0.34262663,0.42944422,-1.3162102,-0.71486187,-0.9638717,-0.87723947,0.25619656,-0.3998585,-0.668262,0.06505139,0.29550135,-1.6718283,0.03981604,0.09870411,-0.9796657,-1.8302027,-0.010997911,0.113263674,-0.20143376,-1.6271102,-0.1159802,0.18828534,0.14826974,0.11580306,0.40135574,-0.039214566,-4.3927364,-0.31251067,0.27817532,-0.66821575,-2.9045825,-0.25768587,0.26796564,0.19754036,-1.0767183,0.30083913,
			0.19709511,-0.016979223,0.49402604,-2.0392249,-0.0977439,0.54139507,-0.8549601,-1.1026194,-1.7135857,0.26368645,-0.2535952,-0.63799804,-2.6404798,-0.005624535,-0.5425193,-1.8367816,-0.2026931,-0.49900755,-0.06951361,-1.972952,-0.56234586,0.33076367,-0.3048621,-1.5459299,-0.8340814,-0.57413495,0.039199904,-0.43083957,0.37840986,0.10894846,-3.4301627,-0.39196327,0.32477725,-1.0585344,-5.220043,0.13742372,0.29322726,0.3591873,-1.281253,-0.54029185,
			0.19438757,0.17362316,0.3648906,-2.2450151,0.2618848,0.47331765,-0.16808674,-1.1527941,-0.5637341,0.69913846,-0.35884988,-0.76358294,-4.422604,0.4380077,-2.9656239,-1.737582,-0.28792635,-2.2660084,0.38761243,-1.7634312,-0.7424775,-0.23659329,-0.31089497,-1.1438587,-1.2741811,-1.0888358,-0.23924704,-1.1875318,-0.4887955,-0.070485026,-2.7103121,-0.37621504,0.2735641,-1.4567463,-7.018675,0.1308321,-0.22260885,0.19681372,-1.3323263,-2.126773,
			0.21110107,0.6578803,0.02902457,0.23826174,0.5935649,0.23712394,0.2559738,-0.9296723,-1.0842519,-0.24454495,0.16338539,-0.65679824,-4.2775035,0.809065,-4.4674926,-1.5070037,-0.58996236,-5.029199,0.4572432,-1.4961777,-2.4547067,-1.4195665,-0.22263122,-0.53562,-1.1859413,-2.0750587,-0.0883616,-0.9324509,-1.7890646,-0.84858567,-3.066029,-0.44344145,0.27799097,-1.8375365,-5.5665483,-0.22340973,-1.1616555,-0.7972975,-2.0833604,-2.2790356,
			0.8083764,-1.676294,-2.656873,-0.12812833,0.25972983,0.25546357,-1.9896201,0.3395634,-0.307848,-2.7241051,0.07672492,0.6114452,-2.3545778,0.2827602,-0.56358117,-2.4492164,-1.0808927,-0.51245713,-1.189758,-3.3594248,-0.1793577,-6.516746,-1.9865793,-2.6648831,0.18716192,-0.7698762,-1.1930707,-0.13717909,-1.9766968,-1.4449288,-2.6048226,-0.6803379,0.83173037,0.768704,-7.142134,-5.742948,-0.44379357,-4.526828,0.7806358,-1.3430487,
			0.4484495,-1.6914545,-2.6371365,0.51713496,-0.47285625,-0.11766872,-1.8287288,0.69212776,0.53689027,-1.572409,-0.25029075,0.41978845,-2.6832516,0.2195062,0.18150088,-2.7182417,-0.33513263,0.33808482,-1.1798267,-3.473373,0.005058494,-2.874324,-2.5507393,-2.1108954,0.47666326,-1.0821116,-0.098348424,0.7211887,-0.89828044,-0.9026934,-2.391911,-0.2952383,0.68237114,0.050248515,-8.153231,-2.351864,-0.6789544,-1.672263,-0.5759209,-0.7309598,
			0.3157723,-2.2112713,-2.153024,0.1103765,-1.2447337,0.24112536,-1.5607157,0.13932204,0.14416683,-1.4042239,-0.22972438,0.23282593,-1.6773758,0.031894512,0.5039114,-2.6853564,-0.21366693,0.4542295,-1.5181814,-3.326255,-0.34381807,-0.44745043,-1.712997,-2.021861,-0.13232619,-0.46155518,0.3297045,0.48070464,0.097135246,-0.15614648,-3.1725018,-0.34334487,0.65960026,-0.66238654,-6.4059944,-2.0939825,-0.2624317,-0.09105852,-1.8351003,-0.0793833,
			0.43882352,-1.7880942,-0.8110053,-0.61907065,-2.2572608,0.49555355,-1.4148326,-0.18490225,-0.9332952,-0.7539056,-0.030784661,-0.24427143,-0.81946915,0.3885746,0.11525071,-2.7785842,-0.07839989,0.24356766,-0.7117423,-3.445141,0.07659367,0.22539398,-0.6713229,-1.9655775,-0.9513521,-0.059078872,0.27330926,-0.5752019,0.4444996,0.2639993,-4.3506513,-0.13274755,0.37509304,-0.9221161,-2.8319106,-1.152491,0.2602855,0.30833796,-1.7170177,0.51824045,
			-0.012931064,-1.5896839,0.20576511,-2.2845716,-1.2189497,0.6818577,-2.1354413,-0.471954,-1.5688192,0.3265019,-0.37965566,-0.5130798,-2.555008,0.47892433,-1.1040425,-2.592855,-0.47749224,-0.015581473,-0.26511437,-3.352899,-0.70361435,0.39390752,-0.65107363,-1.6452227,-1.7472023,-0.8372873,0.38972914,-1.6474932,0.55823976,-0.12435679,-3.4462883,-0.45871437,0.23494598,-1.3841599,-5.1011734,-0.27480924,-0.16777238,0.38551584,-1.8732275,0.21450052,
			-0.33144477,-0.9765095,0.6331102,-1.7798877,-0.3041218,0.5557007,-1.4009063,-0.6866137,-0.78442204,0.8353954,-0.38865843,-0.66268075,-4.6299944,0.9832801,-3.6774104,-2.7040558,-0.55909336,-0.57525074,0.30912578,-3.5498223,-0.69963497,-0.21128416,-0.67752826,-1.7411809,-1.4299122,-2.4855695,0.28358462,-2.5790493,-0.24915664,-0.66790515,-2.8338718,-0.34643462,-0.16074574,-1.5635763,-6.760915,0.18587194,-0.86748505,0.11760614,-1.3892018,-0.86986375,
			-0.11041668,-0.15913086,0.68259895,0.14829184,0.48193952,0.58785576,-0.39329386,-0.7659657,-1.3741126,0.028590888,0.0948258,-0.60042906,-4.164342,1.4150995,-5.1626763,-2.5946863,-0.97948545,-1.9580715,0.16741943,-3.2206833,-2.5704565,-1.4044671,0.17779697,-1.1434377,-0.8382727,-3.4376764,0.29397866,-2.8673465,-1.3557508,-1.4387987,-3.123942,-0.45571363,-0.25426397,-2.7709076,-5.397621,0.2498164,-1.649612,-1.1625732,-2.0761132,-2.1664774,
			0.090190016,-3.3225737,-3.0315745,0.75935507,-0.016570205,-0.3982433,-2.7143378,0.014887195,-0.32908472,-2.7443922,0.65397173,0.9870841,-2.4981534,-0.04153318,-2.2273525e-06,-2.4082286,-1.9843607,-0.31811953,-0.9717846,-3.306561,-0.15722907,-6.035765,-3.437609,-0.89078933,0.8560902,-1.7502321,-1.3403033,0.29673874,-1.5325332,-0.8805289,-2.4833016,-1.3662107,0.59233385,0.49840438,-7.086431,-8.007168,0.17569871,-2.7174444,-0.17718884,-2.7025306,
			-0.08683906,-3.6306543,-3.3419597,0.8995886,-1.3306805,-1.0402741,-2.6500561,-0.039892424,0.54115826,-1.5482723,0.15166289,1.0679153,-2.733546,0.08894273,0.5886587,-2.4917526,-1.2804759,0.47921497,-2.2109866,-2.833731,-0.4853812,-1.8406183,-3.3179424,0.23109877,0.43381852,-1.5706446,-0.43393344,0.69377,-1.1230533,-0.3580972,-2.4549787,-1.1013952,0.6020302,-0.65982825,-7.519217,-4.305308,-0.26511595,-0.4327534,-1.63003,-2.1950228,
			-0.31415686,-3.0695877,-2.6245816,0.18938886,-3.1124544,-0.47275147,-2.051959,-0.48796982,0.361515,-1.2923256,0.122730926,0.6129784,-1.5157124,-0.072414264,0.67314935,-2.2874255,-0.99513465,0.32984313,-1.9421979,-2.7857773,-0.6969145,0.11167579,-1.7792957,0.83278555,-0.7856086,-0.37003917,-0.25422874,0.10936702,-0.15752931,0.20659515,-3.168807,-0.82373357,0.5295741,-2.0311856,-5.4029956,-3.4445543,0.1874894,0.20125602,-1.7447913,-1.1026723,
			-0.0023926254,-3.5033362,-1.5885838,-0.65050614,-4.2033257,-0.046113633,-2.2106118,-0.4649885,-0.6163036,-0.7147615,0.6364254,-0.012369155,-0.6863741,0.18483247,0.156165,-2.4396863,-0.9575688,-0.024307134,-0.3928856,-2.7739358,0.005941721,0.17095551,-0.3663262,1.0547547,-1.340387,0.523439,-0.053799756,-1.5251839,0.44110513,-0.19014351,-4.3358,-1.002519,-0.094126604,-2.6012669,-2.6623096,-1.1874071,0.27909997,0.3985596,-1.0856512,0.14105631,
			-0.5945449,-2.2821507,-0.49674708,-2.6417725,-3.629991,0.5215596,-2.7913594,-0.40316778,-1.7046373,0.34591517,0.28045794,-0.60953087,-2.2337387,0.073331654,-0.821269,-2.2882714,-1.2909136,0.21206373,0.105536185,-2.9664226,-1.3255339,0.41821024,-0.30578107,0.83743215,-0.9735738,-0.6742382,-0.13036627,-2.4876618,0.682224,-0.72203726,-3.3493187,-1.136546,-0.6512941,-2.298209,-5.067513,-0.88404673,-0.743405,0.17330417,-1.3946589,0.9911433,
			-1.2322631,-2.4982634,0.6739101,-2.241881,-1.5893416,0.35777447,-3.0743542,-0.33500385,-0.9269774,0.9534566,0.2858242,-0.78965926,-3.9368792,0.7297125,-3.8189456,-2.5332932,-1.451185,0.094352916,0.4372384,-2.824561,-1.7280858,-0.16504653,-0.4890257,-0.09810129,-0.8284504,-2.3790677,-0.15233514,-1.8582714,0.46298558,-1.5501026,-2.8811064,-1.0690624,-1.0725809,-2.6282864,-6.349801,-0.047363218,-1.4696574,0.026381157,-1.256713,0.418853,
			-1.0204949,-1.1876111,0.6979945,-0.4760465,-0.09386532,0.1879551,-1.3036748,-0.706738,-1.9143364,-0.1332778,0.9002353,-0.6534125,-3.8443298,0.7264764,-6.549154,-2.4568229,-1.6166847,-0.5662722,0.25864404,-2.7738738,-3.4525518,-0.99789643,-0.1512934,-1.0344284,0.023097213,-3.6477823,0.06977781,-4.1456842,-0.36585885,-2.5065851,-3.2027793,-1.2032946,-0.87240607,-4.0661016,-5.290431,0.3224411,-1.8507298,-0.9862898,-1.2919761,-0.2427868;

    b1 <<
			-0.23292711, 0.12942958, -0.2071452, -0.44690114, 0.29775715, 0.21213177, 0.26953444, 0.07554176, 0.032741636, 0.24211337, 0.21221171, -0.26318997, 0.4054642, 0.10647795, 0.00555965, 0.18937336, 0.111920744, 0.090474114, 0.07708172, -0.3423481, -0.3921048, 0.124102354, 0.58698857, -0.124941215, 0.25964975, 0.3267519, -0.079163656, 0.11768704, -0.4315944, -0.83298826, 0.26108062, 0.23594326, -0.18531533, 0.08090662, -0.63859344, 0.14569409, -0.51077414, -0.124273136, 0.1542363, 0.17237018;

    b2 <<
			-0.62971884, 1.7201834, 1.2726711, 0.5787227, 0.28481004, -0.6842481, 0.045983426, 1.4730188, -0.26963967, -0.42904606, 1.0222216, -0.531893, 1.5223092, 0.30133265, -0.010282647, 0.09786205, -0.045343652, -0.75830096, 1.4738429, -0.7754652, 0.7108177, 1.0575918, -0.044872522, -0.07484737, 0.2106636, 1.1332579, 0.13554564, 1.3970932, -0.52771604, -0.029061778, 0.6845551, 0.028898653, -0.39106023, 1.1114284, 1.1369138, -0.17181846, -1.0947378, -0.9858894, -0.88243544, -0.93456125;

    b3 <<
			-2.6005514, -2.108616, 1.0524446, -0.9781251, -0.7480105, 1.1635998, 0.0044260263, 0.6530477, -3.7252374, -2.3308713, 4.1824846, 1.7251223, -2.4167309, 1.615707, 0.5701089, -2.3422647, 4.011745, 0.6911056, -0.8455693, -2.058208, 0.52561563, -1.1676105, 0.7703623, -1.2559403, -0.7274776, 0.34585762, 0.19563538, -1.45443, 2.060407, -0.07295744, -5.2176576, 2.214966, 1.0979375, 1.3319118, -3.5162542, -0.5150625, 0.6423988, 0.5123542, -0.67130417, -0.58670276;

    bout <<
			-1.3467246, -1.1034814, -0.48339665, 0.2716647, -0.64720005, -1.2634469, -1.2485998, -1.3648558, -0.5350298, -0.45429456, 0.525511, -0.43698144, -0.59547293, -1.3780107, -0.601482, -0.35298592, 0.39735556, 0.90856916, 0.3930313, -0.42402545, -0.8333623, 0.17556714, 0.5963911, 1.0699173, 1.9973447, 0.84670347, 0.4032629, 0.013652504, -0.6739875, -0.2613078, 0.5246109, 0.9661227, 0.2383327, -0.49946892, -0.70599985, -1.2607107, -0.5185889, -0.39071703, 0.46035928, -0.57780385, -0.7489841, -1.4203912, -1.27083, -1.1329474, -0.6661223, -0.003721689, -0.86111647, -1.3167751, -1.4353793;

    BN_gamma_in <<
			0.9884406, 0.22422278, 0.13283288, 0.29125446, 0.35826492, 0.7213229, 0.8488086, 0.45792234, 0.71714294;

    BN_gamma_1 <<
			2.9972265, 5.2963004, 6.2889266, -9.986351, 3.3213465, 4.924404, 1.3418442, 3.1882374, 10.517595, 1.8074802, 2.0096319, 4.617066, 1.335244, 2.1966176, 1.4077296, 2.0089574, 2.7944975, 4.2504344, 1.6477123, 9.253236, 3.4776218, 2.707062, 0.9974548, 2.2922025, 3.8285193, 2.607109, 8.263956, 2.255506, 6.9756627, 1.4445161, 7.7456937, 3.623928, 6.5720897, 4.36284, 5.4714923, 6.8304906, 5.8252134, 4.1031895, 3.7294059, 12.47207;

    BN_gamma_2 <<
			2.1102173, 0.29259205, 0.8252568, 0.6032006, 0.29981366, 0.4667964, 0.26677158, 0.5293558, 0.27658087, -0.26027718, 0.4001769, 0.3933843, 0.26226664, 0.27251613, 0.36498946, 0.28131288, 0.37290964, 3.1389802, 0.2533602, 4.764648, 0.3972202, 0.2738824, 0.3249834, 0.44846502, 0.26117024, 0.31783596, -0.23519586, 0.3909249, 2.319682, 0.769491, 0.51707834, 0.36156562, 0.60139334, 0.4756541, 0.30537653, 0.359635, 3.3516452, 0.29063025, 1.7675093, 0.35949326;

    BN_gamma_3 <<
			0.11274751, 0.13068318, 0.11296795, 0.13147828, 0.08652398, 0.092217654, 0.11118485, 0.111296944, 0.14719398, 0.13718846, 0.18913688, 0.15100333, 0.8693524, 0.12180462, 0.09562822, 0.6821725, 0.14380775, 0.09013578, 0.13812098, 0.7730615, 0.31738803, 0.09480985, 0.09191212, 0.14634678, 0.110811986, 0.10045574, 0.11888443, 0.0915973, 0.08367274, 0.13272667, 0.29177752, 0.16271992, 0.10321028, 0.11317969, 0.08360486, 0.13243128, 0.113361895, 0.08448299, 0.12734053, 0.1373;

    BN_beta_1 <<
			-0.3264733, 0.004167541, -0.12814903, 0.07177917, -0.1529823, -0.31809482, -0.28333926, -0.38885236, -0.0002690787, -0.5397696, -0.31227586, -0.17048714, -0.15256298, -0.55203295, -0.5281805, -0.13057852, -0.15157631, -0.2313952, -0.33553576, -0.07585936, -0.14891718, -0.41488123, -0.95658815, -0.31666726, -0.74398047, -0.92189616, -0.10977069, -0.56730396, -0.16570802, -0.14593038, -0.1144472, -0.27397907, -0.08791093, -0.2930263, -0.02175648, -0.35456187, -0.08098989, -0.12561981, -0.5994793, -0.14875253;

    BN_beta_2 <<
			-0.34570214, -0.59766006, -0.9655468, -0.37516502, -0.3465102, -0.045723137, -0.30231333, -0.7745283, -0.050876856, 0.21952358, -0.3893127, -0.1942769, -0.7448946, -0.28308594, -0.12457039, -0.058974057, -0.09329755, -0.023393422, -0.56279206, -0.20263423, -0.39687726, -0.29938436, -0.27771375, -0.21545255, -0.32171282, -0.47133353, 0.33963534, -0.6009441, -0.23483875, -0.122392364, -0.4049982, -0.32362497, -0.06347232, -0.57212913, -0.23054586, -0.06996557, -0.02247296, -0.15777151, -0.22632906, -0.07688935;
    
    BN_beta_3 <<
			-0.026522871, -0.035301592, -0.12633519, -0.04548575, -0.12966874, -0.13664724, -0.07972586, -0.16211855, -0.060836267, -0.06964399, -0.78952616, -0.4186161, -0.016987158, -0.23827189, -0.057483636, -0.013603904, -0.61279905, -0.0704407, -0.071335465, -0.025170946, -0.08128773, -0.01630516, -0.1141211, -0.04206511, -0.04118566, -0.1186111, -0.08164503, -0.023784092, -0.19472402, -0.08600424, -0.031019077, -0.41417992, -0.1598302, -0.12918012, -0.011236252, -0.022496052, -0.122850455, -0.071848534, -0.08732164, -0.04873298;

    mean <<
			49332.90400948597,31801.571576731112,45911.47630302507,40644.56453431986,20800.26541219177,40368.068809068835,46038.04139905851,31469.227651713973,48911.793167954886;

    stdev <<
			174378.843487391,124784.58981781364,158723.2709340379,149913.17978083182,101556.11272592114,148230.5076291652,158913.3660835362,123118.8886239638,171034.1477015628;
  }

  else { // QP=22 and Default
    
    embs0 <<
			-0.060577095,-0.25464582,0.2827994,0.035731733,
			0.005559614,0.001085359,-0.024997102,0.0008950523,
			-0.0031560333,6.801837e-05,0.009054147,0.0019349975,
			0.028198328,0.014643441,0.032429893,-0.0033754967,
			-0.006355082,0.00038345082,0.04279557,-0.00020629968,
			0.052084316,-0.033143632,0.07886321,-0.14146945,
			0.076141134,0.0072842496,0.093709394,-0.001297105,
			0.025871335,1.1887149,0.10766992,-0.07269682;

    embs1 <<
			-0.015705913,0.14184174,0.002937317,-0.37111536,
			-9.216857e-05,0.010140995,0.023566943,0.00017029096,
			-0.0019795548,-0.0005740664,-0.014159333,-0.0019777876,
			-0.0022076447,-0.06227519,0.010801802,0.0017626779,
			0.008966189,-0.0010487044,-0.05410203,-0.0012317712,
			-0.010151286,-0.084621914,-0.025434285,-0.013386849,
			0.059558656,-0.025547562,-0.105101794,0.044872023,
			1.1691467,-0.1092995,-0.14435424,-0.7743185;

    in_h1 <<
			0.27169052,-0.035761334,-0.23139456,0.08377866,-0.16669044,-0.46324098,-0.28020504,0.01731123,2.0849504,-0.7264572,-0.33211163,2.1517546,-0.8143691,-2.5613952,0.48366717,1.7439305,1.0808724,
			-0.22058564,-0.10911058,-0.22707713,-0.08172664,-0.29222825,-0.85902494,-0.31349775,-0.08991158,-1.7549704,-0.7281304,-0.20404497,0.643082,5.3310237,-0.17642742,-0.11890211,0.6387878,0.73554033,
			-0.063133955,-0.08616048,0.028096866,-0.008639149,-0.11095305,0.05414028,-0.084520474,-0.0066313394,-4.0135694,0.557121,1.0325372,0.107730344,0.033811234,-0.45862705,0.9779876,-1.9232011,-13.187158,
			0.022922361,0.022216978,0.018801989,-0.026793957,0.009414,0.09311434,0.052492905,-0.007955258,2.0169046,-7.0559034,0.5241106,0.35090253,0.9428107,-0.5160615,-0.18733878,-3.7424874,-18.55829,
			-0.07896367,-0.025864806,0.024612298,0.027150268,-0.051584054,0.1447178,0.19878119,-0.028544582,1.4838274,-2.1317856,-0.13161953,-0.57877386,-0.36973298,0.109864846,0.1381105,9.051451,6.938704,
			0.08230035,-0.11055486,0.18667798,0.05055049,-0.17725109,-0.23918864,-0.35769546,0.033032183,1.2198236,4.651282,-3.1991303,0.14028762,0.4797825,-0.5237377,0.23614769,5.730823,3.9519777,
			0.10645536,0.01361822,0.08140197,-0.0029721747,0.0006196164,-0.2502321,-0.09777113,0.011315356,0.7043218,-0.2062449,0.014280244,1.383885,0.22477144,-3.8303852,0.29121527,-0.31814286,-1.8299563,
			0.055390667,0.0013679587,-0.21537696,-0.0047013373,-0.0023572883,-0.14480817,0.14913149,-0.008194977,-1.6826508,6.558759,-0.5948754,0.13718082,-0.38048264,0.44212887,0.32899815,-4.329301,5.7035475,
			0.08674003,-0.060029257,0.4992497,0.014042917,0.08427627,-0.076502144,-0.75123817,0.090268016,-0.79030466,-2.8794324,0.41587743,1.0789393,-2.1330736,-0.6979894,-0.513575,4.789834,8.768227,
			0.036748324,-0.040479273,0.1400041,-0.0089607155,-0.04702826,-0.14397484,-0.064408354,0.033226654,0.61573887,5.6252756,0.25589827,-0.0034073738,-0.9085181,-0.18722272,-0.00090710726,-7.803845,1.7090962,
			-0.055913493,-0.01173078,0.04956114,-0.008348655,-0.012264921,-0.2049369,-0.022558149,0.047508713,0.82552534,3.8607454,0.52189803,-1.2436957,0.027488485,1.873454,-3.0599713,-0.1451782,4.1789765,
			-0.020753592,-0.0022819857,0.048641536,-0.0028157388,-0.06180811,-0.07981628,-0.21855529,0.009304505,-0.44250682,0.004006645,0.27683106,-1.6613839,-0.8272454,3.4492085,-0.24531277,1.5956767,2.3653355,
			0.057979546,0.09287997,-0.18373866,-0.009301836,0.062414356,-0.12797795,0.2821112,-0.046458982,-1.7942113,0.6552337,1.1081517,1.0996464,-0.6084252,-1.6306925,-0.8312921,5.867055,9.285515,
			-0.9746936,-0.43815818,2.4380357,-0.08075853,0.3810236,7.226621,-1.8052093,0.5317739,-3.517882,-4.4423637,-0.37689853,0.10406138,2.6096046,-1.2508382,-0.34964654,-3.097534,4.7064667,
			-0.07521308,-0.15888393,0.3499518,-0.018078249,-0.13190822,-0.2079681,-0.30445102,0.08304279,-0.44891933,2.912789,0.012911031,0.24433343,-4.827012,-0.14504257,-0.12571624,1.0070473,4.153759,
			0.058061857,-0.1664929,0.29121518,-0.041491095,-0.14391808,0.2828767,-0.20046635,0.053184316,2.608781,-2.988707,-0.043964867,-1.2005712,-2.7107334,0.8642497,0.8028957,3.017047,-10.542594,
			-0.013231333,-0.0525901,0.120117836,0.009172782,-0.026363527,0.008466241,-0.11629467,0.012339214,-0.42018303,2.1699376,0.25524166,0.21787195,0.26308253,-1.0155754,0.18320468,0.27945063,-15.073424,
			-0.39309177,0.7542374,5.093922,0.27313533,0.32451814,1.3002496,-4.77525,-0.47624746,1.9224019,2.897426,-0.2706024,-0.59436786,-6.508176,0.87440634,0.31815436,-0.6150186,-4.023465,
			-0.32997015,-0.030186143,1.1046715,0.11264091,0.0088829035,0.8862948,0.06647106,-0.015071598,0.9755111,3.408243,0.34365854,-0.4193722,0.8370823,0.50033545,-0.005091897,-9.171043,-2.1874068,
			0.14204936,-0.12221067,0.20883496,0.04395817,-0.13028932,0.057898507,-0.25244632,0.05489987,1.8463894,4.3157325,0.034257848,-0.68759054,0.80032057,-0.10782759,-2.839153,5.7541866,4.3925,
			0.11964228,0.079034165,-0.58401835,-0.016556287,0.014334856,-0.28590685,0.30209798,-0.06333332,4.4411154,-1.7514563,0.44264594,-1.4235063,0.3847613,-0.6184456,0.8858184,-6.0755057,7.4306,
			-0.36656508,0.010035141,3.5571904,0.03899285,0.03510019,0.5079752,-2.0664895,-0.17420241,0.09291836,5.6979966,-0.2378974,-0.43219605,-3.484206,0.81544846,0.3041837,2.8838568,5.322598,
			0.0104272,0.061092284,-0.022312628,-0.009364645,0.04981413,-0.15176255,-0.07761459,0.025080243,0.1015697,-5.213034,0.818993,0.7496,-2.1818364,2.7629595,0.31482917,-1.0745701,-1.7413583,
			-0.21756971,-0.017776947,-0.68045086,-0.1963566,0.051350504,0.5176841,0.18516417,0.33078298,-0.13121672,0.39448366,-0.13873498,-0.22345477,-0.049474854,-0.047475163,-0.03113892,0.43624827,-0.43767792,
			-0.05125897,0.038180683,0.2520111,-0.004611525,0.035833586,0.09924457,-0.2547352,-0.047179792,0.12629488,0.53443277,0.01616613,0.019229157,-5.444841,0.008248814,0.03140671,-0.04710529,0.9961382,
			-0.04850706,0.006695635,0.06778389,-0.031555362,0.013388894,-0.014823198,-0.010467465,-0.044899248,4.5987673,-0.6313403,-1.1553603,-0.44669044,-0.04492193,0.62230325,-0.6899721,1.6013207,12.372214,
			0.0777337,0.03268048,0.043506876,0.035049867,-0.05276195,-0.12614311,-0.03028451,-0.06854085,-5.3518505,-2.8090584,0.70892775,-0.46116632,-0.17321357,0.82188034,0.32093084,3.7743075,-1.270952,
			-0.07179799,0.025178544,0.15506063,-0.009146709,-0.050129205,-0.13370347,-0.22314072,-0.027316926,-2.79818,4.379087,0.08956845,-1.1336684,1.9887751,-2.3870974,-0.44435373,4.3026776,-1.2916849,
			-0.008775592,-0.007856104,0.06212155,0.0018770484,0.0064761434,-0.021350795,-0.035229266,0.015181365,0.005827982,-8.603247,-0.0037263818,0.09488621,0.74726236,0.07070602,-0.053267393,2.122469,-0.68590456,
			-0.06511177,0.033164304,-0.040527437,-0.037598047,0.040682115,-0.26320165,0.0635447,-0.036591325,-1.301811,6.1579523,-0.017190428,-1.7530338,0.6635679,-0.5046179,-0.30032223,7.8500175,-3.9416378,
			-0.063919514,0.027964206,0.10289936,0.0026595704,0.013011028,0.09029794,0.004055333,-0.0013519499,-4.1585035,-0.9872628,-1.589889,1.447097,0.69766134,1.3321171,-0.7309928,-4.1367326,5.3265924,
			0.042084906,-0.0009237068,0.1388713,0.016000614,-0.0070988922,0.06970714,-0.042153586,0.014612362,1.5390191,-1.3786587,0.3983656,1.1320347,0.66033006,0.25550485,-2.3460455,-7.9113646,0.66008395,
			0.025827032,-0.027150763,-0.17080405,0.033078644,-0.04975622,-0.152165,0.17593275,0.00021675711,5.7965016,-0.0135689685,-0.3920971,0.8642852,-1.4217225,0.2835711,0.20900263,-3.2643273,0.30003983,
			-0.0886545,-0.021639062,0.48403087,0.012513624,0.1108258,0.26886398,-0.027886463,0.15887424,-0.64430976,-2.3204076,-1.1273161,-0.5148279,-0.6417594,0.94824076,1.3045727,8.684841,-0.69696134,
			-0.009782653,-0.017780028,0.13358206,0.0049421703,0.011103739,0.13507232,-0.31458977,0.060504906,1.8776295,8.335462,0.4349496,-0.57170635,-1.175402,-0.5712131,0.16569951,0.53336304,2.351219,
			-0.007167511,0.003510483,0.08067666,0.0070546954,0.0032778087,0.018203497,-0.045643654,0.003999801,0.19498031,0.96096414,0.028502388,-0.03251363,0.7101388,0.106800914,0.027104588,-10.070521,-1.731239,
			0.016552972,0.019184494,0.16223374,-0.03563224,0.02682055,-0.087594055,-0.1426778,0.020793721,0.4456577,2.2145815,-3.7646427,-0.2061593,1.4661186,-0.27724153,0.36399752,1.7732586,1.5512644,
			0.028132936,0.032787725,-0.08577824,0.0015203081,0.0057037864,-0.09781009,0.08039997,-0.012233612,1.1732293,0.8912865,-0.1631766,-0.24794309,-0.3382817,0.8980918,-0.039238237,2.9702396,-17.05051,
			0.39603046,-0.08744001,0.13645622,0.18119077,0.03275217,-0.39164314,-0.44748655,0.1804814,-1.6262907,1.882992,0.37035987,-2.8696444,1.0673587,0.5266145,-0.067111045,4.906961,4.3371654,
			0.080131814,-0.02493371,0.20408115,-0.00068120507,-0.01832756,-0.22902943,-0.26402903,0.024366725,0.36774278,0.4582821,-0.12538551,-3.1725333,1.0263195,1.0515219,0.1902059,0.48874912,-2.1352005;

    h1_h2 <<
			-0.3689763,0.42118064,-1.8627874,0.65294254,2.0344687,-0.72597915,0.04831477,16.898232,-1.5113189,-1.2624731,-0.23255783,-0.3828968,1.6540352,0.33437327,1.33635,-0.71304834,0.96077144,-0.029798362,-2.3272412,1.4724119,-1.6944261,0.38821682,1.4314876,0.027419928,-1.2629378,-0.6573345,0.0043332,-0.73718214,0.72753435,-0.25897044,-1.7645606,-0.4821814,-0.7073298,-1.1048472,0.3132362,0.78640467,-0.026270652,6.987512,0.14502648,-0.6167309,
			0.04694852,-1.3590376,1.1161488,-0.46630707,-3.3784044,0.00036400248,-0.14363523,4.047411,0.19554603,-1.8154511,-0.16889822,0.0061847414,-2.4287949,0.09287162,-0.41007808,0.6583383,-0.020920962,0.21991971,0.1724596,-0.0064894655,1.8880408,-0.55431724,-0.6625805,-0.004354303,0.2540088,1.6243154,0.8463272,-0.49029797,18.057854,0.120473824,0.022764927,-0.31100917,-0.36674306,-1.5480858,-4.6037583,-2.864272,0.3613909,-3.728477,-0.031095548,-0.30969375,
			-0.089347534,0.078255445,0.07275657,-1.0489739,-0.20505355,0.42985365,3.1361,5.095991,0.3223918,1.1587343,-0.562171,-10.422157,-0.8342806,-0.51128477,-1.3078442,0.8027478,1.1050589,0.16474052,-0.2760427,0.023847582,-0.24858715,-1.5118922,-5.828655,0.016793871,0.2110858,0.29642472,0.6611759,5.3840184,-1.025821,0.16159928,-0.60925347,-0.67221034,-2.5368352,-0.26479968,1.392544,0.9743408,-0.275744,-3.1367464,-1.4907436,-0.47879204,
			-0.3294612,-0.33157504,0.13513085,0.5208939,-2.2250767,2.2958713,-0.3089087,-7.127496,-1.106472,0.8556446,0.05403672,-0.7660114,-0.62952644,-0.15660137,0.17358255,-0.6830452,-0.16561604,-0.4646536,3.1429484,-1.6690537,-0.061957248,0.79660666,-0.0073625264,-0.0013081173,-2.9823499,-0.4259044,-0.18141806,-2.0480945,-5.389925,-0.021882014,-0.027987324,1.3716017,0.6924118,-1.3326315,1.676096,3.334987,3.0031075,-4.398062,0.7181941,0.62260956,
			-0.07251211,-7.9920254,0.26829946,0.9231042,-0.94611,-0.15102662,-0.031593937,0.56617266,0.054204304,1.1974481,0.4283906,-0.05970837,-0.35291007,-1.5675962,6.164147,2.2249165,-0.5773829,-0.48571235,-1.3587672,-0.6493492,-0.5494869,-2.175757,-0.5634139,0.009507678,7.8670363,0.23864904,-0.20650558,-0.30932614,-0.27223748,-0.66623884,-0.39315823,-0.22571829,-0.65351266,0.1995726,-1.5942951,-0.058367364,0.04999988,-1.3904139,-0.6366379,-0.5342505,
			0.6191042,-3.0296128,-0.11595223,-0.24571884,3.4827101,-0.6098281,0.43922454,8.736819,1.3849951,-5.0202155,-0.1887359,-0.12880857,0.29251045,-1.4878106,0.81981206,3.887774,-0.7477815,0.17613798,-3.511288,-0.73152184,-0.39482567,1.5897175,0.75400585,-0.001035217,0.53841347,0.08313243,-0.4025401,0.61888975,0.9316859,0.8676395,-0.10350479,-0.085457176,-1.0252104,1.514639,-4.0959663,-5.440784,-0.73830944,-2.05445,-0.29299137,0.41944197,
			-0.06686057,0.13615896,-1.685762,-0.46659437,2.2295854,2.3910406,0.5802071,1.0715723,2.2791505,-0.35907537,-3.6583884,-5.740312,-0.95563006,-2.0838914,0.038354322,0.74994695,1.9697031,0.18177931,-1.0258734,-2.14247,-1.4665904,0.15405275,-0.59665585,-0.0110223275,0.00723531,-0.018746728,-5.4084687,-1.1557902,-0.59945804,0.3276588,1.0867485,-2.9648294,1.6569715,-0.6253719,0.547994,0.2273854,2.5804443,-3.1489437,-2.8057725,-1.8290149,
			-5.9181647,0.0542296,-0.8900762,-3.6473677,2.6358583,-1.3959477,-8.24863,2.1071131,0.14326042,-0.5924065,-0.22042552,0.8183276,-3.5072331,-1.8875467,1.8089899,-0.92749226,-2.1484005,0.08303005,-1.578068,1.1988329,1.8212105,1.1091218,0.17763792,-0.00960477,-0.43106622,0.08998598,0.31516156,-1.5280069,1.867399,-0.078882344,-2.7115414,-0.8776044,-1.1932137,0.025440155,1.0004405,2.2999427,-0.90059406,0.9054639,1.9789311,2.8515038,
			-0.5471271,-6.762223,-1.4284954,-0.9889501,-0.39035913,-0.386816,1.9223833,-1.2450712,1.2552496,0.073361546,0.5984896,-0.5169446,0.8016886,-3.1318476,3.0590563,2.947372,-0.4211438,-1.82469,1.8261507,-2.838188,-0.8209122,0.75438386,1.3956784,0.021220163,3.6362064,-0.15103981,-0.48066753,-6.4164953,2.6379375,1.4315275,-0.042027403,-0.64901686,0.12392005,-0.037398428,-0.590092,2.0761263,-0.6686681,-1.6096017,-1.2261472,2.0984101,
			-0.042383768,-0.52529615,1.2348807,-0.8405041,5.0746117,0.91492796,0.18621866,5.6855774,0.69202363,-2.009693,-0.5199673,-0.23450965,-0.5120183,-0.7214246,-1.2868748,0.4406762,-2.0730698,-0.69400775,-0.92261446,-1.2582945,-1.336353,1.0158486,-0.0096125975,0.015448918,-3.4200387,-0.017614815,1.0670745,-0.9540002,3.9549103,-0.2119557,-0.4487915,0.040957913,1.0085213,0.53487444,-2.2758696,-5.653669,1.8609264,-2.9229674,0.5268534,0.13415661,
			-0.7807054,-0.028580524,0.43562055,0.6332799,0.012947976,-0.46444142,0.84047097,6.4259486,-0.0939861,-0.17503528,-1.2226715,-1.903402,-0.63184685,-0.41132107,-0.021305265,1.0816071,5.0260735,0.09924508,-1.0086893,-1.0378132,-0.3189626,-0.32816836,-2.2981496,-0.01410629,-0.11403562,-1.741751,-0.9866081,1.0989494,-0.24849543,-0.38728592,-0.3335706,0.77052623,-2.2556975,0.35502237,-0.38128224,-0.020690726,-1.2879514,10.732819,0.5224101,-0.0721205,
			-4.264049,-2.5330477,1.3740264,-0.24595883,-0.14803515,-0.18830475,-2.2194648,2.249488,-3.0956697,-0.4148009,0.48309115,-0.5509551,-0.3436447,0.31360713,-0.6941796,0.16062087,-1.4958493,0.2005579,-1.4934652,1.029609,0.12148034,-0.45771095,-4.8498774,0.00074413046,0.30277514,1.0928634,1.1739258,0.8233478,-0.4623896,-1.6941023,-0.61902106,-0.8360857,-1.7557299,-1.0278928,-0.186243,-0.45537758,-0.030011624,-1.4980865,0.8040189,8.702533,
			1.9427699,0.25515562,-3.267029,0.7424311,0.9106218,3.2398787,-0.9335776,-1.7055049,0.18766955,0.9224974,-0.40271214,0.13605511,-0.09501621,-1.8176386,1.8578475,0.13054667,-2.4764771,-1.7315977,-0.8093676,1.6965556,-1.8352258,0.32556742,0.3672195,0.019431852,4.0836344,2.2628167,0.2680748,-2.5990956,-3.0098171,-1.2965502,0.104728945,-0.04106078,-0.7803268,0.57532656,0.2797985,-1.6741844,1.2673563,-1.5898663,-0.80349994,-0.8801116,
			0.26401326,-1.6281734,-0.18719777,0.31393224,-6.5981054,-0.4903701,-0.25617856,4.953617,-1.9634552,-0.7712534,-0.51102996,-0.29293147,-1.6016196,-0.53617907,0.44425747,0.591151,7.451218,0.27740645,-0.30828267,0.2828346,-2.0151792,0.2578373,-0.7185479,0.005236413,0.5436341,-0.7711433,-0.15082024,-0.737573,-1.197215,-1.1888491,0.14186239,-0.91323394,-0.49650994,-0.5047705,-0.5363718,-0.72319335,-0.25513923,9.319674,-0.6767436,-0.86899936,
			-3.1314182,-0.3044719,-2.7585936,5.1287766,-0.34076416,-2.6977427,-2.0901818,-2.569221,1.8560679,0.66084963,0.50763464,1.0730697,-0.39297858,-1.6843692,-0.6731789,0.55470645,-3.4605582,-0.47397098,1.8725848,1.6199806,-1.37929,0.011875891,-0.82450473,0.012104373,-1.1923614,1.7732413,-1.5772086,2.0355544,-2.2103744,-1.221868,-0.1982895,2.1676798,0.019894414,-4.189555,1.2984964,-2.3949902,-1.4449527,-0.19337681,-0.6805206,-0.9924225,
			-1.5441065,-0.46389565,-0.15274659,1.0682522,-0.17168309,-1.3319616,0.8425767,2.7330725,1.1874855,0.8556999,-0.4804261,-0.47898844,-0.5655341,-2.9961016,1.0611337,1.9548236,1.1522495,-1.5409772,-0.8631826,-1.4831606,-2.9038894,-0.03970133,0.9990095,0.002766877,4.9875307,-2.7468338,1.5655648,-2.2375035,-0.43577322,0.34481385,-1.5186752,-0.62086594,-0.6434855,1.6291935,0.42894575,-2.1571195,-0.5492217,1.1818686,-0.42785153,1.2558818,
			2.0905387,-0.8602307,-0.6267245,-0.3656636,1.2559005,-1.6461146,1.4301647,6.1285887,-0.1749188,-1.6928974,5.7428966,-2.8214273,-0.67603874,-1.2811017,1.6305678,-1.6579188,-1.8009036,0.6266269,-2.0853968,1.7846158,-2.946115,0.8846806,-2.9862688,-0.015121654,1.9160638,-0.60721296,-1.3263199,0.13093205,1.2665659,-1.4981735,0.40126932,0.25711542,-1.1438962,-0.36827955,0.31025726,-3.911063,-0.8219063,-0.18037347,0.055626422,-1.740298,
			0.69622487,-0.24965312,-6.993196,-0.61153847,0.26339453,1.7756792,0.6998414,1.2631845,0.3067972,-0.07156739,0.89773065,0.35581568,1.0863596,-0.35932767,-0.17660968,1.037079,-1.4199203,-0.11827983,-0.92681605,1.6646178,-2.089653,-0.14233856,-9.703543,-0.015533294,0.33710462,2.177676,-1.9310013,0.9347751,-1.8388234,-1.9140565,-0.18159842,-1.1740583,-2.8024926,-0.4534718,-0.11318718,-1.1637042,-0.06163126,2.8298275,-0.7437084,-0.043941177,
			0.42852375,-6.3881755,-0.74996775,0.079183914,-5.221719,-1.2752644,0.53461385,-4.0178294,-3.1614637,6.5027695,0.003274224,-0.17044248,-1.733839,-0.40552342,1.1188743,-1.3337426,0.037172716,0.37262633,-1.859976,0.28473926,0.14816014,2.7097409,0.6069625,-0.0057821646,0.6329741,-0.3988185,-1.1121328,0.14808655,-4.036704,0.55876184,0.73980826,0.43262926,-0.6273806,-2.5493248,-0.22673711,-1.7575158,-0.89555216,-1.5278472,-0.13162076,0.10169444,
			-0.7533742,-0.3351986,1.9664986,-0.031371888,-8.491619,-0.6027836,0.225121,3.6757119,0.0113181975,-0.38482255,0.37001625,-0.7310083,-2.3045146,-0.23910291,0.008739672,0.42232904,2.1057048,-0.057662826,1.6994139,-0.29623976,-0.8456113,-0.3591707,0.076376155,0.0024559875,0.010266503,-2.8013458,-0.8443339,0.826079,1.0302117,1.0997666,-0.69147193,1.4129668,0.8040372,-1.2044443,-3.4284616,2.234784,-0.7977381,11.088239,0.18714282,-0.6840143,
			0.3346038,-0.16547112,-0.18716513,-0.091671176,-1.8952279,-0.6815073,0.37342244,8.66044,-1.1496006,0.19907968,-0.4531998,-0.36428612,-1.257968,-0.88862276,0.17534426,0.7889054,0.25476503,-0.1877398,2.4484258,-0.033279523,5.215811,1.1454512,-0.42005837,0.0031839432,-0.21903291,0.16182393,-0.51355606,-0.7996606,-0.22466889,2.1273587,-2.1118088,0.20785294,-1.7700479,-0.5030827,-0.038942475,-2.4535894,-0.6956449,-13.767567,0.15156898,0.9203978,
			-0.14780782,3.362438,-1.1147244,0.38120192,2.5922196,-0.4526683,0.8357976,-1.9499727,-0.9682366,1.0915425,0.42620265,-0.5615619,0.24384876,-0.362655,-4.813582,-1.158881,0.366546,-2.783391,0.7150223,0.7720689,-0.1723076,0.83021885,1.0519826,0.025698865,-4.466699,0.013945699,0.9574435,1.1523476,2.6364865,-1.4913816,-0.29346675,0.21804175,-0.04619974,-0.6311103,0.9064674,-0.7586496,-0.8618546,0.73560995,0.56464916,-0.1301373,
			0.533554,0.6029479,2.0115492,-0.5668518,-1.7176205,0.56960166,-1.7153463,-8.095874,0.11205422,-1.7884157,-0.49617216,1.0939944,0.8520398,0.097470045,1.0703892,-0.93349,-2.2187953,0.60516226,-1.9959049,-0.25665274,-2.2784312,1.0546144,-0.3543291,0.021914916,0.5035068,-0.9765582,0.82891005,-1.648122,-1.1483657,-1.0227236,1.4035347,-0.6903678,-9.819761,2.4087188,-2.503586,-2.7183552,-0.12984917,-0.7218131,-0.18221831,-0.22458225,
			-0.128967,-6.0220065,-0.5944451,-0.6495628,0.07469054,-0.76259893,0.8965725,0.24833053,-0.053077783,1.3632449,0.6895916,-0.7596371,0.39989415,-1.9769497,4.2479143,1.649873,0.57846665,-0.097389705,-3.002087,-1.0263896,-1.2229693,2.4342017,0.9570203,-0.0039225044,0.87982184,-0.37505916,-0.4286524,-0.047883738,-6.3417115,-0.59558123,0.06887069,0.046386242,-0.52051294,0.2508085,1.6219046,-8.939082,-2.4059312,0.15085348,0.5145393,-0.11345449,
			0.020771606,0.56342137,0.34145707,0.08164739,-0.9347725,-1.7820292,-1.5522163,1.3176911,3.575121,2.5781658,-0.6024461,0.6484225,-2.2837586,-2.8608165,1.1982577,2.2886128,-3.8137877,1.5615042,-1.7841371,-1.2186189,-1.7451569,1.2731278,0.74838036,-0.00049280684,1.0692091,-0.42971992,-0.79106003,0.025663419,-0.3807906,-0.12997073,-0.47394055,-0.0642016,1.2117542,0.71654934,1.5971152,2.156255,-3.701775,-1.1274929,-3.0421875,-3.6746352,
			1.6697143,-0.36088786,2.5231178,-0.076136224,-2.7822163,0.42663053,-0.34821048,2.5529938,1.2789786,1.010013,-1.2963729,-2.0740027,-0.8769339,-1.8033705,-0.11153226,1.3544976,1.589572,-0.5116482,1.8889474,-0.78320307,-1.1748478,0.5026618,-0.33111182,0.0067060725,-0.5473541,-2.5038886,-2.0157764,0.15372151,-0.7237047,-0.5354041,-0.66541934,-1.270956,-0.014464476,0.06383513,0.49117863,-0.48475164,0.20786352,6.688338,-1.556279,-0.3044751,
			1.0934764,-1.646965,-5.6618958,0.23696272,-1.1995157,1.409513,-4.5951214,7.4415116,1.5436325,-1.9113605,-0.7598569,2.124436,-1.8350328,-2.795663,1.2043495,2.9980013,0.16726506,-0.033744026,0.6872888,0.4494117,-2.2966435,-0.26563355,-1.5796769,-0.017449439,0.08307233,1.3926024,-1.025215,-2.7700505,-1.3079808,-0.99647945,0.19839676,1.0532153,-1.577151,0.23484042,-0.66406065,-4.098736,-0.2901638,2.3498762,-0.4771397,0.96636784,
			0.51275396,-0.18924811,0.2991295,-0.18172988,3.6107502,0.39727896,0.07348353,1.9294928,0.88529545,-0.8837,-0.036909927,0.014408168,0.20422314,-0.9087104,2.560489,-0.14478417,-0.99961305,1.062157,-0.47253707,0.0071141417,-2.471463,1.9032396,0.54283214,-0.024886597,3.261476,-0.38186803,0.2062172,0.3110583,-6.128341,-0.13475822,0.31006768,-0.30161545,0.28366283,-0.27575856,1.576102,-10.1402855,0.20410772,1.3801541,-0.47140014,-1.4615883,
			-6.7603617,-6.3451724,-1.6099712,0.89881045,-1.5587785,-1.2885162,-5.6680455,-1.0930557,2.150675,2.3840034,1.0189211,0.79524577,-1.7095574,-2.5085216,2.594609,4.3844185,-3.8926406,0.74322855,-2.1284754,-0.07841668,1.3865068,0.9991748,-1.8799115,-0.0017171953,2.0137932,-0.46207502,1.8828961,1.8592857,1.3761303,0.64065117,-2.4439533,0.027123444,0.21509671,0.88243634,-0.91407764,-1.2832103,-1.6237719,1.6353327,2.609243,0.7434569,
			0.048716515,0.41449568,1.5453552,0.69420135,-2.2632914,0.54270947,0.120642744,1.4641593,0.14857721,0.41371045,-0.644278,-0.21681863,-1.7955321,-2.603019,2.4223378,-2.0245466,-2.108985,-0.86283034,0.3430925,-0.48204768,-2.3662298,0.39999488,0.8216645,-0.014752018,1.0923381,1.4007233,0.76011485,1.7994658,-4.0708632,1.404366,-0.1391787,1.7682474,-0.81761384,-0.3280864,-0.8234675,-2.3432145,1.0618745,-5.586973,-0.41778508,-1.5049388,
			-0.28478017,-0.374513,0.71953607,-0.6655569,0.32228145,0.6948715,-0.36568174,4.4772706,0.4774843,-2.7608204,-0.21608594,-1.1688935,-7.482962,0.2576835,-1.2229351,-2.3236227,0.7416476,-0.21122381,1.854531,0.15655352,2.9144926,0.5808603,0.424474,-0.048134733,-1.3551486,-0.6452135,0.053479332,0.719344,2.0489404,-0.47126687,2.854486,0.99962854,-0.60476726,1.4729918,-0.20408247,-1.7348926,0.73311234,7.069006,-1.313811,1.2181995,
			-0.30805278,-0.37140164,0.24447095,0.8933555,-2.9791768,-0.023812888,-0.087401405,-1.2248195,-0.047879357,0.3403993,0.11146404,-0.15956557,-1.7285651,-0.35502833,0.1516399,0.64634925,-0.012363711,0.33316275,-0.00805337,-0.4870538,0.8856899,-0.56534696,-0.6157731,-0.0039958972,0.3676976,0.11404491,-0.43176857,0.026436634,-4.236309,-0.022830987,0.76997626,0.9940584,-0.62093705,-0.83347094,-1.8225974,20.766289,-0.123489276,-3.292529,-0.22701494,-0.10030112,
			-0.31083104,-0.14465223,0.8387831,0.60573894,-0.124087274,0.29620624,-0.23242177,-1.7727431,-2.069913,1.8126905,-0.6406741,0.66345614,-3.7835283,-1.5764334,0.07063693,1.9444884,-2.7357798,-0.89804417,1.437122,-1.9738901,-0.5805345,0.4084942,-0.58653015,0.017327743,-1.28159,-0.4552249,0.047585897,2.8090427,-7.00011,-1.873279,-2.0128262,-1.019375,0.38418978,2.0440145,1.5642959,-3.55627,1.0504086,1.648349,1.9597471,0.4075169,
			0.48802257,-0.8036068,-4.4215107,-0.71060145,-0.91671664,1.842564,-0.30671108,2.3698564,1.3790549,-1.7161987,-0.6263632,-0.68321145,-6.5703015,-0.6332543,0.69604605,0.103178784,-2.0514355,0.028875865,-1.7782729,-0.2405863,-1.9922438,-0.2862369,-1.0739527,0.010173073,0.7922113,3.1072655,-0.7696016,-0.4411089,1.8188293,1.2475519,1.0526632,-0.35053208,1.4476993,0.6800648,-7.039829,-0.5792945,1.6170093,0.4863439,-0.397806,-1.1381748,
			-2.0357819,-0.5405098,-3.8322427,1.2508667,-5.2114086,-1.0192081,-1.5970919,0.18512222,1.5270408,-0.15990387,1.4289957,0.11492863,-2.0806715,-1.326523,0.33258995,-0.5296691,-0.743782,0.085825376,0.43235448,2.3066838,-2.510597,-0.48298863,-1.4726161,0.01611866,0.4618226,0.39344463,-1.5746876,-0.00068600674,1.2294087,-0.11022443,0.20313275,5.4438753,0.2688246,-3.717283,-2.9674773,0.7999363,-0.7229424,-2.0667486,-1.0975801,-1.3873641,
			0.7695647,-5.2768693,-1.4500985,-0.17578961,3.2908962,0.31562778,1.1076748,-2.9691463,5.7851524,3.4449298,-2.695495,0.41163105,-0.6008784,-0.17707999,0.7855283,2.6358988,1.8644463,0.9335449,-1.3264598,-0.9227855,0.4896356,-0.29685414,-2.601286,0.019143559,1.6188976,-0.73942816,1.9200271,-0.60110456,0.84932864,-0.064855345,0.35322034,-0.8708952,0.17786914,-0.20726082,-3.3526857,-2.75572,0.8331358,2.3114686,-1.2127298,0.16325483,
			1.0446563,-0.01898793,-0.20404868,-0.81475854,0.60059947,-0.7242047,0.16777271,2.231492,2.2145267,0.23370786,-3.9489257,-2.1533935,4.48043,-1.7852286,1.6619971,-1.9422657,0.08827205,-0.90447396,0.32075465,1.7534684,-0.33302337,0.39219752,-0.8525665,-0.017830934,-1.3836986,-1.364278,-1.2849087,1.7441607,-1.56079,-0.01279224,-0.38032037,0.40205294,-0.21017385,-0.9300052,1.162802,-1.9998565,-0.042258948,-10.129918,0.054750536,-2.8973713,
			-1.5436039,0.016128153,0.16425593,0.08849671,-1.2058436,-1.4521502,-0.05012349,-8.72689,-0.48262265,-0.44163024,0.45756727,-1.0795974,0.11842219,-0.8193801,0.0045130313,0.86748606,1.1052862,0.103915274,-0.4122163,0.1085998,-2.528235,0.181543,-3.3081288,-0.00075528375,0.108354814,-4.295883,2.945025,1.3957388,0.49390492,-1.9307246,0.8951767,-1.2636647,-7.031912,-0.43804777,1.0883076,-0.46309212,-1.0913206,-2.6876945,1.1940653,-0.44588885,
			0.35912365,0.30993018,1.449011,0.34045175,0.3605128,0.88510793,-1.1808294,-2.1648967,-0.6932064,-1.113613,-0.18349424,1.282648,3.3731406,2.13714,-1.761515,-0.8341784,0.26633808,0.27271208,-1.7359878,0.77325463,1.6425464,-3.7746394,-0.5137665,-0.010397794,0.09930341,0.6142913,-0.68525743,0.80848646,-0.8666201,0.24114484,1.0547932,0.2036012,0.848501,0.7475221,-0.06453102,2.8515153,1.0686396,-0.10632579,0.12643288,0.6965363,
			-1.0148191,-0.31035715,1.5453808,-0.6373357,-6.2887583,-0.45207426,-0.26260683,2.0852454,1.6022915,-0.8659153,-0.302563,-0.4743993,0.04076757,0.027912987,-0.29868987,0.02889934,-0.777396,-0.23039284,-0.15663823,-0.34432787,-2.4485497,-0.6384916,0.06186414,-0.019733133,0.26110223,-6.361506,2.9665487,0.5047561,3.3524134,0.47591072,0.78060263,-1.6815473,0.56251115,0.58996725,-6.8856115,0.88389856,-0.15749958,-3.0138035,0.5272356,-0.23131081;

    h2_h3 <<
			-2.770378,-0.7208675,-2.186676,-0.5584219,0.31756136,-2.4286299,0.34277272,0.8636735,-0.27929428,-2.648461,-1.8274037,-0.82221913,-2.2753546,0.17740756,-2.0211337,1.0837926,-0.94263166,-0.98390675,0.56982166,0.03854933,-1.6407951,-2.3157535,0.61963964,-1.3197434,0.10819583,0.61240166,-0.35324758,-3.0649855,-0.37377727,1.2083296,-0.1998171,0.3310693,1.0858612,-1.3994652,-2.7866042,0.017880378,2.9783952,-0.012062946,-2.2610617,0.5492117,
			-0.73532635,-2.1005156,-2.4559083,-0.3541594,0.44555688,-1.5134903,0.12532356,0.24770834,-0.14442945,-0.7620961,0.0828781,-3.5036087,0.70531255,0.7180872,0.56903046,-1.1343344,0.8837299,1.2162764,-1.5549692,0.16321082,-0.46412665,-0.029513754,0.17123064,-0.62546897,0.363394,0.25601315,0.93242204,2.3220506,0.21551138,-1.1179055,-0.72376794,-3.2565691,-0.73546165,-0.5256739,-1.109412,-0.10314676,0.11598799,0.037308447,-0.84204847,0.114088096,
			-0.8896793,-3.3197794,0.88774014,1.4521079,-0.5617807,-2.8735073,-0.2977939,0.89879,0.47010335,-3.6186056,0.690897,0.27108738,-0.882035,0.76635677,1.5045416,0.811458,1.299634,-0.58975744,-0.62552476,0.48041916,-0.12254836,0.076829866,-1.7930394,0.28279424,-0.19717553,1.5540106,0.57980657,0.7209195,-0.55407995,-1.3505647,-0.35496244,-1.026219,-0.46436572,-1.4752961,-0.56619775,-0.3099154,-1.2793708,-1.4839209,-1.3793929,-0.5192439,
			0.16965826,0.7561223,0.43523848,-0.8745853,-1.7070885,-0.5245357,3.8867753,2.9616005,-0.8188686,-0.35156885,-0.7680572,-1.3478291,-2.0743656,-1.4133604,1.6437209,1.8094434,-0.19923322,-1.0272397,-1.4645973,2.2675824,-1.6325241,-2.33301,-0.09713756,-0.017429862,0.37253794,-1.713925,0.30795276,-1.3900274,-2.311764,-0.021952864,-1.4280347,0.7702481,-0.12957986,-1.411349,-0.8369676,-3.5491676,-0.52232057,-0.6754662,-1.8767825,-1.1870825,
			0.4016068,-0.9316165,1.177432,-2.6995156,-1.4722518,0.382015,1.2504593,0.34482965,-1.0169301,2.091304,-1.4090158,0.3611957,0.30401617,-1.2081616,-3.9122555,0.9187502,-0.49046588,-0.11361164,-7.1042433,2.2638948,-0.90844053,-1.8871846,-0.49366394,-0.3649251,-0.48202315,-2.4037368,0.6945222,-0.49067596,-1.1426117,-0.24048248,-0.88788134,-2.87793,1.3952312,-0.3827975,-2.136303,-3.916842,-0.53308517,0.21082804,-1.715349,-0.62601763,
			0.22661357,0.22559088,-1.3832445,-0.58334345,-0.57741636,1.0832783,-0.63778144,-0.076511666,2.5264256,0.12438422,-1.2432607,-3.631158,0.2396429,-0.8383207,-0.054474544,0.57334876,-0.5502118,-0.047218442,1.4022807,0.7224173,-0.1635821,-0.4824508,-0.6629959,-0.59911364,4.194642,0.20300263,0.027571782,-0.7239553,-0.3248294,-0.15737958,-0.4266297,0.305877,-0.22294258,-0.1273075,-0.539424,-0.044779077,-1.1258041,-0.49865615,-0.5168274,-0.24286065,
			-0.47263023,-3.1476028,-4.0925765,-1.2920005,0.75512624,-0.8018622,-0.7875152,-0.680924,-0.7842261,-0.66328853,-0.17425762,-5.232556,-3.1822119,0.72517025,-1.3445216,1.6600331,-0.72333354,-2.045695,-0.5283931,0.10168495,-2.3436973,-2.2188098,0.6056671,-0.2378833,-0.5816655,1.2385353,-0.8835392,1.9649658,-0.3993238,1.2223892,-0.95259804,-3.7627661,0.20849481,-2.0639148,-0.17417403,0.03801644,0.34995827,0.11273197,-1.4758012,-0.59529036,
			0.7281026,-0.16753715,1.5552336,-2.6399422,0.086330295,0.85771424,-0.80648786,0.50324297,-0.79020715,-0.5545158,0.84156895,-1.0131979,-3.3140957,-1.088899,0.8708535,1.4716955,0.007483937,-2.8137372,-1.3952941,2.2552366,-1.7879193,-2.3791816,2.0017302,-0.8159305,-1.2003691,0.236571,-0.3766956,-1.5357672,-1.0619905,0.67464656,-1.8068289,-1.4009053,-1.3562363,-0.52336395,-2.1352463,-0.6942421,-2.6338248,1.2688549,-2.7202065,0.64106923,
			-1.4264574,-2.153709,0.83517206,0.73990035,-3.1227293,-7.748127,-0.106475726,0.7205145,-0.24955007,-4.3266344,0.64444137,1.9163969,-0.5253406,-1.1502726,2.471615,0.14612497,0.6353374,-0.94906116,0.25262862,1.1562836,-0.605172,-0.85934615,-2.2733684,-1.1508887,-0.5354851,2.1674378,0.41408175,-0.592579,-1.1359404,-1.2180645,-0.90239286,-0.9921174,0.055647153,-3.1870954,-0.83447146,-0.8476781,-1.2242185,-1.9575216,-2.0333824,-0.80750155,
			0.11783075,-0.6049231,-4.23464,0.7333967,-0.12744212,0.49747196,-0.15644996,-0.24547978,-0.3982043,0.34590757,-0.6517504,-1.5796864,-0.21484527,-0.38545635,0.2059796,0.77580005,-1.0676214,-1.1680045,0.7008982,-0.6504792,-0.67533946,0.027566403,-0.30464268,-0.27829194,1.8578469,0.64708173,1.5473704,1.0818032,0.618159,0.13342948,-0.53054017,-0.50188094,-0.2556217,0.31332377,0.004259534,-0.36512414,0.5910648,-0.89313835,-0.45003387,0.25006762,
			-0.24084431,-0.2804648,0.43399617,-0.5934674,1.0185034,-0.87672085,-0.5238524,-0.3360491,-1.0248646,-0.17746475,-0.0629695,-8.161052e-05,-1.8521464,1.876541,-0.67068774,1.8586258,-1.6601269,-1.802806,-0.6815185,0.08697444,-1.471462,0.08972495,0.1909142,0.36164668,0.41115087,1.1345136,-0.1498486,1.3915578,-0.10688794,-0.030889787,-0.4717215,-0.8460913,-0.2126676,-1.9982518,-0.8978415,0.15623283,0.32216656,0.5927049,-0.44990975,0.65937304,
			-1.7269156,-0.7283517,-1.5255754,-0.1202223,0.018052755,-0.5959007,-0.20406537,0.32005113,-1.5603056,-2.6433282,-2.634962,-1.8015395,-2.1899886,0.35148254,-1.3444282,1.7841464,-0.8778489,-2.084707,0.084932424,-0.9074162,-1.3311523,0.022952516,0.49608034,-0.058556505,0.75387007,0.39583737,1.871807,-1.2708313,-0.81498665,0.6523388,-0.54169655,-0.6009435,2.0758686,-3.1145835,-1.9205197,-0.1294636,2.031818,-0.13741699,-1.615149,0.27770957,
			0.47228298,-0.05875305,-3.0214646,-2.6637263,0.2951966,0.9002969,0.4464982,1.5891005,-1.0084661,0.50429344,-1.1238158,0.08873509,0.16964442,-1.7300794,0.22050472,-0.11550765,1.1486387,0.097662486,-0.10830701,1.6272917,-2.1392598,-2.374867,-4.018023,-1.5949165,-1.4034089,0.52715933,1.3576,-0.5968243,-0.9649655,-0.54996055,-0.34206027,-3.247634,-0.04789715,1.7821658,-1.3289716,-1.7726587,2.9345648,-2.178423,-2.184261,-2.6919599,
			-0.7251578,-0.46603876,1.377007,-0.61723983,0.46049777,0.117396936,0.19526574,-0.983833,-0.3413196,0.13087194,-0.4595132,-1.4963548,1.4951,-1.2194942,1.3108668,-1.5445529,1.1149192,-0.9096893,0.29938242,1.6607095,-1.1486826,-0.10190528,-0.79804456,-0.12397556,0.30017468,-1.5391002,1.7751689,1.2388763,0.013188761,0.43871915,-0.3128395,-1.4398161,-0.7364289,0.80305004,0.47492948,-0.003591054,0.089570075,-1.9752398,-0.91577643,-2.6596928,
			-0.90630776,-2.106279,-4.077946,-0.65852875,0.9889195,-0.72346234,-0.10101626,-1.265919,-0.13933536,-0.6662008,-0.5208653,-4.7395606,1.8759937,-1.4819877,1.2900815,-2.0064657,0.930039,-0.4553032,-0.44618982,0.4368859,-1.7715651,-2.432414,-1.1708668,-0.65658873,-1.0236892,-1.4368204,0.886008,2.1461687,-0.32001463,1.0024513,-0.75851375,-4.213964,-0.5059873,0.081287466,-0.34750035,-0.16544457,0.016834576,-2.0101476,-1.9349804,-1.049994,
			-0.3083549,0.31173387,-2.654563,-1.6439185,0.59148943,0.38148698,-0.39639598,0.03770594,0.7516858,-0.1562293,-1.1599176,-2.1736748,0.32638183,-1.5739588,0.22291191,0.99852633,-0.5195617,-0.11298384,0.49340066,1.014932,-1.0440689,-2.8425245,-1.3324343,-0.39776754,4.544972,-0.28991136,-0.6615981,-1.2140154,-0.38744995,-0.19217837,-0.58713454,0.33463016,-0.12873657,-0.12471172,-0.7065388,-0.643695,-1.3256994,-0.72929,-1.4240307,-0.6769872,
			0.22485514,0.6985293,-0.53950715,-1.1029328,-2.1429431,0.6268833,0.84542567,-8.092569,-0.7577218,-0.55803835,-0.6285829,-2.3323588,1.8452729,-0.5825654,-2.481151,0.05929914,0.9299977,-0.020375498,0.4306634,-0.18690905,-0.57271546,-0.40113357,-1.4759116,0.61433995,0.45098302,1.7637482,0.9602686,-1.6852106,0.5445216,-0.020872362,-0.57757217,0.20624134,-0.22225155,-0.13299783,-4.0985923,-1.6437486,-1.4370326,-0.90303844,-0.7686769,-1.6443678,
			0.6616832,0.6983421,-6.8608437,-3.719154,0.6210837,1.292711,-0.22849347,0.20257305,1.1781095,-1.6157571,-1.0962929,-2.116518,-1.567086,1.6054919,-0.06734776,-1.3944353,-0.9730374,-0.9583967,-3.7073681,0.34943518,-1.922275,-0.97051674,-0.082577474,0.88382196,-0.7782768,1.0444136,1.1584412,-0.26364973,-0.5004561,1.9592227,-0.5261279,-4.2649927,-1.1793411,1.732893,1.2143246,-0.542681,2.8718588,0.65211916,-1.7755281,1.9004439,
			0.2310198,0.54848826,-2.8561823,-0.7210759,0.40132394,0.1991575,-8.28787,1.2236559,-0.57357305,-0.035385195,-0.57293063,-0.43407264,-1.2057059,-1.4137096,1.189337,1.7626816,1.3372469,0.35765222,0.64313745,1.9421166,-1.2288814,-0.0813055,-0.17807081,0.1533876,0.7024844,-2.226182,2.0446,-0.6736504,-0.664813,0.8605005,-0.55533785,0.23873232,0.37141562,-2.4872797,-0.21534419,0.45056638,-0.17933439,-0.48131704,-0.9173514,-0.14807856,
			-0.970841,0.4662616,-0.18155208,0.28767094,1.3474312,-0.59866947,-0.015395797,0.17993812,-1.269543,-1.3002495,-0.745627,1.6083764,-0.6926334,2.0887585,-0.34412062,0.3654712,-3.3990023,-2.7054772,0.16778809,0.3962068,-1.1507978,0.040279627,-0.27474388,-0.65185934,0.8495862,0.905014,-0.10504904,0.4767459,0.13720408,-1.3822637,-0.40646467,-0.66350603,1.548454,1.7231928,-0.9245689,0.060053747,1.7510949,1.0638572,-0.79393697,-1.8100142,
			-4.129389,-0.2506485,-0.88278466,0.106679685,0.27022713,-3.1230369,0.4562853,-0.18202399,-0.026997913,-1.3115,1.0794785,-1.2341563,0.38984725,-1.7236463,-0.15812823,-1.745546,0.13769375,-1.0512462,1.725675,3.3073611,-0.96832544,-1.0671725,0.34173763,-2.1958456,-0.21648358,-1.7341903,0.23624785,-2.3514328,-0.23197746,3.031198,-0.995065,0.16417253,-2.846161,1.2025926,-0.27573034,-0.6239883,-1.0749048,-1.0709159,-2.0717964,-3.3686779,
			-0.6666612,0.91032445,3.7268343,-0.6369143,-1.1253161,-4.076966,-0.50669837,-0.9690892,0.24640515,-0.36196083,-1.3518561,0.6220054,0.30649045,1.3524876,0.17931134,-1.8928322,-1.927741,1.312636,-4.213852,-1.0942923,-0.8511537,-0.06761392,0.24676567,4.576448,0.5504959,0.54634744,1.3103334,-2.9878445,-0.0015813565,2.6046357,-0.38553545,-0.92241627,-4.0340915,1.5528797,0.6804093,-0.2681876,4.9532185,0.2197145,-0.62257934,1.7425649,
			-4.6573205,-1.9174455,-1.8919488,0.40498677,0.21998191,0.63439846,-0.6990087,1.4035836,-1.5482504,-1.102535,0.18105927,0.79458237,-0.93687713,0.69757545,-0.45367387,0.59278125,-2.0037694,-2.617686,-0.19263624,0.25444707,-1.626133,-3.2586439,-0.41942838,-0.7457075,-0.8437205,0.7050168,-0.62384087,-1.3348553,-0.9763413,-0.34054884,-0.7263501,-0.8786933,2.0710304,-2.3469076,-0.16846883,-0.32443124,1.0615014,0.58616394,-2.42292,-1.8024949,
			0.03770101,-1.6958408,1.0623512,-1.192555,0.14240055,0.14214818,0.73563486,1.3998723,-0.0898323,-0.9199694,-0.5753564,1.1795316,-0.054929413,-1.6936678,0.25319928,0.21997704,-0.24522817,0.27448347,0.42678198,0.49989325,-0.1980206,-2.5481477,-1.3966151,3.2380326,-0.39795622,-0.7737266,1.1332784,1.7794162,-0.8277812,-1.2364928,-1.0800098,-1.6957968,0.81710196,-0.85824585,-0.7740185,-0.95276785,-0.84965396,-0.84470415,-1.0398785,-0.25346413,
			-0.110470615,0.90599984,-1.0284687,-0.22127563,3.2098005,0.9457784,0.5564887,0.56649125,1.0375508,-1.8994622,-0.19916207,-0.7886627,-0.7941645,-1.120757,-0.6382994,0.67945695,-0.07373173,-0.7050923,0.8820774,0.65493387,-0.024687145,-6.8266683,-0.20465878,-1.9496967,1.1471453,-0.15069403,0.44146162,1.8361197,0.64375705,0.78130275,-1.6099422,-0.46043026,-1.2399176,-0.32953718,0.29744098,-0.63023156,-0.12599953,-0.70774406,-2.3310604,0.2222489,
			-1.7191948,-0.6546679,0.7256183,1.4569224,0.9654091,-1.964478,0.20924154,-1.1486508,-0.5045874,-1.7301593,-1.0333034,1.188616,0.41127074,-1.3830148,0.41003245,-2.4926598,0.61493385,1.0189917,-0.0786843,1.587883,-0.68127096,-0.029283702,-1.7431654,-0.30429825,0.47004625,-1.0837256,0.95092887,1.12185,-4.1181498,-0.46866372,-1.0854646,-0.33809906,-0.76180655,-1.9946423,0.16257575,-0.23585428,-0.57042503,-0.71833235,-0.8817743,-1.0342674,
			1.7342758,0.42238027,-0.7933845,-0.47375035,1.1070704,2.4947352,-0.21536787,0.57788503,1.4786363,-1.7903254,-0.97086686,1.0300691,1.795447,-0.21299595,-0.12019157,0.72841936,0.6553507,-1.2989967,2.110252,0.013269105,-0.022812873,-6.001963,0.8587993,0.16188227,0.65866363,0.33027807,0.025382377,-1.05071,0.34424758,-0.17597142,-0.1007462,0.27811015,0.91281646,-0.39033154,0.26309097,-0.18134055,-1.7150587,-0.62254685,-0.39124456,-0.029332085,
			-0.060299695,-0.4821935,0.9744091,-1.5398841,0.5757654,0.13930932,0.33861247,0.54195404,0.6271863,0.81917536,-0.98668617,0.4253965,-0.7899312,-0.86669946,-1.5769393,1.1865997,0.6128888,-0.018767212,-6.369776,1.046108,-0.22994916,0.05062069,-0.9447289,-0.36502495,-0.36902493,-0.60061044,1.7346637,1.5578437,-0.462865,-2.2418392,-0.5953991,-5.6661944,0.08216108,-0.5697139,-2.8180096,-0.25802824,-0.47122347,0.70098984,-0.8150031,-1.083112,
			0.7145305,-0.5476024,0.64288586,-2.2046936,0.37031916,0.71723765,-1.124279,-2.414723,-1.476009,1.3692627,0.8270185,-5.3291936,-1.6408225,1.4976286,0.69598424,1.0450672,1.1263133,-4.359165,0.08945853,2.148696,-1.1010957,0.09986999,0.112751655,0.44888958,-1.046056,0.969345,-1.5809745,0.55423295,-3.5609443,0.18261445,-1.7396615,-5.2519712,-1.729638,-1.1531954,1.4120684,-0.43921226,-1.3373815,-0.7536627,-1.2767154,0.378488,
			-3.3256195,-1.221887,0.66946614,1.5050206,0.095742986,1.3057375,0.013174524,-1.8755753,-0.87939095,-1.5805303,-3.046605,-2.3783185,-0.042459637,-2.354703,-0.04827337,-1.8105345,1.5467262,0.729054,0.553148,-0.18357064,-1.103735,-2.528648,-0.159343,-0.8873965,-0.8315224,-2.3516595,-0.13238609,-0.65718776,-2.1222675,0.8489586,-2.6459353,-0.67380565,0.70700467,-1.5094744,0.13379568,-0.11920604,-2.2820892,-1.5471213,-2.236859,-2.6161122,
			0.52167517,0.75690264,-0.47413817,-2.8418725,0.12975384,0.4920681,-0.13545853,0.6841533,-0.18721873,0.41684017,-0.4250338,0.63552135,0.882098,-0.40059614,0.5883599,-2.01333,0.83260906,0.46771148,-0.8102019,1.557014,-1.4316498,0.040420048,-1.6322759,-0.3710839,0.08137903,-0.092125006,3.3622396,0.66563314,-0.17456858,-0.8913858,-0.16834238,-1.5569007,-0.16044313,0.67763466,-1.5689874,-0.49870735,1.2592288,-2.3140557,-1.1826241,-1.5032132,
			-0.43351236,-2.103077,0.1718945,0.11492846,-0.51234144,0.09729998,0.078633934,0.4082318,0.18434553,-1.2056239,0.20277715,-0.1392215,-0.6023135,-0.43338025,-0.5260863,0.8061085,-0.45568305,-0.028974935,-0.041138906,1.1640004,-0.1791146,-0.0038567993,-0.04832149,2.805252,-0.10894173,0.23117037,-1.337583,2.0099308,-0.24761406,-0.6401013,-0.6715591,-1.3336351,0.5494446,-0.7703636,-0.42250144,-0.0391028,-0.7450769,-0.146918,-0.69580954,-0.87501746,
			-2.454583,-0.1584868,0.18738438,1.7595915,0.64683783,-1.0070962,-0.27711096,1.96992,-1.8128098,-3.1680865,0.8588175,-2.4350348,0.41146088,0.45437104,0.47980642,2.1456883,0.83941674,-1.4332545,-0.3723586,1.0594213,-0.8596962,-1.9034017,-3.6057627,-5.4308324,0.20047452,2.644657,0.5963573,-2.8959727,-0.9606141,-0.1674776,-1.2655548,-0.6540147,-2.4550009,0.43127313,1.1500365,-3.222501,-0.1802671,-0.45074385,-1.724541,-1.9995996,
			0.13337289,0.73282915,1.8719774,0.4461206,2.5008438,-0.40680113,-0.46062416,0.32631055,-2.119241,1.6705611,0.37429318,1.6724397,0.5548826,-0.19206771,0.38662615,0.42218506,0.3207962,0.28603026,1.1767678,0.23641208,-0.6200478,-8.458056,-0.13038221,3.2937076,0.10343607,-0.053980563,0.6444485,-1.0218915,0.47849494,-0.9670212,0.3673821,0.52438724,-1.1814102,0.01173686,-1.5200951,0.30671436,-0.58229923,-0.2369267,-1.1032243,-0.35854673,
			0.7457842,0.5479279,-0.2417974,-3.4960883,-0.11544027,1.3083442,-0.9427296,-1.4234223,-1.6742029,-0.33285743,0.0019605372,-2.4215302,-2.682966,0.73541355,-0.81828946,1.379069,0.81103206,-0.45092067,-1.0185931,-1.1188353,-1.644675,-1.2470863,-2.0021138,-1.1065797,0.0790479,1.2276106,-0.1982312,-1.7354074,0.36550254,0.8248817,-2.026529,-0.6825527,-2.0063565,-2.2251084,-4.443916,-0.8513384,-2.3408725,-2.2303202,-2.6843307,-0.35865313,
			-0.3954695,0.42191774,-0.48191544,-0.43457502,0.33856767,0.6969281,-1.558817,0.68783927,-3.1932826,0.53458685,-1.8099564,0.9320356,-0.9158718,-1.6379069,1.122998,1.1914608,-0.10137774,-1.9931,-0.008996751,2.3797703,-0.23882626,0.06152977,0.34030053,0.22270931,2.2342584,-1.5934494,2.4089077,-0.038759682,-3.9964583,-0.46326157,-0.42416018,-0.18865426,0.21900313,-0.78347087,0.74395734,-0.9377328,-0.19765103,0.6937035,-0.6357915,1.6101495,
			-2.1685553,-3.4695451,-0.81651133,2.269508,0.093632385,-2.9407692,-0.036276907,-1.7492964,0.16063735,-3.443554,-0.35979587,-2.9125774,0.9291024,-0.76202965,0.11736668,-1.2254057,-1.1463288,-1.3240596,0.37861803,-1.0026385,-0.93993723,-0.41783795,0.7052803,-0.7209664,-0.92661357,-1.6256719,1.1566414,0.46461406,0.58584124,1.5731069,-1.988617,-0.781583,-1.0079433,0.42347035,-0.5037227,0.08728321,-1.5144935,0.5410934,-1.9518108,1.1474305,
			0.16499281,0.85761416,1.4732639,0.26049256,0.952784,0.40045255,0.5734919,-0.9538526,-2.1848483,0.38229293,-0.42471972,-2.125153,0.06749102,1.0073732,-1.4828416,0.7885944,-0.26059222,-1.2739056,0.51849604,-0.2763456,-0.13182542,0.025798254,-0.8775052,-0.16947572,1.6703731,1.3814791,0.37198275,0.1193435,-2.7499309,-0.14415629,-1.0301045,-0.50503886,-0.9860422,0.66868377,-2.805878,-0.048853524,-0.72170097,-2.0124395,-0.66290474,1.1716583,
			-1.7152871,-2.046113,0.028596532,1.2539798,0.4699029,-1.157248,1.3126678,0.21779542,-1.011909,-0.38042247,1.6507659,-0.6343997,-0.4087865,-0.18358298,-1.4192693,1.6361568,-1.7259468,1.2216392,0.9226178,2.6385627,-1.4001689,-2.684734,-0.5923051,-1.443373,-1.625887,-1.2708361,0.009988331,1.9151111,-0.72363204,-1.317232,-1.5358958,-2.5358922,1.6865821,0.0645653,-3.0280988,-0.32221702,-1.1016712,0.86670184,-1.820261,-1.4795045,
			-0.39957118,-0.86748093,-3.1067376,-0.24956617,0.7103939,-0.47534293,0.5769732,-0.07820203,-0.34124783,0.14960787,-4.5079966,0.10989117,1.4717604,-0.29757044,-1.8313531,-1.4005246,-3.3753326,1.2209951,-1.4769343,-0.862592,-1.6984189,-1.880986,-0.7700613,-0.5436365,0.3931359,-0.4663291,2.3218477,1.0770478,0.2623433,1.5812862,-0.561269,0.11109427,0.6125006,0.47090325,-1.1272613,-0.2496573,1.1097162,-3.8254793,-0.86393404,1.1706067;

    h3_out <<
			-0.08633633,-0.9526239,-3.0020053,-1.5806366,-0.26141286,-5.4078593,0.8786207,1.658363,-2.4933758,-2.2599142,1.279017,0.7921992,-0.50233305,-3.7052639,-1.5538279,-4.986252,-3.1767004,-0.29201576,-0.15375249,-1.4885178,-0.9259076,-0.5051559,-1.4500955,6.078488,0.15834135,-3.6477203,0.43877125,-1.03332,-0.33004317,-0.59704727,-2.8114877,-1.7100421,-2.059135,-1.7883295,-3.04077,0.48948205,1.7236004,-1.9587848,-1.4179715,-3.6863737,
			0.6938553,-1.1608578,-3.4361064,0.36108392,-0.16207385,-2.1222894,0.6334191,1.9136878,-1.4891901,-0.51985955,0.98044485,0.40654,-1.7446235,-4.583544,-1.703571,-3.0038218,-1.7765626,0.8436741,1.0383161,-3.4174814,-2.1190174,-0.23455682,-3.213709,5.861271,-1.4087161,-3.8979661,0.080735676,-1.499662,-0.11373022,-0.8136977,-2.000127,-2.9139411,-1.7765001,-1.5331324,-2.4335082,0.984102,0.8400664,-0.27609503,-4.0561934,-1.3333044,
			-0.28551248,-2.3644288,-3.5711915,-0.222354,-0.9883671,0.07028631,-1.1800132,1.2427744,-0.3541697,-0.20290273,0.3016067,-0.7773296,-1.170225,-3.8472085,-2.591034,0.69097394,-2.152453,1.2032275,0.54992527,-3.7769809,-1.8250238,-0.252683,-3.4633927,3.3953032,-0.5943414,-2.7937422,-0.42780674,-0.8593294,0.4304518,-0.9370629,-0.73330295,-6.828441,-1.3437455,-0.8494707,-0.13227567,0.494277,-2.8182192,0.5444067,-2.4187632,-0.21860582,
			-1.2214335,-2.9084053,-3.7172153,-1.5751425,-0.90204,0.4728012,-3.4252777,-0.26191497,0.48992145,-0.38182482,-1.1170601,-1.2011306,0.0713417,-1.2803502,-2.2686965,0.7501252,-1.2099549,0.22152495,-0.6805404,-1.6101142,-0.12110446,0.6965995,-0.41243485,4.429556,0.9587525,-2.8207712,-0.050634902,0.06832943,-0.26221767,-3.0860975,0.4080748,-5.6334023,-0.02009909,-0.82539684,0.44577587,0.4917431,-5.9305916,0.4570301,-1.3715677,-1.4540652,
			-3.025566,-2.7271843,-3.3625169,-0.63307166,-0.5881482,0.6929866,-2.58968,-0.23915394,-0.5639388,-0.0038779124,-3.2776802,-2.724911,0.99214166,0.47502607,-0.78922355,0.31653452,-0.3876083,0.3018799,-1.8218461,-0.22705872,0.61344796,-0.02156215,1.7834392,5.2479196,-0.25513417,-3.6374595,-1.036567,-0.8798879,-0.70636046,-2.9833035,0.860203,-5.5699477,-0.2949548,-0.3586257,-0.6248847,-0.44227612,-3.5311801,0.41964465,-3.1062496,0.060288783,
			-1.4053041,-1.466513,-3.6948872,-0.07965178,0.47475147,-1.5080129,-1.6058657,-0.51223737,-0.89073616,-0.30522525,-4.5594378,-2.6961412,0.9382243,0.69197255,0.7776752,-3.092908,0.47958517,-0.933275,-2.371266,0.072132125,1.2905568,-0.20839603,0.18653676,4.0844917,-0.8081548,-2.7821605,-1.3198729,-1.6783181,-1.3307985,-2.9524841,0.30016127,-5.7062554,-0.25552037,-0.3115465,-1.7249331,-2.033079,-0.73110145,0.58267826,-1.381594,0.9607316,
			-1.0296098,-0.48968416,-3.1370492,-1.2955642,-0.36064604,-6.6748624,-0.3556444,-0.30909556,-2.5658357,-2.1743107,-3.84721,-1.5776745,0.32583147,0.61765754,0.68555075,-5.3360443,-0.62760127,-1.7047629,-2.7619693,-1.0174298,0.4939017,-0.42794466,-1.5202763,1.8411005,0.7047597,-0.4678877,-0.87222147,-0.6293181,-0.9754232,-1.1739091,-0.35890839,-6.3076196,0.102712214,-0.8091694,-1.7888571,-3.163826,0.060928144,-0.4740813,0.32197613,0.9389146,
			-0.13975751,-1.6118814,-2.6383452,-1.7230735,1.1679338,-5.9344964,0.71358734,1.6785612,-0.6637197,-4.01637,0.81424874,0.548821,-1.176444,-3.5675352,-1.2526141,-7.833199,-2.3618424,-0.3704409,-0.39564857,-0.19672559,-0.372055,-1.858919,-0.5024487,3.8758285,0.40055528,-2.4210293,0.43397868,0.6559106,-1.2033942,-1.9073019,-2.5995712,-0.5250248,-1.3991069,-1.5170947,-3.5019984,1.023702,0.65058476,-4.2653275,0.366649,-1.2166904,
			0.81885,-1.5395018,-2.3093908,0.5239069,1.0503384,-2.466093,0.8541403,1.383568,-1.27613,-0.5858556,0.9724341,0.6572717,-0.11424781,-4.3665667,-2.146111,-3.9980793,-1.2377324,-0.59069246,1.0761718,-1.2270974,-1.7851171,-1.2346749,-2.1732152,4.5776687,-0.6374112,-2.5651135,-0.3168139,0.49000168,-0.14860529,-2.8068035,-0.46460447,-0.40264767,-1.8244742,-0.7566745,-2.9426277,0.9343082,0.94764155,-1.7237917,-1.2257138,-2.2854702,
			-0.33814836,-1.8051249,-2.5225763,-0.35586005,0.9354581,0.01294645,0.10320129,1.1677594,-0.16657183,0.36954594,0.7207825,-0.67310804,0.5360894,-2.6988435,-3.4457333,0.55795944,-1.5340279,0.09852603,0.7412669,-1.7136106,-1.8143494,-1.4195507,-3.4730675,3.4071486,-0.88433474,-2.7970774,-0.8594388,0.71118104,0.5719534,-2.9056566,0.397762,-1.3381702,-1.263719,-0.66682315,-0.74109054,0.6573678,-0.8281836,-0.25334927,-2.4641948,-0.60873544,
			-1.4234571,-1.392949,-2.2181084,-1.6680423,1.0122336,0.48136425,-2.112283,0.67136407,0.48531327,0.49319172,-0.31296408,-2.0713923,0.75112885,-0.31500834,-2.0198395,0.6289021,-1.4040283,0.32155988,-0.64464283,-1.4420247,-0.6707562,-0.09302613,-2.526305,2.3852544,0.33471426,-1.8775744,0.43175483,0.5984278,0.8004489,-3.5107536,0.88660455,-2.0816612,-0.94186646,-0.8395869,0.6281422,0.31479332,-3.611623,0.3873563,-2.5699825,-0.49843752,
			-2.5089545,-0.5296174,-2.5455532,-0.51692677,1.0621011,0.50669205,-3.8555975,0.20064558,0.48567513,0.2757667,-2.3212082,-2.9807816,0.42999592,0.46648678,-0.008285176,0.15673178,-0.27319342,-1.0170859,-1.6439817,-1.3333385,0.36564443,-1.1741675,-1.1584902,2.3906343,-0.90162474,-2.2239106,-1.0028156,0.6194819,0.6598768,-3.1435554,0.57870334,-2.805613,-1.1278105,-0.3018188,0.4047601,-0.52594805,-1.2662926,0.7781856,-1.3335164,0.8311785,
			-1.3694012,-0.08544093,-2.860201,0.5585434,1.2467968,-2.082845,-2.9386883,-0.5757769,-0.58500975,-0.9828649,-2.9964092,-2.922911,-0.56308895,0.7128931,0.59730685,-4.520795,0.65112245,-3.1527023,-1.4583355,-1.7160591,0.9609892,-1.3876464,-1.9930127,1.4910709,-0.36110353,-0.54531366,-0.9090643,0.553889,-0.01164149,-2.0664017,-0.29758742,-4.32892,-0.65586036,-0.34155548,-0.5658214,-2.0693076,0.05537444,0.783521,0.39763126,1.1471498,
			-1.261317,-0.11187639,-2.8400645,-1.203487,1.0608348,-6.7650757,-2.4386547,-0.84817326,-0.94576186,-4.364612,-3.0093908,-2.0167868,-0.90211743,0.17562824,0.66799206,-8.186408,-0.22378565,-2.639022,-2.5978417,-2.5555496,-0.1947961,-1.9071823,-2.7399893,0.70389664,0.27026817,0.3852487,-0.9514692,0.35553625,-1.1848283,-0.18211661,-1.015864,-3.13369,-0.5743533,-0.5709388,-1.4120935,-3.2458425,-0.22027017,-0.104315996,1.9133289,0.9321932,
			0.37710717,-1.6214231,-1.0424682,-2.123354,0.10141862,-6.740942,-0.95518416,0.12654877,-1.6593219,-5.0641375,-0.17294858,0.49765256,-0.4150562,-3.2343216,-0.9094524,-6.186805,-2.750289,-1.6501471,-0.17284645,0.5507181,-0.60844046,-0.32113707,0.52272004,-0.60406965,-0.19379021,-2.549352,0.36637232,0.7759819,-2.6351175,-3.1287925,-0.7208519,0.2172505,-1.2357342,-1.1069962,-2.9150226,0.55989873,-1.8910573,-4.3654137,0.8881759,-1.7862293,
			0.46308923,-0.8128146,-1.3390355,0.75899225,0.031029454,-2.5688963,-0.12632534,0.07955512,-1.4817451,-0.73383355,0.08298745,0.9873661,0.60647833,-3.5269163,-3.7666209,-4.2072105,-1.2809232,-1.1905025,1.1228157,0.1539941,-2.3613687,-1.6109488,-0.23944339,-0.12447629,-0.5312911,-2.397058,-0.41307184,0.74668556,-1.990764,-2.922177,0.5644201,0.51787853,-1.2329344,-0.95207024,-3.112139,0.68342745,-0.5215977,-2.3537903,0.32442635,-1.6468594,
			0.051476102,-0.33824974,-1.2330837,-0.4470837,-0.14543048,0.38792732,0.56645614,0.2509543,-0.78366554,0.5135458,0.5849808,0.2088309,0.8086011,-1.2460562,-2.3927472,0.30996427,-1.0729765,-0.22011587,0.47273716,-0.68547726,-2.699393,-0.35875776,-1.8136901,-0.25398195,-0.88336,-2.4105668,-0.2557612,0.42699125,-0.3749116,-3.6946728,0.99067193,0.616779,-1.1062796,-0.66445196,-1.8968877,0.42570058,-0.50267076,-1.0452152,-0.08698722,-0.18341005,
			-1.4498731,0.016296277,-1.0688936,-1.5275731,0.10497574,0.41985938,0.06386588,0.1982739,0.049426954,0.7678755,0.4320412,-1.2642127,-0.09934591,0.31670946,0.07881847,0.49272865,-1.3688711,-0.11644245,-0.75774044,-1.3084931,-0.5053679,-0.09109902,-2.8361473,-0.5198863,0.13279596,-1.5322927,0.7745473,0.23966043,0.2785785,-2.8829422,0.41954035,0.31551665,-1.0734129,-0.66880673,-0.00034166555,0.22041419,-2.3848338,0.11385934,-0.744852,0.22033694,
			-3.267071,0.36052188,-1.6866775,-0.30504733,0.017339068,0.5096859,-1.939148,0.7302162,-0.63753784,0.29237515,-0.5987349,-3.065548,-1.1130581,0.37015393,0.569592,0.19083436,-0.25104916,-0.97303736,-1.036864,-1.5655956,0.26779547,-0.32128218,-2.7232597,-0.6561109,-0.76851165,-0.40939215,-0.41230825,0.49797517,0.90836936,-1.5532795,-0.44813135,0.104598224,-1.0423834,-0.46131083,0.71191317,-1.0795789,-0.27474618,0.5422656,0.01397196,0.8103754,
			-2.533555,0.16648504,-1.616476,1.0317172,0.20961685,-1.4132692,-3.465967,-0.16057988,-2.0459576,-2.1276402,-2.1137054,-3.1154656,-2.3341815,0.4072832,0.18101528,-4.655981,0.6316293,-2.693373,-1.5675131,-2.0399907,0.3533586,-1.478649,-2.3457017,-0.24429546,-0.6343291,0.3277099,-1.2635621,0.6103094,0.64611715,-0.264386,-1.7544892,0.007890669,-0.45577762,-0.3072816,0.60138464,-1.7856607,0.6141708,0.8615549,1.0289794,0.12598735,
			-1.4561287,0.21458733,-1.5411631,-1.719742,0.12732433,-4.5701313,-3.5356925,-0.350858,-1.7523855,-7.2314386,-2.3367662,-2.3667018,-2.09406,-0.91474146,-0.9148228,-5.650229,0.025213998,-0.12905717,-2.8223948,-2.317277,0.10036588,-0.18569352,-2.8606853,-0.74186015,0.013401106,0.8582839,-1.0285057,0.30811787,-0.57193863,0.99527246,-1.5731914,-0.31662273,-0.59306085,-0.28780705,-0.23328502,-2.4452064,-0.16737662,0.08233199,1.9822756,-1.0445539,
			-0.5460254,-0.5348788,0.48469418,-1.0834478,-1.1619179,-6.3318977,-3.1123831,-1.142737,-1.4860228,-3.9811354,-1.3240502,0.060470622,0.09493824,-2.9468203,-3.083095,-5.3316145,-3.1675744,-0.859076,0.20183282,0.32724237,-1.6291827,-0.9631719,-0.32710814,-0.6129964,0.28923523,-1.2705194,0.039749105,0.5816319,-2.911565,-1.7794182,0.64717346,0.35634863,-0.51488566,0.36263907,-3.4906266,0.021685561,-2.9631307,-3.777702,0.62005264,-0.5330579,
			0.40419024,0.041699313,0.10970592,0.83785737,-1.3452573,-2.4018726,-2.0473022,-1.35902,-1.1776613,-1.0254846,-1.0104076,0.60879344,0.95542574,-1.8514936,-3.2118251,-4.2210803,-1.1835811,-1.6753265,1.1795629,0.7353124,-3.9098482,0.29050222,0.6759154,-0.70755106,-0.27287993,-2.1904337,-0.39820457,0.09773666,-2.263856,-1.8664911,1.1166053,0.56328523,-0.8597507,0.6347765,-3.4036646,0.29120404,-2.7324317,-2.9654648,0.40206242,-0.02848212,
			-0.1837693,0.8059085,-0.07861212,-0.047180217,-1.4357007,0.5092834,0.051007096,-0.89180404,-1.3112586,0.28662354,0.11854295,0.4042621,-0.039519392,-0.29573882,-0.04130712,0.38953096,-0.7215848,-0.81490695,0.44491234,0.33088732,-2.5954342,-1.1368752,-0.02308469,-0.4885745,-1.1912007,-1.3597088,0.5162092,-0.15883455,-2.3784702,-2.472986,0.68308973,0.6604974,-0.52056396,0.18187723,-2.4690218,0.10635822,-1.8957046,-1.864725,0.3503088,0.14944628,
			-0.95370346,0.77979386,-0.24001312,-1.2869936,-1.1883676,0.3677147,0.63501316,-0.47873744,-1.3980603,0.36195564,0.5936855,-0.4351378,-1.3171633,0.18902074,0.7338914,0.59569776,-1.5876102,-0.48396018,-0.7700831,-0.30393842,-0.56753033,0.4924963,-1.1057935,-0.45465317,0.3998244,-0.11226115,0.768148,-0.26039633,-0.91925794,-1.155693,-0.47609583,0.5189856,-0.30531064,0.811241,-0.6894694,0.05935252,-0.88396883,-0.19739035,0.0705802,0.09888671,
			-3.0786219,0.67790866,-0.29848155,0.1404995,-1.3026625,0.47552627,0.25996467,0.28289402,-1.5220672,0.07177387,0.48513848,-2.37019,-3.0270655,-0.20071049,0.52137196,0.4594393,-0.034273192,-1.0266638,-0.85877347,-1.157878,-0.23455606,-1.1403638,-2.2248363,-0.36814728,-1.019201,0.4437664,0.3790365,0.095221296,0.31029475,-0.14693694,-1.6636428,0.59357303,-0.721505,0.5729986,0.11692433,-1.2442739,0.391097,0.19105618,0.40328786,-0.26127353,
			-3.2771318,0.11183844,-0.22288279,1.2322994,-1.2501794,-1.0382068,-1.673279,0.7544301,-1.3937165,-2.360511,-0.28333414,-3.726494,-3.4333816,-0.8412854,-1.2530496,-4.0972824,0.5970043,-2.7088585,-1.1782768,-1.9529861,0.39047754,-0.04563194,-2.3414323,-0.30321568,-0.21768345,0.5900257,-1.1988738,0.45349258,0.7574901,0.6377978,-2.2930636,0.4802595,-0.63508123,1.0832243,0.81216305,-1.7377201,0.7049637,0.67886215,0.8098202,-2.3341978,
			-3.6411264,-0.38988838,0.01898851,-1.1498698,-0.81639135,-2.7878654,-1.8580118,0.13790654,-1.4133062,-6.9026704,-0.6284913,-3.746003,-3.1894276,-1.1053644,-1.2581724,-5.963561,-0.513989,-1.611934,-2.4686158,-1.4987829,-0.8589059,-0.9097521,-2.001253,-0.48189813,-0.07848742,0.3233566,-1.3665975,0.61137414,0.1743111,0.13096464,-2.3742561,0.31759048,-0.19083099,0.98875594,0.048625883,-1.9616127,-0.4780967,-0.13263951,0.6686577,-1.5992621,
			-1.0147009,0.31969166,0.47029814,-2.0739727,-1.499085,-5.410333,-2.3789568,-1.0409019,-0.06252171,-4.943785,-2.867742,0.4242418,1.3408911,-1.6286054,-2.2018728,-7.3419275,-3.1534376,-2.6363232,1.6017835,-0.61736006,-2.7345815,-0.9900973,-1.0563554,-1.2977724,-0.19546439,-0.62464666,-0.24161729,-0.5631532,-2.5972083,-0.7584274,1.0425391,-0.15297076,-0.4177818,-0.4125205,-2.4898856,-0.73179555,-4.2666473,-4.151903,-0.36174446,-0.3437046,
			-0.4494021,0.5069663,0.66334486,0.7497142,-2.0523949,-2.4950244,-3.6293366,-2.0937774,0.11211581,-1.0286392,-2.7273755,0.45021617,0.56820405,0.037124466,-0.25995153,-4.6273184,-1.3876976,-0.65913624,1.2272238,0.49255463,-3.7629468,-1.5751504,0.6354247,-0.68129504,-0.13892561,-1.2958884,-0.51089364,-1.2697766,-2.4730554,-0.8846134,0.86684096,0.11512695,-0.053655785,-0.86113065,-2.9909585,0.64760923,-2.8328917,-2.8173726,-0.7118799,-0.64829105,
			0.5941236,0.51378274,0.47385114,-0.35756335,-1.3665255,0.3268686,-2.0282483,-2.4158916,-0.22569987,0.32860446,-1.1264766,0.8102283,-0.99307036,0.47838998,0.7569222,0.43161565,-0.8100969,0.019511577,0.41103038,0.443754,-1.4784578,-0.21228169,0.82022285,-0.39604688,-0.86616266,-0.2570353,-0.15540612,-1.7407291,-2.058218,-0.38963515,-0.061340433,0.4410353,-0.02853981,-0.64048034,-2.9115837,0.4681092,-0.78259325,-1.9622511,-0.22826456,-0.54474115,
			-0.17297335,-0.14471745,0.22196445,-1.6104598,-0.5082687,0.4224052,0.2074857,-1.8159865,-0.19315928,0.72752875,-0.07179284,0.57828945,-2.3676999,0.24162291,0.48714554,0.5351988,-1.4340056,-1.0858713,-0.71545106,0.24275078,0.29188633,-0.07330121,0.05623622,-0.42701823,0.13832529,0.32209092,1.0525761,-1.6550895,-2.230103,-0.08358318,-1.7034832,0.53229594,-0.29461473,-0.66961044,-1.0322472,-0.012661282,0.21092795,-0.23209369,-0.14441128,-0.22106701,
			-2.1980026,-0.35184696,0.37021858,-0.5477052,-0.9295645,0.4608894,0.77651554,-1.3368293,-0.30685848,0.36648273,0.6408445,-0.62278694,-3.5990589,-0.8705015,-1.6143751,0.302187,-0.074139886,0.21249166,-0.9849806,-0.20480348,0.6161471,-0.6615064,-0.20138419,-0.22247143,-0.6537023,0.477596,-0.5119663,-1.1851853,-0.95856506,0.80361134,-2.843771,0.47062302,-0.38400596,-0.40984276,0.15905981,-1.4556276,0.61510473,0.31965914,0.012101197,-0.7462684,
			-4.317384,-0.58379734,0.3710645,0.6317846,-1.7750492,-2.0728893,0.30604708,0.050112944,0.042571917,-1.2737675,0.53778213,-2.634484,-2.7343986,-2.2224023,-3.461138,-4.365143,0.6105131,-0.76314443,-1.832139,-1.3038605,-0.02747105,-1.3138795,-0.78390354,0.19704996,-0.37982395,0.18039174,-1.2243041,-0.6130562,0.36022645,0.27069744,-2.4916112,0.44762024,0.34600976,-0.6837967,0.945646,-2.1942801,0.3998114,0.9220681,0.46693638,-3.3837626,
			-2.9966278,-1.5636736,0.48595288,-1.3656962,-1.263146,-5.188945,-0.44061762,0.82883394,0.13103557,-5.8555593,0.020358747,-2.599059,-3.2855792,-1.4915203,-1.3166927,-8.519378,-1.0747769,-2.9714603,-2.6442723,-1.7027712,0.09118752,-1.3049085,-1.1005412,0.066056535,-0.6141425,-1.1572903,-0.5891429,-0.5754323,0.94821906,-1.4120278,-2.6504166,0.28571752,-0.934796,-0.5133431,0.79391956,-3.671669,-1.2736831,0.22585571,1.5343165,-1.6184958,
			-1.1881117,0.43221804,0.88780576,-1.5733396,-3.2224011,-5.068207,-0.7202891,-1.1343901,0.92774266,-4.1391397,-3.082603,-0.7305305,1.062323,-0.18162918,0.8684821,-7.44398,-1.0801015,-2.5058331,1.5421556,-1.8687695,-4.3347793,-2.025301,-1.5383987,0.511938,-0.3149428,0.019976884,0.028528847,-1.8159041,-1.5040363,0.7278805,0.92736995,-2.177709,-0.021766668,-1.4620618,-2.2379515,-0.7229685,-3.9022114,-4.2895474,-1.9328595,-1.687041,
			-1.8156605,0.08984675,0.83499265,0.48250434,-2.0821695,-2.3821154,-1.9391397,-2.267828,0.87454337,-0.8269181,-2.841564,-0.5798788,-0.45455644,0.7470418,0.9631422,-5.1798587,-0.07849333,0.67492455,0.98777825,-0.32743743,-3.1410317,-1.4085002,0.21414767,1.636642,-0.06957758,0.05630407,-0.5724161,-3.3642664,-1.6329243,0.74601513,0.21491314,-2.3404613,1.1578537,-1.0644526,-3.2141054,1.0427316,-1.3713076,-3.3107803,-2.609551,-1.1349739,
			-0.5165466,-0.76416546,0.7671577,-0.5288942,-0.49558857,0.36972028,-3.4278724,-2.870476,0.44655994,0.30211508,-2.816107,0.49028102,-2.10194,0.5177167,0.44656017,0.3689925,-1.1761674,0.0048608086,0.51878136,0.29293472,-0.5726665,-0.99367034,0.91687644,2.574219,-0.96461344,0.47736865,-0.66109043,-3.2642062,-2.0231225,0.7454021,-1.6934975,-1.7756655,0.96675843,-0.8699546,-2.628171,0.668023,0.32401016,-2.0016437,-1.7854606,-0.8318727,
			0.6166776,-1.8738283,0.5369926,-1.9821693,0.04226874,0.5588303,-2.0389402,-2.326455,0.5466859,0.5342517,-1.4583663,0.86207414,-2.8131723,-0.8368984,-1.6412673,0.5658287,-1.5285054,-1.4250478,-0.7606171,0.623729,0.7881373,-0.04598409,0.58999294,3.5585008,0.30655694,0.5175079,0.6047515,-2.464625,-2.2693813,0.71436536,-2.364347,-1.3126444,0.4351215,-0.8956054,-1.3421153,-0.09535789,0.6213411,-0.3079255,-0.8419851,-0.22986376,
			-0.6847004,-1.8275106,0.76741093,-1.0331134,0.35383913,0.35211816,0.24636228,-2.4888384,0.23399219,0.3884174,0.03383242,0.71195585,-3.0309086,-2.4653518,-3.9230695,0.25322714,-0.14106172,-0.14963558,-1.7170398,0.55507845,0.014439911,-1.2283844,0.72450745,3.2983692,-0.7587642,0.1563264,-0.89146584,-2.7874627,-2.4306276,0.69085354,-2.5508885,-1.011453,0.88703406,-0.9488892,-0.042468034,-1.5624923,0.439951,0.39725417,-1.110585,-1.8158917,
			-3.0587196,-1.3191749,0.7616358,-0.28494388,-1.2837186,-2.5739565,0.71544254,-1.7559961,0.17729539,-0.6218642,1.0024596,-0.84495455,-3.1951075,-3.126602,-3.1296139,-4.612687,0.66640633,1.4270803,-2.0133522,0.25725028,-0.86376244,-1.2953404,0.75286615,4.1817856,-0.5121478,-0.7783871,-1.12356,-2.0619895,-0.83551395,-0.68218076,-2.2902856,-0.9028993,1.1626998,-1.0821533,0.8314679,-2.1517625,0.037035476,0.82899415,-0.740678,-4.0123067,
			-4.9944572,-0.9173277,1.0197188,-1.8531123,-0.7228025,-6.6551585,0.7953456,0.0449392,0.397584,-3.2340434,0.69371307,-2.690399,-3.2380316,-2.6529074,-1.1172547,-9.25986,-1.2705905,0.17609482,-1.718962,-0.18487516,-0.900839,-1.9886222,0.3133942,4.3295817,-0.3937504,-2.5241852,-0.23382932,-2.011722,0.43979293,-1.1411717,-1.9971099,-0.6206919,0.38231665,-1.5453976,0.86712813,-4.6519213,-1.2934494,0.1325332,0.66574466,-3.2248511,
			-2.2176669,-0.27223065,0.4788331,-1.542559,-1.793531,-5.7979345,-0.7863701,-1.3793782,-0.6751818,-1.8760983,-2.965913,-0.34117478,-0.16523531,0.71630776,1.3003576,-5.7067327,-1.735595,0.1919081,0.10693611,-3.4323928,-2.359116,-0.6809766,-0.5731399,1.7431731,0.56707036,-0.26076478,-0.10331945,-3.6294339,-0.60028344,0.67855346,0.35033858,-3.2496262,0.65689075,-1.6874833,-2.8363686,0.22969596,-1.4603062,-3.943366,-2.880473,-1.6670206,
			-2.7722049,-1.4975517,0.2686125,0.007127477,-0.4121787,-1.785249,-1.685323,-3.0726645,-1.1333879,-0.2352391,-3.589326,-0.8304703,-1.5626996,0.818835,1.2793685,-3.5626817,-1.3403924,1.3063027,0.91697,-2.7878995,-1.0861119,-0.1285619,-0.2822796,4.4162707,-0.8899103,0.4972863,-0.72131824,-5.4429755,-0.30714446,0.36844575,-0.9648159,-4.765024,2.5146616,-1.5258656,-3.6136017,0.89201,-0.50251853,-3.32304,-4.0899606,-1.675295,
			-2.0377016,-3.4285715,0.1759586,-0.9795095,0.20091039,0.39063656,-2.2004426,-2.675717,-2.2344797,0.40905178,-3.5642796,0.022347871,-2.6395323,0.011376369,-0.45233375,0.4507002,-1.4279821,-0.2952971,0.37744203,-1.3573346,0.6021951,0.50986224,-0.012379601,6.245275,-0.5968748,0.7163668,-0.5087623,-4.1956935,-2.4931457,0.3185576,-2.5775776,-2.856558,1.906809,-1.1871569,-2.573633,0.58948046,0.40802437,-1.9025722,-3.4332047,-0.60049665,
			0.11752616,-4.042337,0.2837415,-2.0198407,0.31643796,0.48223403,-3.016799,-1.6839333,-1.3784124,-0.13164273,-1.982217,0.73105574,-2.0931227,-1.463308,-2.637216,0.6750732,-1.145562,-1.7386645,-0.5981686,-0.32385072,0.73729324,0.663226,-0.35090816,3.5560334,0.84423995,0.5145378,0.089298464,-4.4552293,-3.5593054,-0.6186102,-2.7313888,-2.7886517,0.4563692,-1.1979551,-1.029482,0.25395438,-0.917076,0.030811286,-1.6402885,-0.08044588,
			0.7118034,-4.2579947,0.6481046,-1.4698294,0.3730189,0.4169805,-0.4030328,-2.215197,-1.9215367,0.57030016,-0.72157824,1.235528,-2.7156014,-2.9599385,-2.7061114,0.05098117,0.10516376,-1.1270239,-1.6675707,-0.05158345,-1.2696241,0.023893615,0.47255537,3.4830692,-0.71434003,-1.1029075,-0.5395241,-3.581539,-4.8031354,-0.8990232,-3.555847,-4.223349,0.70721257,-1.0226443,0.2412952,-1.6521685,-0.025220407,0.06381054,-3.638384,-0.5184594,
			-1.0571206,-1.5229231,0.59062684,-0.66964656,-0.5713865,-2.2353747,0.87036806,-1.8789134,-2.028187,0.18075003,0.35174358,0.72085327,-3.282236,-4.064975,-2.253423,-3.8811347,0.6017637,1.6431837,-1.7708511,0.3144633,-1.764156,-0.002964954,0.5669444,5.32808,-1.3237607,-2.39512,-0.50291944,-3.3530612,-2.9131908,-1.2245755,-2.5948305,-3.5356855,1.389708,-1.6967216,1.0825744,-3.4160776,-0.9483379,0.6290977,-2.7884178,-2.190569,
			-2.0902474,-0.95019513,0.5016526,-2.4669626,-1.062094,-5.4944873,0.7266417,-0.89856553,-1.6794584,-1.2360286,1.2289183,-0.58517194,-2.5242915,-3.4892666,-1.01421,-5.556674,-0.6366596,1.4100109,-2.190962,-0.16395916,-1.385443,-0.5672576,0.27567703,6.8267984,0.45563465,-2.6520596,-0.27805322,-2.8121693,-0.56988126,-0.2700304,-1.7449628,-2.0719197,0.36344862,-2.0416856,0.32956398,-3.8784,-1.6765233,0.061910216,-1.2114823,-5.7756195;

    b1 <<
			0.2624646, 0.6811813, 0.008652268, -0.16511118, 0.2862097, -0.30366826, -0.2529454, 0.1570689, -0.022004254, -0.025208848, -0.37892768, 0.20816496, 0.1699141, 0.3288867, -0.38900396, -0.15157987, -0.087113835, -0.79538876, 0.17918168, -0.3240258, 0.17521602, 0.27539322, 0.6577368, -0.28839412, -0.60429585, 0.07449753, -0.1401754, -0.5770358, -0.094091915, -0.33085313, -0.22647338, -0.15153168, 0.56267864, 0.11009772, 0.21333359, -0.07794554, -0.63352305, 0.13835774, -0.13196176, -0.45110324;

    b2 <<
			0.20750952, 0.01755163, -0.24748003, 0.98589677, -0.9289001, -0.089890815, -0.21182163, 0.641534, 0.03915242, 0.8011416, -0.11468744, -0.47041577, 1.5138283, -0.046599474, 0.21656927, 1.5951817, 0.45344883, -0.7569239, -0.2164704, -0.052319445, 0.6107172, 0.83074015, -0.24846703, -0.7640217, 1.1259791, 0.8200232, 0.16191359, 1.5648264, -1.1385162, 2.2859576, 1.4056822, 0.11828438, 0.99284023, -0.7454746, -0.2788459, -0.5412324, 0.3926509, -0.21270877, 2.813394, -0.25638705;

    b3 <<
			-3.2240784, 1.3325166, 2.259607, 0.016720885, -2.5056427, 2.5315657, -1.2901107, -1.0613555, -2.3401475, 2.6820428, 2.7172961, 0.29590225, -1.967584, 1.6554773, -1.1726093, -0.08567872, -3.3808014, -1.1627268, -0.2380349, 2.1269836, -2.8050845, -1.2233338, -1.7803451, -0.16453584, -4.6203046, 0.9580213, 0.88334113, 1.224715, -0.39979696, -2.1886518, 1.3728633, 1.5049125, -0.10721498, -1.7214136, -1.3019204, 2.6803436, -0.2993033, 3.0170002, -0.30381364, -0.52160525;

    bout <<
			-2.6690712, -1.551103, -1.3425816, -1.2472619, -1.378407, -1.665409, -2.808029, -2.3077297, -0.21581198, 0.07398569, 0.62609345, 0.09630589, -0.34678906, -2.7319624, -2.3467424, -0.053080853, 1.3769349, 1.529227, 1.2860472, -0.34767547, -2.416583, -2.3704178, 0.3270994, 1.392525, 2.1574814, 1.2605984, 0.095390365, -2.471355, -2.3136876, -0.11793199, 1.3782413, 1.5934612, 1.2340282, -0.41256714, -2.6557364, -2.4009843, -0.20827481, 0.05825966, 0.6657703, -0.17057325, -0.65056515, -2.6120424, -2.5935078, -1.8611639, -1.5615981, -1.2995491, -1.6758486, -1.8476664, -2.9216523;

    BN_gamma_in <<
			0.270616, 0.12467623, 0.8779326, 0.9986373, 0.8042924, 0.72870946, 0.8719845, 0.0953725, 0.03743583;

    BN_gamma_1 <<
			2.4363878, 1.6278124, 5.106967, 8.379927, 3.406581, 4.1941547, 6.744719, -3.3406057, 3.9218452, 5.4933095, 5.5973806, 4.036209, 4.2792344, 1.2171596, 4.226556, 3.4985664, 6.038912, 2.3492615, 2.5322623, 5.3490853, 4.187228, 1.7551908, 2.503204, 0.58493394, 9.31785, 5.114675, 6.2754984, 6.1402802, 7.242814, -6.122344, 7.512014, 5.9951468, 2.6657145, 3.1214933, 5.1117783, 5.6005683, 9.516406, 5.0705233, 2.0676484, 7.0527363;

    BN_gamma_2 <<
			0.37641427, 1.0916911, 0.48468807, 0.34057853, 0.7738322, 0.54158485, 0.45987332, 0.44010314, 0.36498713, 0.35374233, 1.1673033, 0.5924042, 0.2866162, 1.3003378, 0.29676202, 0.35715872, 0.59329236, 0.97592556, 0.5423912, -0.9808423, 0.98705, 0.23074019, 0.6445471, 0.38995776, 0.28953126, 0.37158927, 0.46128416, 0.37687653, 0.844284, 0.4324827, 0.53695256, 0.9505152, 0.36124015, 0.68397737, 0.61884755, 0.9546111, -0.34510642, 0.9118583, 0.606569, 0.8172097;

    BN_gamma_3 <<
			0.27576163, 0.10847941, 0.107640505, 0.18375304, 0.19980834, 0.088810325, 0.18037306, 0.22058363, 0.16463557, 0.08845372, 0.1218095, 0.14296094, 0.21542117, 0.11536139, 0.1637155, 0.113954835, 0.15869366, 0.16564935, 0.1517204, 0.10967989, 0.23586474, 0.12064367, 0.22476806, -0.0935313, 0.18106425, 0.09778589, 0.13172853, 0.11182646, 0.12570807, 0.2234647, 0.11681013, 0.08216612, 0.15033023, 0.18060948, 0.20570137, 0.11253733, 0.115491726, 0.11425486, 0.14376295, 0.12530549;

    BN_beta_1 <<
			-0.13330229, -0.18260898, -0.1698354, -0.008450801, -0.42624256, -0.16794875, -0.06588415, 0.39333197, -0.22740428, -0.03829164, -0.054987423, -0.13740246, -0.3336219, -0.9995768, -0.31613734, -0.26574996, -0.20587717, -0.01971764, -0.17644756, -0.1882247, -0.3365199, -0.5645967, -0.21723099, -0.0026494595, -0.15427282, -0.1989618, -0.07241877, -0.22719315, -0.108734995, 0.043657523, -0.13665685, -0.10008142, -0.3353934, -0.082486875, -0.13313393, -0.13082165, -0.076778255, -0.5825837, -0.4671249, -0.20270649;

    BN_beta_2 <<
			-0.11553769, -0.21551716, -0.09906879, -0.4002905, -0.15202901, -0.1472208, -0.26307344, -0.46036208, -0.18470743, -0.44216207, -0.08700867, -0.07008822, -0.48343444, -0.15650739, -0.35239372, -0.55263525, -0.29499355, -0.057159252, -0.06496662, 0.12200596, -0.31996775, -0.4458825, -0.18792099, -0.07202072, -0.48608702, -0.42334965, -0.14655338, -0.88670224, -0.024081238, -1.0783002, -0.56804174, -0.15704153, -0.52568096, -0.13126944, -0.080369234, -0.007503675, 0.29160905, -0.11251137, -1.8317037, -0.15309466;
    
    BN_beta_3 <<
			-0.039612476, -0.14217813, -0.16620907, -0.10049527, -0.10232085, -0.12649132, -0.056050383, -0.06579256, -0.082042664, -0.15702848, -0.19731003, -0.09355323, -0.040022742, -0.13678215, -0.05028296, -0.03518995, -0.15283579, -0.057202723, -0.22290392, -0.19596712, -0.040535945, -0.09666559, -0.036171444, 0.038282987, -0.08471176, -0.1271173, -0.26789564, -0.141773, -0.06721554, -0.039164834, -0.1483563, -0.07465052, -0.12549831, -0.16765977, -0.07054725, -0.23451835, -0.05256559, -0.2551682, -0.058418993, -0.07149908;

    mean <<
			57196.12590059756,35023.726335732295,53187.47521010324,46138.72858852578,15954.08176683162,45826.19512014942,53386.73074893342,34476.4089631298,56916.711607602454;

    stdev <<
			193967.5611642318,134635.73231501362,176284.29692970388,165337.0790113337,99783.77391139303,163591.01706389626,177009.76370810735,133070.11372956738,191871.9252835078;
  }
  
}


__inline Void TEncSearch::xTZSearchHelp( const TComPattern* const pcPatternKey, IntTZSearchStruct& rcStruct, const Int iSearchX, const Int iSearchY, const UChar ucPointNr, const UInt uiDistance, bool save )
{
  Distortion  uiSad = 0;

  const Pel* const  piRefSrch = rcStruct.piRefY + iSearchY * rcStruct.iYStride + iSearchX;

  //-- jclee for using the SAD function pointer
  m_pcRdCost->setDistParam( pcPatternKey, piRefSrch, rcStruct.iYStride,  m_cDistParam );

  setDistParamComp(COMPONENT_Y);

  // distortion
  m_cDistParam.bitDepth = pcPatternKey->getBitDepthY();
  m_cDistParam.m_maximumDistortionForEarlyExit = rcStruct.uiBestSad;

  if((m_pcEncCfg->getRestrictMESampling() == false) && m_pcEncCfg->getMotionEstimationSearchMethod() == MESEARCH_SELECTIVE)
  {
    Int isubShift = 0;
    // motion cost
    Distortion uiBitCost = m_pcRdCost->getCostOfVectorWithPredictor( iSearchX, iSearchY );

    // Skip search if bit cost is already larger than best SAD
    if (uiBitCost < rcStruct.uiBestSad)
    {
      if ( m_cDistParam.iRows > 32 )
      {
        m_cDistParam.iSubShift = 4;
      }
      else if ( m_cDistParam.iRows > 16 )
      {
        m_cDistParam.iSubShift = 3;
      }
      else if ( m_cDistParam.iRows > 8 )
      {
        m_cDistParam.iSubShift = 2;
      }
      else
      {
        m_cDistParam.iSubShift = 1;
      }

      Distortion uiTempSad = m_cDistParam.DistFunc( &m_cDistParam );
      if((uiTempSad + uiBitCost) < rcStruct.uiBestSad)
      {
        uiSad += uiTempSad >>  m_cDistParam.iSubShift;
        while(m_cDistParam.iSubShift > 0)
        {
          isubShift         = m_cDistParam.iSubShift -1;
          m_cDistParam.pOrg = pcPatternKey->getROIY() + (pcPatternKey->getPatternLStride() << isubShift);
          m_cDistParam.pCur = piRefSrch + (rcStruct.iYStride << isubShift);
          uiTempSad = m_cDistParam.DistFunc( &m_cDistParam );
          uiSad += uiTempSad >>  m_cDistParam.iSubShift;
          if(((uiSad << isubShift) + uiBitCost) > rcStruct.uiBestSad)
          {
            break;
          }

          m_cDistParam.iSubShift--;
        }

        if(m_cDistParam.iSubShift == 0)
        {
          uiSad += uiBitCost;
          if( uiSad < rcStruct.uiBestSad )
          {
            rcStruct.uiBestSad      = uiSad;
            rcStruct.iBestX         = iSearchX;
            rcStruct.iBestY         = iSearchY;
            rcStruct.uiBestDistance = uiDistance;
            rcStruct.uiBestRound    = 0;
            rcStruct.ucPointNr      = ucPointNr;
            m_cDistParam.m_maximumDistortionForEarlyExit = uiSad;
          }
        }
      }
    }
  }
  else
  {
    // fast encoder decision: use subsampled SAD when rows > 8 for integer ME
    if ( m_pcEncCfg->getFastInterSearchMode()==FASTINTERSEARCH_MODE1 || m_pcEncCfg->getFastInterSearchMode()==FASTINTERSEARCH_MODE3 )
    {
      if ( m_cDistParam.iRows > 8 )
      {
        m_cDistParam.iSubShift = 1;
      }
    }

    uiSad = m_cDistParam.DistFunc( &m_cDistParam );

    // EMI: If save is true, store the values of SSE in a dynamic array
    if(save) {array_e.push_back(uiSad);}

    // only add motion cost if uiSad is smaller than best. Otherwise pointless
    // to add motion cost.
    if( uiSad < rcStruct.uiBestSad )
    {
      // motion cost
      uiSad += m_pcRdCost->getCostOfVectorWithPredictor( iSearchX, iSearchY );
      if( uiSad < rcStruct.uiBestSad )
      {
        rcStruct.uiBestSad      = uiSad;
        rcStruct.iBestX         = iSearchX;
        rcStruct.iBestY         = iSearchY;
        rcStruct.uiBestDistance = uiDistance;
        rcStruct.uiBestRound    = 0;
        rcStruct.ucPointNr      = ucPointNr;
        m_cDistParam.m_maximumDistortionForEarlyExit = uiSad;
      }
    }
  }
}

__inline Void TEncSearch::xTZ2PointSearch( const TComPattern* const pcPatternKey, IntTZSearchStruct& rcStruct, const TComMv* const pcMvSrchRngLT, const TComMv* const pcMvSrchRngRB )
{
  Int   iSrchRngHorLeft   = pcMvSrchRngLT->getHor();
  Int   iSrchRngHorRight  = pcMvSrchRngRB->getHor();
  Int   iSrchRngVerTop    = pcMvSrchRngLT->getVer();
  Int   iSrchRngVerBottom = pcMvSrchRngRB->getVer();

  // 2 point search,                   //   1 2 3
  // check only the 2 untested points  //   4 0 5
  // around the start point            //   6 7 8
  Int iStartX = rcStruct.iBestX;
  Int iStartY = rcStruct.iBestY;
  switch( rcStruct.ucPointNr )
  {
    case 1:
    {
      if ( (iStartX - 1) >= iSrchRngHorLeft )
      {
        xTZSearchHelp( pcPatternKey, rcStruct, iStartX - 1, iStartY, 0, 2 );
      }
      if ( (iStartY - 1) >= iSrchRngVerTop )
      {
        xTZSearchHelp( pcPatternKey, rcStruct, iStartX, iStartY - 1, 0, 2 );
      }
    }
      break;
    case 2:
    {
      if ( (iStartY - 1) >= iSrchRngVerTop )
      {
        if ( (iStartX - 1) >= iSrchRngHorLeft )
        {
          xTZSearchHelp( pcPatternKey, rcStruct, iStartX - 1, iStartY - 1, 0, 2 );
        }
        if ( (iStartX + 1) <= iSrchRngHorRight )
        {
          xTZSearchHelp( pcPatternKey, rcStruct, iStartX + 1, iStartY - 1, 0, 2 );
        }
      }
    }
      break;
    case 3:
    {
      if ( (iStartY - 1) >= iSrchRngVerTop )
      {
        xTZSearchHelp( pcPatternKey, rcStruct, iStartX, iStartY - 1, 0, 2 );
      }
      if ( (iStartX + 1) <= iSrchRngHorRight )
      {
        xTZSearchHelp( pcPatternKey, rcStruct, iStartX + 1, iStartY, 0, 2 );
      }
    }
      break;
    case 4:
    {
      if ( (iStartX - 1) >= iSrchRngHorLeft )
      {
        if ( (iStartY + 1) <= iSrchRngVerBottom )
        {
          xTZSearchHelp( pcPatternKey, rcStruct, iStartX - 1, iStartY + 1, 0, 2 );
        }
        if ( (iStartY - 1) >= iSrchRngVerTop )
        {
          xTZSearchHelp( pcPatternKey, rcStruct, iStartX - 1, iStartY - 1, 0, 2 );
        }
      }
    }
      break;
    case 5:
    {
      if ( (iStartX + 1) <= iSrchRngHorRight )
      {
        if ( (iStartY - 1) >= iSrchRngVerTop )
        {
          xTZSearchHelp( pcPatternKey, rcStruct, iStartX + 1, iStartY - 1, 0, 2 );
        }
        if ( (iStartY + 1) <= iSrchRngVerBottom )
        {
          xTZSearchHelp( pcPatternKey, rcStruct, iStartX + 1, iStartY + 1, 0, 2 );
        }
      }
    }
      break;
    case 6:
    {
      if ( (iStartX - 1) >= iSrchRngHorLeft )
      {
        xTZSearchHelp( pcPatternKey, rcStruct, iStartX - 1, iStartY , 0, 2 );
      }
      if ( (iStartY + 1) <= iSrchRngVerBottom )
      {
        xTZSearchHelp( pcPatternKey, rcStruct, iStartX, iStartY + 1, 0, 2 );
      }
    }
      break;
    case 7:
    {
      if ( (iStartY + 1) <= iSrchRngVerBottom )
      {
        if ( (iStartX - 1) >= iSrchRngHorLeft )
        {
          xTZSearchHelp( pcPatternKey, rcStruct, iStartX - 1, iStartY + 1, 0, 2 );
        }
        if ( (iStartX + 1) <= iSrchRngHorRight )
        {
          xTZSearchHelp( pcPatternKey, rcStruct, iStartX + 1, iStartY + 1, 0, 2 );
        }
      }
    }
      break;
    case 8:
    {
      if ( (iStartX + 1) <= iSrchRngHorRight )
      {
        xTZSearchHelp( pcPatternKey, rcStruct, iStartX + 1, iStartY, 0, 2 );
      }
      if ( (iStartY + 1) <= iSrchRngVerBottom )
      {
        xTZSearchHelp( pcPatternKey, rcStruct, iStartX, iStartY + 1, 0, 2 );
      }
    }
      break;
    default:
    {
      assert( false );
    }
      break;
  } // switch( rcStruct.ucPointNr )
}




__inline Void TEncSearch::xTZ8PointSquareSearch( const TComPattern* const pcPatternKey, IntTZSearchStruct& rcStruct, const TComMv* const pcMvSrchRngLT, const TComMv* const pcMvSrchRngRB, const Int iStartX, const Int iStartY, const Int iDist, bool save )
{
  const Int   iSrchRngHorLeft   = pcMvSrchRngLT->getHor();
  const Int   iSrchRngHorRight  = pcMvSrchRngRB->getHor();
  const Int   iSrchRngVerTop    = pcMvSrchRngLT->getVer();
  const Int   iSrchRngVerBottom = pcMvSrchRngRB->getVer();

  // 8 point search,                   //   1 2 3
  // search around the start point     //   4 0 5
  // with the required  distance       //   6 7 8
  assert( iDist != 0 );
  const Int iTop        = iStartY - iDist;
  const Int iBottom     = iStartY + iDist;
  const Int iLeft       = iStartX - iDist;
  const Int iRight      = iStartX + iDist;
  rcStruct.uiBestRound += 1;

  if ( iTop >= iSrchRngVerTop ) // check top
  {
    if ( iLeft >= iSrchRngHorLeft ) // check top left
    {
      xTZSearchHelp( pcPatternKey, rcStruct, iLeft, iTop, 1, iDist, save );
    }
    // top middle
    xTZSearchHelp( pcPatternKey, rcStruct, iStartX, iTop, 2, iDist, save );

    if ( iRight <= iSrchRngHorRight ) // check top right
    {
      xTZSearchHelp( pcPatternKey, rcStruct, iRight, iTop, 3, iDist, save );
    }
  } // check top
  if ( iLeft >= iSrchRngHorLeft ) // check middle left
  {
    xTZSearchHelp( pcPatternKey, rcStruct, iLeft, iStartY, 4, iDist, save );
  }
  if ( iRight <= iSrchRngHorRight ) // check middle right
  {
    xTZSearchHelp( pcPatternKey, rcStruct, iRight, iStartY, 5, iDist, save );
  }
  if ( iBottom <= iSrchRngVerBottom ) // check bottom
  {
    if ( iLeft >= iSrchRngHorLeft ) // check bottom left
    {
      xTZSearchHelp( pcPatternKey, rcStruct, iLeft, iBottom, 6, iDist, save );
    }
    // check bottom middle
    xTZSearchHelp( pcPatternKey, rcStruct, iStartX, iBottom, 7, iDist, save );

    if ( iRight <= iSrchRngHorRight ) // check bottom right
    {
      xTZSearchHelp( pcPatternKey, rcStruct, iRight, iBottom, 8, iDist, save );
    }
  } // check bottom
}



__inline Void TEncSearch::xTZ8PointDiamondSearch( const TComPattern*const  pcPatternKey,
                                                  IntTZSearchStruct& rcStruct,
                                                  const TComMv*const  pcMvSrchRngLT,
                                                  const TComMv*const  pcMvSrchRngRB,
                                                  const Int iStartX,
                                                  const Int iStartY,
                                                  const Int iDist,
                                                  const Bool bCheckCornersAtDist1 )
{
  const Int   iSrchRngHorLeft   = pcMvSrchRngLT->getHor();
  const Int   iSrchRngHorRight  = pcMvSrchRngRB->getHor();
  const Int   iSrchRngVerTop    = pcMvSrchRngLT->getVer();
  const Int   iSrchRngVerBottom = pcMvSrchRngRB->getVer();

  // 8 point search,                   //   1 2 3
  // search around the start point     //   4 0 5
  // with the required  distance       //   6 7 8
  assert ( iDist != 0 );
  const Int iTop        = iStartY - iDist;
  const Int iBottom     = iStartY + iDist;
  const Int iLeft       = iStartX - iDist;
  const Int iRight      = iStartX + iDist;
  rcStruct.uiBestRound += 1;

  if ( iDist == 1 )
  {
    if ( iTop >= iSrchRngVerTop ) // check top
    {
      if (bCheckCornersAtDist1)
      {
        if ( iLeft >= iSrchRngHorLeft) // check top-left
        {
          xTZSearchHelp( pcPatternKey, rcStruct, iLeft, iTop, 1, iDist );
        }
        xTZSearchHelp( pcPatternKey, rcStruct, iStartX, iTop, 2, iDist );
        if ( iRight <= iSrchRngHorRight ) // check middle right
        {
          xTZSearchHelp( pcPatternKey, rcStruct, iRight, iTop, 3, iDist );
        }
      }
      else
      {
        xTZSearchHelp( pcPatternKey, rcStruct, iStartX, iTop, 2, iDist );
      }
    }
    if ( iLeft >= iSrchRngHorLeft ) // check middle left
    {
      xTZSearchHelp( pcPatternKey, rcStruct, iLeft, iStartY, 4, iDist );
    }
    if ( iRight <= iSrchRngHorRight ) // check middle right
    {
      xTZSearchHelp( pcPatternKey, rcStruct, iRight, iStartY, 5, iDist );
    }
    if ( iBottom <= iSrchRngVerBottom ) // check bottom
    {
      if (bCheckCornersAtDist1)
      {
        if ( iLeft >= iSrchRngHorLeft) // check top-left
        {
          xTZSearchHelp( pcPatternKey, rcStruct, iLeft, iBottom, 6, iDist );
        }
        xTZSearchHelp( pcPatternKey, rcStruct, iStartX, iBottom, 7, iDist );
        if ( iRight <= iSrchRngHorRight ) // check middle right
        {
          xTZSearchHelp( pcPatternKey, rcStruct, iRight, iBottom, 8, iDist );
        }
      }
      else
      {
        xTZSearchHelp( pcPatternKey, rcStruct, iStartX, iBottom, 7, iDist );
      }
    }
  }
  else
  {
    if ( iDist <= 8 )
    {
      const Int iTop_2      = iStartY - (iDist>>1);
      const Int iBottom_2   = iStartY + (iDist>>1);
      const Int iLeft_2     = iStartX - (iDist>>1);
      const Int iRight_2    = iStartX + (iDist>>1);

      if (  iTop >= iSrchRngVerTop && iLeft >= iSrchRngHorLeft &&
          iRight <= iSrchRngHorRight && iBottom <= iSrchRngVerBottom ) // check border
      {
        xTZSearchHelp( pcPatternKey, rcStruct, iStartX,  iTop,      2, iDist    );
        xTZSearchHelp( pcPatternKey, rcStruct, iLeft_2,  iTop_2,    1, iDist>>1 );
        xTZSearchHelp( pcPatternKey, rcStruct, iRight_2, iTop_2,    3, iDist>>1 );
        xTZSearchHelp( pcPatternKey, rcStruct, iLeft,    iStartY,   4, iDist    );
        xTZSearchHelp( pcPatternKey, rcStruct, iRight,   iStartY,   5, iDist    );
        xTZSearchHelp( pcPatternKey, rcStruct, iLeft_2,  iBottom_2, 6, iDist>>1 );
        xTZSearchHelp( pcPatternKey, rcStruct, iRight_2, iBottom_2, 8, iDist>>1 );
        xTZSearchHelp( pcPatternKey, rcStruct, iStartX,  iBottom,   7, iDist    );
      }
      else // check border
      {
        if ( iTop >= iSrchRngVerTop ) // check top
        {
          xTZSearchHelp( pcPatternKey, rcStruct, iStartX, iTop, 2, iDist );
        }
        if ( iTop_2 >= iSrchRngVerTop ) // check half top
        {
          if ( iLeft_2 >= iSrchRngHorLeft ) // check half left
          {
            xTZSearchHelp( pcPatternKey, rcStruct, iLeft_2, iTop_2, 1, (iDist>>1) );
          }
          if ( iRight_2 <= iSrchRngHorRight ) // check half right
          {
            xTZSearchHelp( pcPatternKey, rcStruct, iRight_2, iTop_2, 3, (iDist>>1) );
          }
        } // check half top
        if ( iLeft >= iSrchRngHorLeft ) // check left
        {
          xTZSearchHelp( pcPatternKey, rcStruct, iLeft, iStartY, 4, iDist );
        }
        if ( iRight <= iSrchRngHorRight ) // check right
        {
          xTZSearchHelp( pcPatternKey, rcStruct, iRight, iStartY, 5, iDist );
        }
        if ( iBottom_2 <= iSrchRngVerBottom ) // check half bottom
        {
          if ( iLeft_2 >= iSrchRngHorLeft ) // check half left
          {
            xTZSearchHelp( pcPatternKey, rcStruct, iLeft_2, iBottom_2, 6, (iDist>>1) );
          }
          if ( iRight_2 <= iSrchRngHorRight ) // check half right
          {
            xTZSearchHelp( pcPatternKey, rcStruct, iRight_2, iBottom_2, 8, (iDist>>1) );
          }
        } // check half bottom
        if ( iBottom <= iSrchRngVerBottom ) // check bottom
        {
          xTZSearchHelp( pcPatternKey, rcStruct, iStartX, iBottom, 7, iDist );
        }
      } // check border
    }
    else // iDist > 8
    {
      if ( iTop >= iSrchRngVerTop && iLeft >= iSrchRngHorLeft &&
          iRight <= iSrchRngHorRight && iBottom <= iSrchRngVerBottom ) // check border
      {
        xTZSearchHelp( pcPatternKey, rcStruct, iStartX, iTop,    0, iDist );
        xTZSearchHelp( pcPatternKey, rcStruct, iLeft,   iStartY, 0, iDist );
        xTZSearchHelp( pcPatternKey, rcStruct, iRight,  iStartY, 0, iDist );
        xTZSearchHelp( pcPatternKey, rcStruct, iStartX, iBottom, 0, iDist );
        for ( Int index = 1; index < 4; index++ )
        {
          const Int iPosYT = iTop    + ((iDist>>2) * index);
          const Int iPosYB = iBottom - ((iDist>>2) * index);
          const Int iPosXL = iStartX - ((iDist>>2) * index);
          const Int iPosXR = iStartX + ((iDist>>2) * index);
          xTZSearchHelp( pcPatternKey, rcStruct, iPosXL, iPosYT, 0, iDist );
          xTZSearchHelp( pcPatternKey, rcStruct, iPosXR, iPosYT, 0, iDist );
          xTZSearchHelp( pcPatternKey, rcStruct, iPosXL, iPosYB, 0, iDist );
          xTZSearchHelp( pcPatternKey, rcStruct, iPosXR, iPosYB, 0, iDist );
        }
      }
      else // check border
      {
        if ( iTop >= iSrchRngVerTop ) // check top
        {
          xTZSearchHelp( pcPatternKey, rcStruct, iStartX, iTop, 0, iDist );
        }
        if ( iLeft >= iSrchRngHorLeft ) // check left
        {
          xTZSearchHelp( pcPatternKey, rcStruct, iLeft, iStartY, 0, iDist );
        }
        if ( iRight <= iSrchRngHorRight ) // check right
        {
          xTZSearchHelp( pcPatternKey, rcStruct, iRight, iStartY, 0, iDist );
        }
        if ( iBottom <= iSrchRngVerBottom ) // check bottom
        {
          xTZSearchHelp( pcPatternKey, rcStruct, iStartX, iBottom, 0, iDist );
        }
        for ( Int index = 1; index < 4; index++ )
        {
          const Int iPosYT = iTop    + ((iDist>>2) * index);
          const Int iPosYB = iBottom - ((iDist>>2) * index);
          const Int iPosXL = iStartX - ((iDist>>2) * index);
          const Int iPosXR = iStartX + ((iDist>>2) * index);

          if ( iPosYT >= iSrchRngVerTop ) // check top
          {
            if ( iPosXL >= iSrchRngHorLeft ) // check left
            {
              xTZSearchHelp( pcPatternKey, rcStruct, iPosXL, iPosYT, 0, iDist );
            }
            if ( iPosXR <= iSrchRngHorRight ) // check right
            {
              xTZSearchHelp( pcPatternKey, rcStruct, iPosXR, iPosYT, 0, iDist );
            }
          } // check top
          if ( iPosYB <= iSrchRngVerBottom ) // check bottom
          {
            if ( iPosXL >= iSrchRngHorLeft ) // check left
            {
              xTZSearchHelp( pcPatternKey, rcStruct, iPosXL, iPosYB, 0, iDist );
            }
            if ( iPosXR <= iSrchRngHorRight ) // check right
            {
              xTZSearchHelp( pcPatternKey, rcStruct, iPosXR, iPosYB, 0, iDist );
            }
          } // check bottom
        } // for ...
      } // check border
    } // iDist <= 8
  } // iDist == 1
}

Distortion TEncSearch::xPatternRefinement( TComPattern* pcPatternKey,
                                           TComMv baseRefMv,
                                           Int iFrac, TComMv& rcMvFrac,
                                           Bool bAllowUseOfHadamard
                                         )
{
  Distortion  uiDist;
  Distortion  uiDistBest  = std::numeric_limits<Distortion>::max();
  UInt        uiDirecBest = 0;

  Pel*  piRefPos;
  Int iRefStride = m_filteredBlock[0][0].getStride(COMPONENT_Y);

  m_pcRdCost->setDistParam( pcPatternKey, m_filteredBlock[0][0].getAddr(COMPONENT_Y), iRefStride, 1, m_cDistParam, m_pcEncCfg->getUseHADME() && bAllowUseOfHadamard );

  const TComMv* pcMvRefine = (iFrac == 2 ? s_acMvRefineH : s_acMvRefineQ);

  for (UInt i = 0; i < 9; i++)
  {
    TComMv cMvTest = pcMvRefine[i];
    cMvTest += baseRefMv;

    Int horVal = cMvTest.getHor() * iFrac;
    Int verVal = cMvTest.getVer() * iFrac;
    piRefPos = m_filteredBlock[ verVal & 3 ][ horVal & 3 ].getAddr(COMPONENT_Y);
    if ( horVal == 2 && ( verVal & 1 ) == 0 )
    {
      piRefPos += 1;
    }
    if ( ( horVal & 1 ) == 0 && verVal == 2 )
    {
      piRefPos += iRefStride;
    }
    cMvTest = pcMvRefine[i];
    cMvTest += rcMvFrac;

    setDistParamComp(COMPONENT_Y);

    m_cDistParam.pCur = piRefPos;
    m_cDistParam.bitDepth = pcPatternKey->getBitDepthY();
    uiDist = m_cDistParam.DistFunc( &m_cDistParam );
    uiDist += m_pcRdCost->getCostOfVectorWithPredictor( cMvTest.getHor(), cMvTest.getVer() );

    if ( uiDist < uiDistBest )
    {
      uiDistBest  = uiDist;
      uiDirecBest = i;
      m_cDistParam.m_maximumDistortionForEarlyExit = uiDist;
    }
  }

  rcMvFrac = pcMvRefine[uiDirecBest];

  return uiDistBest;
}



Void
TEncSearch::xEncSubdivCbfQT(TComTU      &rTu,
                            Bool         bLuma,
                            Bool         bChroma )
{
  TComDataCU* pcCU=rTu.getCU();
  const UInt uiAbsPartIdx         = rTu.GetAbsPartIdxTU();
  const UInt uiTrDepth            = rTu.GetTransformDepthRel();
  const UInt uiTrMode             = pcCU->getTransformIdx( uiAbsPartIdx );
  const UInt uiSubdiv             = ( uiTrMode > uiTrDepth ? 1 : 0 );
  const UInt uiLog2LumaTrafoSize  = rTu.GetLog2LumaTrSize();

  if( pcCU->isIntra(0) && pcCU->getPartitionSize(0) == SIZE_NxN && uiTrDepth == 0 )
  {
    assert( uiSubdiv );
  }
  else if( uiLog2LumaTrafoSize > pcCU->getSlice()->getSPS()->getQuadtreeTULog2MaxSize() )
  {
    assert( uiSubdiv );
  }
  else if( uiLog2LumaTrafoSize == pcCU->getSlice()->getSPS()->getQuadtreeTULog2MinSize() )
  {
    assert( !uiSubdiv );
  }
  else if( uiLog2LumaTrafoSize == pcCU->getQuadtreeTULog2MinSizeInCU(uiAbsPartIdx) )
  {
    assert( !uiSubdiv );
  }
  else
  {
    assert( uiLog2LumaTrafoSize > pcCU->getQuadtreeTULog2MinSizeInCU(uiAbsPartIdx) );
    if( bLuma )
    {
      m_pcEntropyCoder->encodeTransformSubdivFlag( uiSubdiv, 5 - uiLog2LumaTrafoSize );
    }
  }

  if ( bChroma )
  {
    const UInt numberValidComponents = getNumberValidComponents(rTu.GetChromaFormat());
    for (UInt ch=COMPONENT_Cb; ch<numberValidComponents; ch++)
    {
      const ComponentID compID=ComponentID(ch);
      if( rTu.ProcessingAllQuadrants(compID) && (uiTrDepth==0 || pcCU->getCbf( uiAbsPartIdx, compID, uiTrDepth-1 ) ))
      {
        m_pcEntropyCoder->encodeQtCbf(rTu, compID, (uiSubdiv == 0));
      }
    }
  }

  if( uiSubdiv )
  {
    TComTURecurse tuRecurse(rTu, false);
    do
    {
      xEncSubdivCbfQT( tuRecurse, bLuma, bChroma );
    } while (tuRecurse.nextSection(rTu));
  }
  else
  {
    //===== Cbfs =====
    if( bLuma )
    {
      m_pcEntropyCoder->encodeQtCbf( rTu, COMPONENT_Y, true );
    }
  }
}




Void
TEncSearch::xEncCoeffQT(TComTU &rTu,
                        const ComponentID  component,
                        Bool         bRealCoeff )
{
  TComDataCU* pcCU=rTu.getCU();
  const UInt uiAbsPartIdx = rTu.GetAbsPartIdxTU();
  const UInt uiTrDepth=rTu.GetTransformDepthRel();

  const UInt  uiTrMode        = pcCU->getTransformIdx( uiAbsPartIdx );
  const UInt  uiSubdiv        = ( uiTrMode > uiTrDepth ? 1 : 0 );

  if( uiSubdiv )
  {
    TComTURecurse tuRecurseChild(rTu, false);
    do
    {
      xEncCoeffQT( tuRecurseChild, component, bRealCoeff );
    } while (tuRecurseChild.nextSection(rTu) );
  }
  else if (rTu.ProcessComponentSection(component))
  {
    //===== coefficients =====
    const UInt  uiLog2TrafoSize = rTu.GetLog2LumaTrSize();
    UInt    uiCoeffOffset   = rTu.getCoefficientOffset(component);
    UInt    uiQTLayer       = pcCU->getSlice()->getSPS()->getQuadtreeTULog2MaxSize() - uiLog2TrafoSize;
    TCoeff* pcCoeff         = bRealCoeff ? pcCU->getCoeff(component) : m_ppcQTTempCoeff[component][uiQTLayer];

    if (isChroma(component) && (pcCU->getCbf( rTu.GetAbsPartIdxTU(), COMPONENT_Y, uiTrMode ) != 0) && pcCU->getSlice()->getPPS()->getPpsRangeExtension().getCrossComponentPredictionEnabledFlag() )
    {
      m_pcEntropyCoder->encodeCrossComponentPrediction( rTu, component );
    }

    m_pcEntropyCoder->encodeCoeffNxN( rTu, pcCoeff+uiCoeffOffset, component );
  }
}




Void
TEncSearch::xEncIntraHeader( TComDataCU*  pcCU,
                            UInt         uiTrDepth,
                            UInt         uiAbsPartIdx,
                            Bool         bLuma,
                            Bool         bChroma )
{
  if( bLuma )
  {
    // CU header
    if( uiAbsPartIdx == 0 )
    {
      if( !pcCU->getSlice()->isIntra() )
      {
        if (pcCU->getSlice()->getPPS()->getTransquantBypassEnableFlag())
        {
          m_pcEntropyCoder->encodeCUTransquantBypassFlag( pcCU, 0, true );
        }
        m_pcEntropyCoder->encodeSkipFlag( pcCU, 0, true );
        m_pcEntropyCoder->encodePredMode( pcCU, 0, true );
      }
      m_pcEntropyCoder  ->encodePartSize( pcCU, 0, pcCU->getDepth(0), true );

      if (pcCU->isIntra(0) && pcCU->getPartitionSize(0) == SIZE_2Nx2N )
      {
        m_pcEntropyCoder->encodeIPCMInfo( pcCU, 0, true );

        if ( pcCU->getIPCMFlag (0))
        {
          return;
        }
      }
    }
    // luma prediction mode
    if( pcCU->getPartitionSize(0) == SIZE_2Nx2N )
    {
      if (uiAbsPartIdx==0)
      {
        m_pcEntropyCoder->encodeIntraDirModeLuma ( pcCU, 0 );
      }
    }
    else
    {
      UInt uiQNumParts = pcCU->getTotalNumPart() >> 2;
      if (uiTrDepth>0 && (uiAbsPartIdx%uiQNumParts)==0)
      {
        m_pcEntropyCoder->encodeIntraDirModeLuma ( pcCU, uiAbsPartIdx );
      }
    }
  }

  if( bChroma )
  {
    if( pcCU->getPartitionSize(0) == SIZE_2Nx2N || !enable4ChromaPUsInIntraNxNCU(pcCU->getPic()->getChromaFormat()))
    {
      if(uiAbsPartIdx==0)
      {
         m_pcEntropyCoder->encodeIntraDirModeChroma ( pcCU, uiAbsPartIdx );
      }
    }
    else
    {
      UInt uiQNumParts = pcCU->getTotalNumPart() >> 2;
      assert(uiTrDepth>0);
      if ((uiAbsPartIdx%uiQNumParts)==0)
      {
        m_pcEntropyCoder->encodeIntraDirModeChroma ( pcCU, uiAbsPartIdx );
      }
    }
  }
}




UInt
TEncSearch::xGetIntraBitsQT(TComTU &rTu,
                            Bool         bLuma,
                            Bool         bChroma,
                            Bool         bRealCoeff /* just for test */ )
{
  TComDataCU* pcCU=rTu.getCU();
  const UInt uiAbsPartIdx = rTu.GetAbsPartIdxTU();
  const UInt uiTrDepth=rTu.GetTransformDepthRel();
  m_pcEntropyCoder->resetBits();
  xEncIntraHeader ( pcCU, uiTrDepth, uiAbsPartIdx, bLuma, bChroma );
  xEncSubdivCbfQT ( rTu, bLuma, bChroma );

  if( bLuma )
  {
    xEncCoeffQT   ( rTu, COMPONENT_Y,      bRealCoeff );
  }
  if( bChroma )
  {
    xEncCoeffQT   ( rTu, COMPONENT_Cb,  bRealCoeff );
    xEncCoeffQT   ( rTu, COMPONENT_Cr,  bRealCoeff );
  }
  UInt   uiBits = m_pcEntropyCoder->getNumberOfWrittenBits();

  return uiBits;
}

UInt TEncSearch::xGetIntraBitsQTChroma(TComTU &rTu,
                                       ComponentID compID,
                                       Bool         bRealCoeff /* just for test */ )
{
  m_pcEntropyCoder->resetBits();
  xEncCoeffQT   ( rTu, compID,  bRealCoeff );
  UInt   uiBits = m_pcEntropyCoder->getNumberOfWrittenBits();
  return uiBits;
}

Void TEncSearch::xIntraCodingTUBlock(       TComYuv*    pcOrgYuv,
                                            TComYuv*    pcPredYuv,
                                            TComYuv*    pcResiYuv,
                                            Pel         resiLuma[NUMBER_OF_STORED_RESIDUAL_TYPES][MAX_CU_SIZE * MAX_CU_SIZE],
                                      const Bool        checkCrossCPrediction,
                                            Distortion& ruiDist,
                                      const ComponentID compID,
                                            TComTU&     rTu
                                      DEBUG_STRING_FN_DECLARE(sDebug)
                                           ,Int         default0Save1Load2
                                     )
{
  if (!rTu.ProcessComponentSection(compID))
  {
    return;
  }
  const Bool           bIsLuma          = isLuma(compID);
  const TComRectangle &rect             = rTu.getRect(compID);
        TComDataCU    *pcCU             = rTu.getCU();
  const UInt           uiAbsPartIdx     = rTu.GetAbsPartIdxTU();
  const TComSPS       &sps              = *(pcCU->getSlice()->getSPS());

  const UInt           uiTrDepth        = rTu.GetTransformDepthRelAdj(compID);
  const UInt           uiFullDepth      = rTu.GetTransformDepthTotal();
  const UInt           uiLog2TrSize     = rTu.GetLog2LumaTrSize();
  const ChromaFormat   chFmt            = pcOrgYuv->getChromaFormat();
  const ChannelType    chType           = toChannelType(compID);
  const Int            bitDepth         = sps.getBitDepth(chType);

  const UInt           uiWidth          = rect.width;
  const UInt           uiHeight         = rect.height;
  const UInt           uiStride         = pcOrgYuv ->getStride (compID);
        Pel           *piOrg            = pcOrgYuv ->getAddr( compID, uiAbsPartIdx );
        Pel           *piPred           = pcPredYuv->getAddr( compID, uiAbsPartIdx );
        Pel           *piResi           = pcResiYuv->getAddr( compID, uiAbsPartIdx );
        Pel           *piReco           = pcPredYuv->getAddr( compID, uiAbsPartIdx );
  const UInt           uiQTLayer        = sps.getQuadtreeTULog2MaxSize() - uiLog2TrSize;
        Pel           *piRecQt          = m_pcQTTempTComYuv[ uiQTLayer ].getAddr( compID, uiAbsPartIdx );
  const UInt           uiRecQtStride    = m_pcQTTempTComYuv[ uiQTLayer ].getStride(compID);
  const UInt           uiZOrder         = pcCU->getZorderIdxInCtu() + uiAbsPartIdx;
        Pel           *piRecIPred       = pcCU->getPic()->getPicYuvRec()->getAddr( compID, pcCU->getCtuRsAddr(), uiZOrder );
        UInt           uiRecIPredStride = pcCU->getPic()->getPicYuvRec()->getStride  ( compID );
        TCoeff        *pcCoeff          = m_ppcQTTempCoeff[compID][uiQTLayer] + rTu.getCoefficientOffset(compID);
        Bool           useTransformSkip = pcCU->getTransformSkip(uiAbsPartIdx, compID);

#if ADAPTIVE_QP_SELECTION
        TCoeff        *pcArlCoeff       = m_ppcQTTempArlCoeff[compID][ uiQTLayer ] + rTu.getCoefficientOffset(compID);
#endif

  const UInt           uiChPredMode     = pcCU->getIntraDir( chType, uiAbsPartIdx );
  const UInt           partsPerMinCU    = 1<<(2*(sps.getMaxTotalCUDepth() - sps.getLog2DiffMaxMinCodingBlockSize()));
  const UInt           uiChCodedMode    = (uiChPredMode==DM_CHROMA_IDX && !bIsLuma) ? pcCU->getIntraDir(CHANNEL_TYPE_LUMA, getChromasCorrespondingPULumaIdx(uiAbsPartIdx, chFmt, partsPerMinCU)) : uiChPredMode;
  const UInt           uiChFinalMode    = ((chFmt == CHROMA_422)       && !bIsLuma) ? g_chroma422IntraAngleMappingTable[uiChCodedMode] : uiChCodedMode;

  const Int            blkX                                 = g_auiRasterToPelX[ g_auiZscanToRaster[ uiAbsPartIdx ] ];
  const Int            blkY                                 = g_auiRasterToPelY[ g_auiZscanToRaster[ uiAbsPartIdx ] ];
  const Int            bufferOffset                         = blkX + (blkY * MAX_CU_SIZE);
        Pel  *const    encoderLumaResidual                  = resiLuma[RESIDUAL_ENCODER_SIDE ] + bufferOffset;
        Pel  *const    reconstructedLumaResidual            = resiLuma[RESIDUAL_RECONSTRUCTED] + bufferOffset;
  const Bool           bUseCrossCPrediction                 = isChroma(compID) && (uiChPredMode == DM_CHROMA_IDX) && checkCrossCPrediction;
  const Bool           bUseReconstructedResidualForEstimate = m_pcEncCfg->getUseReconBasedCrossCPredictionEstimate();
        Pel *const     lumaResidualForEstimate              = bUseReconstructedResidualForEstimate ? reconstructedLumaResidual : encoderLumaResidual;

#if DEBUG_STRING
  const Int debugPredModeMask=DebugStringGetPredModeMask(MODE_INTRA);
#endif

  //===== init availability pattern =====
  DEBUG_STRING_NEW(sTemp)

#if !DEBUG_STRING
  if( default0Save1Load2 != 2 )
#endif
  {
    const Bool bUseFilteredPredictions=TComPrediction::filteringIntraReferenceSamples(compID, uiChFinalMode, uiWidth, uiHeight, chFmt, sps.getSpsRangeExtension().getIntraSmoothingDisabledFlag());

    initIntraPatternChType( rTu, compID, bUseFilteredPredictions DEBUG_STRING_PASS_INTO(sDebug) );

    //===== get prediction signal =====
    predIntraAng( compID, uiChFinalMode, piOrg, uiStride, piPred, uiStride, rTu, bUseFilteredPredictions );

    // save prediction
    if( default0Save1Load2 == 1 )
    {
      Pel*  pPred   = piPred;
      Pel*  pPredBuf = m_pSharedPredTransformSkip[compID];
      Int k = 0;
      for( UInt uiY = 0; uiY < uiHeight; uiY++ )
      {
        for( UInt uiX = 0; uiX < uiWidth; uiX++ )
        {
          pPredBuf[ k ++ ] = pPred[ uiX ];
        }
        pPred += uiStride;
      }
    }
  }
#if !DEBUG_STRING
  else
  {
    // load prediction
    Pel*  pPred   = piPred;
    Pel*  pPredBuf = m_pSharedPredTransformSkip[compID];
    Int k = 0;
    for( UInt uiY = 0; uiY < uiHeight; uiY++ )
    {
      for( UInt uiX = 0; uiX < uiWidth; uiX++ )
      {
        pPred[ uiX ] = pPredBuf[ k ++ ];
      }
      pPred += uiStride;
    }
  }
#endif

  //===== get residual signal =====
  {
    // get residual
    Pel*  pOrg    = piOrg;
    Pel*  pPred   = piPred;
    Pel*  pResi   = piResi;

    for( UInt uiY = 0; uiY < uiHeight; uiY++ )
    {
      for( UInt uiX = 0; uiX < uiWidth; uiX++ )
      {
        pResi[ uiX ] = pOrg[ uiX ] - pPred[ uiX ];
      }

      pOrg  += uiStride;
      pResi += uiStride;
      pPred += uiStride;
    }
  }

  if (pcCU->getSlice()->getPPS()->getPpsRangeExtension().getCrossComponentPredictionEnabledFlag())
  {
    if (bUseCrossCPrediction)
    {
      if (xCalcCrossComponentPredictionAlpha( rTu, compID, lumaResidualForEstimate, piResi, uiWidth, uiHeight, MAX_CU_SIZE, uiStride ) == 0)
      {
        return;
      }
      TComTrQuant::crossComponentPrediction ( rTu, compID, reconstructedLumaResidual, piResi, piResi, uiWidth, uiHeight, MAX_CU_SIZE, uiStride, uiStride, false );
    }
    else if (isLuma(compID) && !bUseReconstructedResidualForEstimate)
    {
      xStoreCrossComponentPredictionResult( encoderLumaResidual, piResi, rTu, 0, 0, MAX_CU_SIZE, uiStride );
    }
  }

  //===== transform and quantization =====
  //--- init rate estimation arrays for RDOQ ---
  if( useTransformSkip ? m_pcEncCfg->getUseRDOQTS() : m_pcEncCfg->getUseRDOQ() )
  {
    m_pcEntropyCoder->estimateBit( m_pcTrQuant->m_pcEstBitsSbac, uiWidth, uiHeight, chType );
  }

  //--- transform and quantization ---
  TCoeff uiAbsSum = 0;
  if (bIsLuma)
  {
    pcCU       ->setTrIdxSubParts ( uiTrDepth, uiAbsPartIdx, uiFullDepth );
  }

  const QpParam cQP(*pcCU, compID);

#if RDOQ_CHROMA_LAMBDA
  m_pcTrQuant->selectLambda     (compID);
#endif

  m_pcTrQuant->transformNxN     ( rTu, compID, piResi, uiStride, pcCoeff,
#if ADAPTIVE_QP_SELECTION
    pcArlCoeff,
#endif
    uiAbsSum, cQP
    );

  //--- inverse transform ---

#if DEBUG_STRING
  if ( (uiAbsSum > 0) || (DebugOptionList::DebugString_InvTran.getInt()&debugPredModeMask) )
#else
  if ( uiAbsSum > 0 )
#endif
  {
    m_pcTrQuant->invTransformNxN ( rTu, compID, piResi, uiStride, pcCoeff, cQP DEBUG_STRING_PASS_INTO_OPTIONAL(&sDebug, (DebugOptionList::DebugString_InvTran.getInt()&debugPredModeMask)) );
  }
  else
  {
    Pel* pResi = piResi;
    memset( pcCoeff, 0, sizeof( TCoeff ) * uiWidth * uiHeight );
    for( UInt uiY = 0; uiY < uiHeight; uiY++ )
    {
      memset( pResi, 0, sizeof( Pel ) * uiWidth );
      pResi += uiStride;
    }
  }


  //===== reconstruction =====
  {
    Pel* pPred      = piPred;
    Pel* pResi      = piResi;
    Pel* pReco      = piReco;
    Pel* pRecQt     = piRecQt;
    Pel* pRecIPred  = piRecIPred;

    if (pcCU->getSlice()->getPPS()->getPpsRangeExtension().getCrossComponentPredictionEnabledFlag())
    {
      if (bUseCrossCPrediction)
      {
        TComTrQuant::crossComponentPrediction( rTu, compID, reconstructedLumaResidual, piResi, piResi, uiWidth, uiHeight, MAX_CU_SIZE, uiStride, uiStride, true );
      }
      else if (isLuma(compID))
      {
        xStoreCrossComponentPredictionResult( reconstructedLumaResidual, piResi, rTu, 0, 0, MAX_CU_SIZE, uiStride );
      }
    }

 #if DEBUG_STRING
    std::stringstream ss(stringstream::out);
    const Bool bDebugPred=((DebugOptionList::DebugString_Pred.getInt()&debugPredModeMask) && DEBUG_STRING_CHANNEL_CONDITION(compID));
    const Bool bDebugResi=((DebugOptionList::DebugString_Resi.getInt()&debugPredModeMask) && DEBUG_STRING_CHANNEL_CONDITION(compID));
    const Bool bDebugReco=((DebugOptionList::DebugString_Reco.getInt()&debugPredModeMask) && DEBUG_STRING_CHANNEL_CONDITION(compID));

    if (bDebugPred || bDebugResi || bDebugReco)
    {
      ss << "###: " << "CompID: " << compID << " pred mode (ch/fin): " << uiChPredMode << "/" << uiChFinalMode << " absPartIdx: " << rTu.GetAbsPartIdxTU() << "\n";
      for( UInt uiY = 0; uiY < uiHeight; uiY++ )
      {
        ss << "###: ";
        if (bDebugPred)
        {
          ss << " - pred: ";
          for( UInt uiX = 0; uiX < uiWidth; uiX++ )
          {
            ss << pPred[ uiX ] << ", ";
          }
        }
        if (bDebugResi)
        {
          ss << " - resi: ";
        }
        for( UInt uiX = 0; uiX < uiWidth; uiX++ )
        {
          if (bDebugResi)
          {
            ss << pResi[ uiX ] << ", ";
          }
          pReco    [ uiX ] = Pel(ClipBD<Int>( Int(pPred[uiX]) + Int(pResi[uiX]), bitDepth ));
          pRecQt   [ uiX ] = pReco[ uiX ];
          pRecIPred[ uiX ] = pReco[ uiX ];
        }
        if (bDebugReco)
        {
          ss << " - reco: ";
          for( UInt uiX = 0; uiX < uiWidth; uiX++ )
          {
            ss << pReco[ uiX ] << ", ";
          }
        }
        pPred     += uiStride;
        pResi     += uiStride;
        pReco     += uiStride;
        pRecQt    += uiRecQtStride;
        pRecIPred += uiRecIPredStride;
        ss << "\n";
      }
      DEBUG_STRING_APPEND(sDebug, ss.str())
    }
    else
#endif
    {

      for( UInt uiY = 0; uiY < uiHeight; uiY++ )
      {
        for( UInt uiX = 0; uiX < uiWidth; uiX++ )
        {
          pReco    [ uiX ] = Pel(ClipBD<Int>( Int(pPred[uiX]) + Int(pResi[uiX]), bitDepth ));
          pRecQt   [ uiX ] = pReco[ uiX ];
          pRecIPred[ uiX ] = pReco[ uiX ];
        }
        pPred     += uiStride;
        pResi     += uiStride;
        pReco     += uiStride;
        pRecQt    += uiRecQtStride;
        pRecIPred += uiRecIPredStride;
      }
    }
  }

  //===== update distortion =====
  ruiDist += m_pcRdCost->getDistPart( bitDepth, piReco, uiStride, piOrg, uiStride, uiWidth, uiHeight, compID );
}




Void
TEncSearch::xRecurIntraCodingLumaQT(TComYuv*    pcOrgYuv,
                                    TComYuv*    pcPredYuv,
                                    TComYuv*    pcResiYuv,
                                    Pel         resiLuma[NUMBER_OF_STORED_RESIDUAL_TYPES][MAX_CU_SIZE * MAX_CU_SIZE],
                                    Distortion& ruiDistY,
#if HHI_RQT_INTRA_SPEEDUP
                                    Bool        bCheckFirst,
#endif
                                    Double&     dRDCost,
                                    TComTU&     rTu
                                    DEBUG_STRING_FN_DECLARE(sDebug))
{
  TComDataCU   *pcCU          = rTu.getCU();
  const UInt    uiAbsPartIdx  = rTu.GetAbsPartIdxTU();
  const UInt    uiFullDepth   = rTu.GetTransformDepthTotal();
  const UInt    uiTrDepth     = rTu.GetTransformDepthRel();
  const UInt    uiLog2TrSize  = rTu.GetLog2LumaTrSize();
        Bool    bCheckFull    = ( uiLog2TrSize  <= pcCU->getSlice()->getSPS()->getQuadtreeTULog2MaxSize() );
        Bool    bCheckSplit   = ( uiLog2TrSize  >  pcCU->getQuadtreeTULog2MinSizeInCU(uiAbsPartIdx) );

        Pel     resiLumaSplit [NUMBER_OF_STORED_RESIDUAL_TYPES][MAX_CU_SIZE * MAX_CU_SIZE];
        Pel     resiLumaSingle[NUMBER_OF_STORED_RESIDUAL_TYPES][MAX_CU_SIZE * MAX_CU_SIZE];

        Bool    bMaintainResidual[NUMBER_OF_STORED_RESIDUAL_TYPES];
        for (UInt residualTypeIndex = 0; residualTypeIndex < NUMBER_OF_STORED_RESIDUAL_TYPES; residualTypeIndex++)
        {
          bMaintainResidual[residualTypeIndex] = true; //assume true unless specified otherwise
        }

        bMaintainResidual[RESIDUAL_ENCODER_SIDE] = !(m_pcEncCfg->getUseReconBasedCrossCPredictionEstimate());

#if HHI_RQT_INTRA_SPEEDUP
  Int maxTuSize = pcCU->getSlice()->getSPS()->getQuadtreeTULog2MaxSize();
  Int isIntraSlice = (pcCU->getSlice()->getSliceType() == I_SLICE);
  // don't check split if TU size is less or equal to max TU size
  Bool noSplitIntraMaxTuSize = bCheckFull;
  if(m_pcEncCfg->getRDpenalty() && ! isIntraSlice)
  {
    // in addition don't check split if TU size is less or equal to 16x16 TU size for non-intra slice
    noSplitIntraMaxTuSize = ( uiLog2TrSize  <= min(maxTuSize,4) );

    // if maximum RD-penalty don't check TU size 32x32
    if(m_pcEncCfg->getRDpenalty()==2)
    {
      bCheckFull    = ( uiLog2TrSize  <= min(maxTuSize,4));
    }
  }
  if( bCheckFirst && noSplitIntraMaxTuSize )

  {
    bCheckSplit = false;
  }
#else
  Int maxTuSize = pcCU->getSlice()->getSPS()->getQuadtreeTULog2MaxSize();
  Int isIntraSlice = (pcCU->getSlice()->getSliceType() == I_SLICE);
  // if maximum RD-penalty don't check TU size 32x32
  if((m_pcEncCfg->getRDpenalty()==2)  && !isIntraSlice)
  {
    bCheckFull    = ( uiLog2TrSize  <= min(maxTuSize,4));
  }
#endif
  Double     dSingleCost                        = MAX_DOUBLE;
  Distortion uiSingleDistLuma                   = 0;
  UInt       uiSingleCbfLuma                    = 0;
  Bool       checkTransformSkip  = pcCU->getSlice()->getPPS()->getUseTransformSkip();
  Int        bestModeId[MAX_NUM_COMPONENT] = { 0, 0, 0};
  checkTransformSkip           &= TUCompRectHasAssociatedTransformSkipFlag(rTu.getRect(COMPONENT_Y), pcCU->getSlice()->getPPS()->getPpsRangeExtension().getLog2MaxTransformSkipBlockSize());
  checkTransformSkip           &= (!pcCU->getCUTransquantBypass(0));

  assert (rTu.ProcessComponentSection(COMPONENT_Y));
  const UInt totalAdjustedDepthChan   = rTu.GetTransformDepthTotalAdj(COMPONENT_Y);

  if ( m_pcEncCfg->getUseTransformSkipFast() )
  {
    checkTransformSkip       &= (pcCU->getPartitionSize(uiAbsPartIdx)==SIZE_NxN);
  }

  if( bCheckFull )
  {
    if(checkTransformSkip == true)
    {
      //----- store original entropy coding status -----
      m_pcRDGoOnSbacCoder->store( m_pppcRDSbacCoder[ uiFullDepth ][ CI_QT_TRAFO_ROOT ] );

      Distortion singleDistTmpLuma                    = 0;
      UInt       singleCbfTmpLuma                     = 0;
      Double     singleCostTmp                        = 0;
      Int        firstCheckId                         = 0;

      for(Int modeId = firstCheckId; modeId < 2; modeId ++)
      {
        DEBUG_STRING_NEW(sModeString)
        Int  default0Save1Load2 = 0;
        singleDistTmpLuma=0;
        if(modeId == firstCheckId)
        {
          default0Save1Load2 = 1;
        }
        else
        {
          default0Save1Load2 = 2;
        }


        pcCU->setTransformSkipSubParts ( modeId, COMPONENT_Y, uiAbsPartIdx, totalAdjustedDepthChan );
        xIntraCodingTUBlock( pcOrgYuv, pcPredYuv, pcResiYuv, resiLumaSingle, false, singleDistTmpLuma, COMPONENT_Y, rTu DEBUG_STRING_PASS_INTO(sModeString), default0Save1Load2 );

        singleCbfTmpLuma = pcCU->getCbf( uiAbsPartIdx, COMPONENT_Y, uiTrDepth );

        //----- determine rate and r-d cost -----
        if(modeId == 1 && singleCbfTmpLuma == 0)
        {
          //In order not to code TS flag when cbf is zero, the case for TS with cbf being zero is forbidden.
          singleCostTmp = MAX_DOUBLE;
        }
        else
        {
          UInt uiSingleBits = xGetIntraBitsQT( rTu, true, false, false );
          singleCostTmp     = m_pcRdCost->calcRdCost( uiSingleBits, singleDistTmpLuma );
        }
        if(singleCostTmp < dSingleCost)
        {
          DEBUG_STRING_SWAP(sDebug, sModeString)
          dSingleCost   = singleCostTmp;
          uiSingleDistLuma = singleDistTmpLuma;
          uiSingleCbfLuma = singleCbfTmpLuma;

          bestModeId[COMPONENT_Y] = modeId;
          if(bestModeId[COMPONENT_Y] == firstCheckId)
          {
            xStoreIntraResultQT(COMPONENT_Y, rTu );
            m_pcRDGoOnSbacCoder->store( m_pppcRDSbacCoder[ uiFullDepth ][ CI_TEMP_BEST ] );
          }

          if (pcCU->getSlice()->getPPS()->getPpsRangeExtension().getCrossComponentPredictionEnabledFlag())
          {
            const Int xOffset = rTu.getRect( COMPONENT_Y ).x0;
            const Int yOffset = rTu.getRect( COMPONENT_Y ).y0;
            for (UInt storedResidualIndex = 0; storedResidualIndex < NUMBER_OF_STORED_RESIDUAL_TYPES; storedResidualIndex++)
            {
              if (bMaintainResidual[storedResidualIndex])
              {
                xStoreCrossComponentPredictionResult(resiLuma[storedResidualIndex], resiLumaSingle[storedResidualIndex], rTu, xOffset, yOffset, MAX_CU_SIZE, MAX_CU_SIZE);
              }
            }
          }
        }
        if (modeId == firstCheckId)
        {
          m_pcRDGoOnSbacCoder->load ( m_pppcRDSbacCoder[ uiFullDepth ][ CI_QT_TRAFO_ROOT ] );
        }
      }

      pcCU ->setTransformSkipSubParts ( bestModeId[COMPONENT_Y], COMPONENT_Y, uiAbsPartIdx, totalAdjustedDepthChan );

      if(bestModeId[COMPONENT_Y] == firstCheckId)
      {
        xLoadIntraResultQT(COMPONENT_Y, rTu );
        pcCU->setCbfSubParts  ( uiSingleCbfLuma << uiTrDepth, COMPONENT_Y, uiAbsPartIdx, rTu.GetTransformDepthTotalAdj(COMPONENT_Y) );

        m_pcRDGoOnSbacCoder->load( m_pppcRDSbacCoder[ uiFullDepth ][ CI_TEMP_BEST ] );
      }
    }
    else
    {
      //----- store original entropy coding status -----
      if( bCheckSplit )
      {
        m_pcRDGoOnSbacCoder->store( m_pppcRDSbacCoder[ uiFullDepth ][ CI_QT_TRAFO_ROOT ] );
      }
      //----- code luma/chroma block with given intra prediction mode and store Cbf-----
      dSingleCost   = 0.0;

      pcCU ->setTransformSkipSubParts ( 0, COMPONENT_Y, uiAbsPartIdx, totalAdjustedDepthChan );
      xIntraCodingTUBlock( pcOrgYuv, pcPredYuv, pcResiYuv, resiLumaSingle, false, uiSingleDistLuma, COMPONENT_Y, rTu DEBUG_STRING_PASS_INTO(sDebug));

      if( bCheckSplit )
      {
        uiSingleCbfLuma = pcCU->getCbf( uiAbsPartIdx, COMPONENT_Y, uiTrDepth );
      }
      //----- determine rate and r-d cost -----
      UInt uiSingleBits = xGetIntraBitsQT( rTu, true, false, false );

      if(m_pcEncCfg->getRDpenalty() && (uiLog2TrSize==5) && !isIntraSlice)
      {
        uiSingleBits=uiSingleBits*4;
      }

      dSingleCost       = m_pcRdCost->calcRdCost( uiSingleBits, uiSingleDistLuma );

      if (pcCU->getSlice()->getPPS()->getPpsRangeExtension().getCrossComponentPredictionEnabledFlag())
      {
        const Int xOffset = rTu.getRect( COMPONENT_Y ).x0;
        const Int yOffset = rTu.getRect( COMPONENT_Y ).y0;
        for (UInt storedResidualIndex = 0; storedResidualIndex < NUMBER_OF_STORED_RESIDUAL_TYPES; storedResidualIndex++)
        {
          if (bMaintainResidual[storedResidualIndex])
          {
            xStoreCrossComponentPredictionResult(resiLuma[storedResidualIndex], resiLumaSingle[storedResidualIndex], rTu, xOffset, yOffset, MAX_CU_SIZE, MAX_CU_SIZE);
          }
        }
      }
    }
  }

  if( bCheckSplit )
  {
    //----- store full entropy coding status, load original entropy coding status -----
    if( bCheckFull )
    {
      m_pcRDGoOnSbacCoder->store( m_pppcRDSbacCoder[ uiFullDepth ][ CI_QT_TRAFO_TEST ] );
      m_pcRDGoOnSbacCoder->load ( m_pppcRDSbacCoder[ uiFullDepth ][ CI_QT_TRAFO_ROOT ] );
    }
    else
    {
      m_pcRDGoOnSbacCoder->store( m_pppcRDSbacCoder[ uiFullDepth ][ CI_QT_TRAFO_ROOT ] );
    }
    //----- code splitted block -----
    Double     dSplitCost      = 0.0;
    Distortion uiSplitDistLuma = 0;
    UInt       uiSplitCbfLuma  = 0;

    TComTURecurse tuRecurseChild(rTu, false);
    DEBUG_STRING_NEW(sSplit)
    do
    {
      DEBUG_STRING_NEW(sChild)
#if HHI_RQT_INTRA_SPEEDUP
      xRecurIntraCodingLumaQT( pcOrgYuv, pcPredYuv, pcResiYuv, resiLumaSplit, uiSplitDistLuma, bCheckFirst, dSplitCost, tuRecurseChild DEBUG_STRING_PASS_INTO(sChild) );
#else
      xRecurIntraCodingLumaQT( pcOrgYuv, pcPredYuv, pcResiYuv, resiLumaSplit, uiSplitDistLuma, dSplitCost, tuRecurseChild DEBUG_STRING_PASS_INTO(sChild) );
#endif
      DEBUG_STRING_APPEND(sSplit, sChild)
      uiSplitCbfLuma |= pcCU->getCbf( tuRecurseChild.GetAbsPartIdxTU(), COMPONENT_Y, tuRecurseChild.GetTransformDepthRel() );
    } while (tuRecurseChild.nextSection(rTu) );

    UInt    uiPartsDiv     = rTu.GetAbsPartIdxNumParts();
    {
      if (uiSplitCbfLuma)
      {
        const UInt flag=1<<uiTrDepth;
        UChar *pBase=pcCU->getCbf( COMPONENT_Y );
        for( UInt uiOffs = 0; uiOffs < uiPartsDiv; uiOffs++ )
        {
          pBase[ uiAbsPartIdx + uiOffs ] |= flag;
        }
      }
    }
    //----- restore context states -----
    m_pcRDGoOnSbacCoder->load ( m_pppcRDSbacCoder[ uiFullDepth ][ CI_QT_TRAFO_ROOT ] );
    
    //----- determine rate and r-d cost -----
    UInt uiSplitBits = xGetIntraBitsQT( rTu, true, false, false );
    dSplitCost       = m_pcRdCost->calcRdCost( uiSplitBits, uiSplitDistLuma );

    //===== compare and set best =====
    if( dSplitCost < dSingleCost )
    {
      //--- update cost ---
      DEBUG_STRING_SWAP(sSplit, sDebug)
      ruiDistY += uiSplitDistLuma;
      dRDCost  += dSplitCost;

      if (pcCU->getSlice()->getPPS()->getPpsRangeExtension().getCrossComponentPredictionEnabledFlag())
      {
        const Int xOffset = rTu.getRect( COMPONENT_Y ).x0;
        const Int yOffset = rTu.getRect( COMPONENT_Y ).y0;
        for (UInt storedResidualIndex = 0; storedResidualIndex < NUMBER_OF_STORED_RESIDUAL_TYPES; storedResidualIndex++)
        {
          if (bMaintainResidual[storedResidualIndex])
          {
            xStoreCrossComponentPredictionResult(resiLuma[storedResidualIndex], resiLumaSplit[storedResidualIndex], rTu, xOffset, yOffset, MAX_CU_SIZE, MAX_CU_SIZE);
          }
        }
      }

      return;
    }

    //----- set entropy coding status -----
    m_pcRDGoOnSbacCoder->load ( m_pppcRDSbacCoder[ uiFullDepth ][ CI_QT_TRAFO_TEST ] );

    //--- set transform index and Cbf values ---
    pcCU->setTrIdxSubParts( uiTrDepth, uiAbsPartIdx, uiFullDepth );
    const TComRectangle &tuRect=rTu.getRect(COMPONENT_Y);
    pcCU->setCbfSubParts  ( uiSingleCbfLuma << uiTrDepth, COMPONENT_Y, uiAbsPartIdx, totalAdjustedDepthChan );
    pcCU ->setTransformSkipSubParts  ( bestModeId[COMPONENT_Y], COMPONENT_Y, uiAbsPartIdx, totalAdjustedDepthChan );

    //--- set reconstruction for next intra prediction blocks ---
    const UInt  uiQTLayer   = pcCU->getSlice()->getSPS()->getQuadtreeTULog2MaxSize() - uiLog2TrSize;
    const UInt  uiZOrder    = pcCU->getZorderIdxInCtu() + uiAbsPartIdx;
    const UInt  uiWidth     = tuRect.width;
    const UInt  uiHeight    = tuRect.height;
    Pel*  piSrc       = m_pcQTTempTComYuv[ uiQTLayer ].getAddr( COMPONENT_Y, uiAbsPartIdx );
    UInt  uiSrcStride = m_pcQTTempTComYuv[ uiQTLayer ].getStride  ( COMPONENT_Y );
    Pel*  piDes       = pcCU->getPic()->getPicYuvRec()->getAddr( COMPONENT_Y, pcCU->getCtuRsAddr(), uiZOrder );
    UInt  uiDesStride = pcCU->getPic()->getPicYuvRec()->getStride  ( COMPONENT_Y );

    for( UInt uiY = 0; uiY < uiHeight; uiY++, piSrc += uiSrcStride, piDes += uiDesStride )
    {
      for( UInt uiX = 0; uiX < uiWidth; uiX++ )
      {
        piDes[ uiX ] = piSrc[ uiX ];
      }
    }
  }
  ruiDistY += uiSingleDistLuma;
  dRDCost  += dSingleCost;
}


Void
TEncSearch::xSetIntraResultLumaQT(TComYuv* pcRecoYuv, TComTU &rTu)
{
  TComDataCU *pcCU        = rTu.getCU();
  const UInt uiTrDepth    = rTu.GetTransformDepthRel();
  const UInt uiAbsPartIdx = rTu.GetAbsPartIdxTU();
  UInt uiTrMode     = pcCU->getTransformIdx( uiAbsPartIdx );
  if(  uiTrMode == uiTrDepth )
  {
    UInt uiLog2TrSize = rTu.GetLog2LumaTrSize();
    UInt uiQTLayer    = pcCU->getSlice()->getSPS()->getQuadtreeTULog2MaxSize() - uiLog2TrSize;

    //===== copy transform coefficients =====

    const TComRectangle &tuRect=rTu.getRect(COMPONENT_Y);
    const UInt coeffOffset = rTu.getCoefficientOffset(COMPONENT_Y);
    const UInt numCoeffInBlock = tuRect.width * tuRect.height;

    if (numCoeffInBlock!=0)
    {
      const TCoeff* srcCoeff = m_ppcQTTempCoeff[COMPONENT_Y][uiQTLayer] + coeffOffset;
      TCoeff* destCoeff      = pcCU->getCoeff(COMPONENT_Y) + coeffOffset;
      ::memcpy( destCoeff, srcCoeff, sizeof(TCoeff)*numCoeffInBlock );
#if ADAPTIVE_QP_SELECTION
      const TCoeff* srcArlCoeff = m_ppcQTTempArlCoeff[COMPONENT_Y][ uiQTLayer ] + coeffOffset;
      TCoeff* destArlCoeff      = pcCU->getArlCoeff (COMPONENT_Y)               + coeffOffset;
      ::memcpy( destArlCoeff, srcArlCoeff, sizeof( TCoeff ) * numCoeffInBlock );
#endif
      m_pcQTTempTComYuv[ uiQTLayer ].copyPartToPartComponent( COMPONENT_Y, pcRecoYuv, uiAbsPartIdx, tuRect.width, tuRect.height );
    }

  }
  else
  {
    TComTURecurse tuRecurseChild(rTu, false);
    do
    {
      xSetIntraResultLumaQT( pcRecoYuv, tuRecurseChild );
    } while (tuRecurseChild.nextSection(rTu));
  }
}


Void
TEncSearch::xStoreIntraResultQT(const ComponentID compID, TComTU &rTu )
{
  TComDataCU *pcCU=rTu.getCU();
  const UInt uiTrDepth = rTu.GetTransformDepthRel();
  const UInt uiAbsPartIdx = rTu.GetAbsPartIdxTU();
  const UInt uiTrMode     = pcCU->getTransformIdx( uiAbsPartIdx );
  if ( compID==COMPONENT_Y || uiTrMode == uiTrDepth )
  {
    assert(uiTrMode == uiTrDepth);
    const UInt uiLog2TrSize = rTu.GetLog2LumaTrSize();
    const UInt uiQTLayer    = pcCU->getSlice()->getSPS()->getQuadtreeTULog2MaxSize() - uiLog2TrSize;

    if (rTu.ProcessComponentSection(compID))
    {
      const TComRectangle &tuRect=rTu.getRect(compID);

      //===== copy transform coefficients =====
      const UInt uiNumCoeff    = tuRect.width * tuRect.height;
      TCoeff* pcCoeffSrc = m_ppcQTTempCoeff[compID] [ uiQTLayer ] + rTu.getCoefficientOffset(compID);
      TCoeff* pcCoeffDst = m_pcQTTempTUCoeff[compID];

      ::memcpy( pcCoeffDst, pcCoeffSrc, sizeof( TCoeff ) * uiNumCoeff );
#if ADAPTIVE_QP_SELECTION
      TCoeff* pcArlCoeffSrc = m_ppcQTTempArlCoeff[compID] [ uiQTLayer ] + rTu.getCoefficientOffset(compID);
      TCoeff* pcArlCoeffDst = m_ppcQTTempTUArlCoeff[compID];
      ::memcpy( pcArlCoeffDst, pcArlCoeffSrc, sizeof( TCoeff ) * uiNumCoeff );
#endif
      //===== copy reconstruction =====
      m_pcQTTempTComYuv[ uiQTLayer ].copyPartToPartComponent( compID, &m_pcQTTempTransformSkipTComYuv, uiAbsPartIdx, tuRect.width, tuRect.height );
    }
  }
}


Void
TEncSearch::xLoadIntraResultQT(const ComponentID compID, TComTU &rTu)
{
  TComDataCU *pcCU=rTu.getCU();
  const UInt uiTrDepth = rTu.GetTransformDepthRel();
  const UInt uiAbsPartIdx = rTu.GetAbsPartIdxTU();
  const UInt uiTrMode     = pcCU->getTransformIdx( uiAbsPartIdx );
  if ( compID==COMPONENT_Y || uiTrMode == uiTrDepth )
  {
    assert(uiTrMode == uiTrDepth);
    const UInt uiLog2TrSize = rTu.GetLog2LumaTrSize();
    const UInt uiQTLayer    = pcCU->getSlice()->getSPS()->getQuadtreeTULog2MaxSize() - uiLog2TrSize;
    const UInt uiZOrder     = pcCU->getZorderIdxInCtu() + uiAbsPartIdx;

    if (rTu.ProcessComponentSection(compID))
    {
      const TComRectangle &tuRect=rTu.getRect(compID);

      //===== copy transform coefficients =====
      const UInt uiNumCoeff = tuRect.width * tuRect.height;
      TCoeff* pcCoeffDst = m_ppcQTTempCoeff[compID] [ uiQTLayer ] + rTu.getCoefficientOffset(compID);
      TCoeff* pcCoeffSrc = m_pcQTTempTUCoeff[compID];

      ::memcpy( pcCoeffDst, pcCoeffSrc, sizeof( TCoeff ) * uiNumCoeff );
#if ADAPTIVE_QP_SELECTION
      TCoeff* pcArlCoeffDst = m_ppcQTTempArlCoeff[compID] [ uiQTLayer ] + rTu.getCoefficientOffset(compID);
      TCoeff* pcArlCoeffSrc = m_ppcQTTempTUArlCoeff[compID];
      ::memcpy( pcArlCoeffDst, pcArlCoeffSrc, sizeof( TCoeff ) * uiNumCoeff );
#endif
      //===== copy reconstruction =====
      m_pcQTTempTransformSkipTComYuv.copyPartToPartComponent( compID, &m_pcQTTempTComYuv[ uiQTLayer ], uiAbsPartIdx, tuRect.width, tuRect.height );

      Pel*    piRecIPred        = pcCU->getPic()->getPicYuvRec()->getAddr( compID, pcCU->getCtuRsAddr(), uiZOrder );
      UInt    uiRecIPredStride  = pcCU->getPic()->getPicYuvRec()->getStride (compID);
      Pel*    piRecQt           = m_pcQTTempTComYuv[ uiQTLayer ].getAddr( compID, uiAbsPartIdx );
      UInt    uiRecQtStride     = m_pcQTTempTComYuv[ uiQTLayer ].getStride  (compID);
      UInt    uiWidth           = tuRect.width;
      UInt    uiHeight          = tuRect.height;
      Pel* pRecQt               = piRecQt;
      Pel* pRecIPred            = piRecIPred;
      for( UInt uiY = 0; uiY < uiHeight; uiY++ )
      {
        for( UInt uiX = 0; uiX < uiWidth; uiX++ )
        {
          pRecIPred[ uiX ] = pRecQt   [ uiX ];
        }
        pRecQt    += uiRecQtStride;
        pRecIPred += uiRecIPredStride;
      }
    }
  }
}

Void
TEncSearch::xStoreCrossComponentPredictionResult(       Pel    *pResiDst,
                                                  const Pel    *pResiSrc,
                                                        TComTU &rTu,
                                                  const Int     xOffset,
                                                  const Int     yOffset,
                                                  const Int     strideDst,
                                                  const Int     strideSrc )
{
  const Pel *pSrc = pResiSrc + yOffset * strideSrc + xOffset;
        Pel *pDst = pResiDst + yOffset * strideDst + xOffset;

  for( Int y = 0; y < rTu.getRect( COMPONENT_Y ).height; y++ )
  {
    ::memcpy( pDst, pSrc, sizeof(Pel) * rTu.getRect( COMPONENT_Y ).width );
    pDst += strideDst;
    pSrc += strideSrc;
  }
}

SChar
TEncSearch::xCalcCrossComponentPredictionAlpha(       TComTU &rTu,
                                                const ComponentID compID,
                                                const Pel*        piResiL,
                                                const Pel*        piResiC,
                                                const Int         width,
                                                const Int         height,
                                                const Int         strideL,
                                                const Int         strideC )
{
  const Pel *pResiL = piResiL;
  const Pel *pResiC = piResiC;

        TComDataCU *pCU = rTu.getCU();
  const Int  absPartIdx = rTu.GetAbsPartIdxTU( compID );
  const Int diffBitDepth = pCU->getSlice()->getSPS()->getDifferentialLumaChromaBitDepth();

  SChar alpha = 0;
  Int SSxy  = 0;
  Int SSxx  = 0;

  for( UInt uiY = 0; uiY < height; uiY++ )
  {
    for( UInt uiX = 0; uiX < width; uiX++ )
    {
      const Pel scaledResiL = rightShift( pResiL[ uiX ], diffBitDepth );
      SSxy += ( scaledResiL * pResiC[ uiX ] );
      SSxx += ( scaledResiL * scaledResiL   );
    }

    pResiL += strideL;
    pResiC += strideC;
  }

  if( SSxx != 0 )
  {
    Double dAlpha = SSxy / Double( SSxx );
    alpha = SChar(Clip3<Int>(-16, 16, (Int)(dAlpha * 16)));

    static const SChar alphaQuant[17] = {0, 1, 1, 2, 2, 2, 4, 4, 4, 4, 4, 4, 8, 8, 8, 8, 8};

    alpha = (alpha < 0) ? -alphaQuant[Int(-alpha)] : alphaQuant[Int(alpha)];
  }
  pCU->setCrossComponentPredictionAlphaPartRange( alpha, compID, absPartIdx, rTu.GetAbsPartIdxNumParts( compID ) );

  return alpha;
}

Void
TEncSearch::xRecurIntraChromaCodingQT(TComYuv*    pcOrgYuv,
                                      TComYuv*    pcPredYuv,
                                      TComYuv*    pcResiYuv,
                                      Pel         resiLuma[NUMBER_OF_STORED_RESIDUAL_TYPES][MAX_CU_SIZE * MAX_CU_SIZE],
                                      Distortion& ruiDist,
                                      TComTU&     rTu
                                      DEBUG_STRING_FN_DECLARE(sDebug))
{
  TComDataCU         *pcCU                  = rTu.getCU();
  const UInt          uiTrDepth             = rTu.GetTransformDepthRel();
  const UInt          uiAbsPartIdx          = rTu.GetAbsPartIdxTU();
  const ChromaFormat  format                = rTu.GetChromaFormat();
  UInt                uiTrMode              = pcCU->getTransformIdx( uiAbsPartIdx );
  const UInt          numberValidComponents = getNumberValidComponents(format);

  if(  uiTrMode == uiTrDepth )
  {
    if (!rTu.ProcessChannelSection(CHANNEL_TYPE_CHROMA))
    {
      return;
    }

    const UInt uiFullDepth = rTu.GetTransformDepthTotal();

    Bool checkTransformSkip = pcCU->getSlice()->getPPS()->getUseTransformSkip();
    checkTransformSkip &= TUCompRectHasAssociatedTransformSkipFlag(rTu.getRect(COMPONENT_Cb), pcCU->getSlice()->getPPS()->getPpsRangeExtension().getLog2MaxTransformSkipBlockSize());

    if ( m_pcEncCfg->getUseTransformSkipFast() )
    {
      checkTransformSkip &= TUCompRectHasAssociatedTransformSkipFlag(rTu.getRect(COMPONENT_Y), pcCU->getSlice()->getPPS()->getPpsRangeExtension().getLog2MaxTransformSkipBlockSize());

      if (checkTransformSkip)
      {
        Int nbLumaSkip = 0;
        const UInt maxAbsPartIdxSub=uiAbsPartIdx + (rTu.ProcessingAllQuadrants(COMPONENT_Cb)?1:4);
        for(UInt absPartIdxSub = uiAbsPartIdx; absPartIdxSub < maxAbsPartIdxSub; absPartIdxSub ++)
        {
          nbLumaSkip += pcCU->getTransformSkip(absPartIdxSub, COMPONENT_Y);
        }
        checkTransformSkip &= (nbLumaSkip > 0);
      }
    }


    for (UInt ch=COMPONENT_Cb; ch<numberValidComponents; ch++)
    {
      const ComponentID compID = ComponentID(ch);
      DEBUG_STRING_NEW(sDebugBestMode)

      //use RDO to decide whether Cr/Cb takes TS
      m_pcRDGoOnSbacCoder->store( m_pppcRDSbacCoder[uiFullDepth][CI_QT_TRAFO_ROOT] );

      const Bool splitIntoSubTUs = rTu.getRect(compID).width != rTu.getRect(compID).height;

      TComTURecurse TUIterator(rTu, false, (splitIntoSubTUs ? TComTU::VERTICAL_SPLIT : TComTU::DONT_SPLIT), true, compID);

      const UInt partIdxesPerSubTU = TUIterator.GetAbsPartIdxNumParts(compID);

      do
      {
        const UInt subTUAbsPartIdx   = TUIterator.GetAbsPartIdxTU(compID);

        Double     dSingleCost               = MAX_DOUBLE;
        Int        bestModeId                = 0;
        Distortion singleDistC               = 0;
        UInt       singleCbfC                = 0;
        Distortion singleDistCTmp            = 0;
        Double     singleCostTmp             = 0;
        UInt       singleCbfCTmp             = 0;
        SChar      bestCrossCPredictionAlpha = 0;
        Int        bestTransformSkipMode     = 0;

        const Bool checkCrossComponentPrediction =    (pcCU->getIntraDir(CHANNEL_TYPE_CHROMA, subTUAbsPartIdx) == DM_CHROMA_IDX)
                                                   &&  pcCU->getSlice()->getPPS()->getPpsRangeExtension().getCrossComponentPredictionEnabledFlag()
                                                   && (pcCU->getCbf(subTUAbsPartIdx,  COMPONENT_Y, uiTrDepth) != 0);

        const Int  crossCPredictionModesToTest = checkCrossComponentPrediction ? 2 : 1;
        const Int  transformSkipModesToTest    = checkTransformSkip            ? 2 : 1;
        const Int  totalModesToTest            = crossCPredictionModesToTest * transformSkipModesToTest;
              Int  currModeId                  = 0;
              Int  default0Save1Load2          = 0;

        for(Int transformSkipModeId = 0; transformSkipModeId < transformSkipModesToTest; transformSkipModeId++)
        {
          for(Int crossCPredictionModeId = 0; crossCPredictionModeId < crossCPredictionModesToTest; crossCPredictionModeId++)
          {
            pcCU->setCrossComponentPredictionAlphaPartRange(0, compID, subTUAbsPartIdx, partIdxesPerSubTU);
            DEBUG_STRING_NEW(sDebugMode)
            pcCU->setTransformSkipPartRange( transformSkipModeId, compID, subTUAbsPartIdx, partIdxesPerSubTU );
            currModeId++;

            const Bool isOneMode  = (totalModesToTest == 1);
            const Bool isLastMode = (currModeId == totalModesToTest); // currModeId is indexed from 1

            if (isOneMode)
            {
              default0Save1Load2 = 0;
            }
            else if (!isOneMode && (transformSkipModeId == 0) && (crossCPredictionModeId == 0))
            {
              default0Save1Load2 = 1; //save prediction on first mode
            }
            else
            {
              default0Save1Load2 = 2; //load it on subsequent modes
            }

            singleDistCTmp = 0;

            xIntraCodingTUBlock( pcOrgYuv, pcPredYuv, pcResiYuv, resiLuma, (crossCPredictionModeId != 0), singleDistCTmp, compID, TUIterator DEBUG_STRING_PASS_INTO(sDebugMode), default0Save1Load2);
            singleCbfCTmp = pcCU->getCbf( subTUAbsPartIdx, compID, uiTrDepth);

            if (  ((crossCPredictionModeId == 1) && (pcCU->getCrossComponentPredictionAlpha(subTUAbsPartIdx, compID) == 0))
               || ((transformSkipModeId    == 1) && (singleCbfCTmp == 0))) //In order not to code TS flag when cbf is zero, the case for TS with cbf being zero is forbidden.
            {
              singleCostTmp = MAX_DOUBLE;
            }
            else if (!isOneMode)
            {
              UInt bitsTmp = xGetIntraBitsQTChroma( TUIterator, compID, false );
              singleCostTmp  = m_pcRdCost->calcRdCost( bitsTmp, singleDistCTmp);
            }

            if(singleCostTmp < dSingleCost)
            {
              DEBUG_STRING_SWAP(sDebugBestMode, sDebugMode)
              dSingleCost               = singleCostTmp;
              singleDistC               = singleDistCTmp;
              bestCrossCPredictionAlpha = (crossCPredictionModeId != 0) ? pcCU->getCrossComponentPredictionAlpha(subTUAbsPartIdx, compID) : 0;
              bestTransformSkipMode     = transformSkipModeId;
              bestModeId                = currModeId;
              singleCbfC                = singleCbfCTmp;

              if (!isOneMode && !isLastMode)
              {
                xStoreIntraResultQT(compID, TUIterator);
                m_pcRDGoOnSbacCoder->store( m_pppcRDSbacCoder[ uiFullDepth ][ CI_TEMP_BEST ] );
              }
            }

            if (!isOneMode && !isLastMode)
            {
              m_pcRDGoOnSbacCoder->load ( m_pppcRDSbacCoder[ uiFullDepth ][ CI_QT_TRAFO_ROOT ] );
            }
          }
        }

        if(bestModeId < totalModesToTest)
        {
          xLoadIntraResultQT(compID, TUIterator);
          pcCU->setCbfPartRange( singleCbfC << uiTrDepth, compID, subTUAbsPartIdx, partIdxesPerSubTU );

          m_pcRDGoOnSbacCoder->load( m_pppcRDSbacCoder[ uiFullDepth ][ CI_TEMP_BEST ] );
        }

        DEBUG_STRING_APPEND(sDebug, sDebugBestMode)
        pcCU ->setTransformSkipPartRange                ( bestTransformSkipMode,     compID, subTUAbsPartIdx, partIdxesPerSubTU );
        pcCU ->setCrossComponentPredictionAlphaPartRange( bestCrossCPredictionAlpha, compID, subTUAbsPartIdx, partIdxesPerSubTU );
        ruiDist += singleDistC;
      } while (TUIterator.nextSection(rTu));

      if (splitIntoSubTUs)
      {
        offsetSubTUCBFs(rTu, compID);
      }
    }
  }
  else
  {
    UInt    uiSplitCbf[MAX_NUM_COMPONENT] = {0,0,0};

    TComTURecurse tuRecurseChild(rTu, false);
    const UInt uiTrDepthChild   = tuRecurseChild.GetTransformDepthRel();
    do
    {
      DEBUG_STRING_NEW(sChild)

      xRecurIntraChromaCodingQT( pcOrgYuv, pcPredYuv, pcResiYuv, resiLuma, ruiDist, tuRecurseChild DEBUG_STRING_PASS_INTO(sChild) );

      DEBUG_STRING_APPEND(sDebug, sChild)
      const UInt uiAbsPartIdxSub=tuRecurseChild.GetAbsPartIdxTU();

      for(UInt ch=COMPONENT_Cb; ch<numberValidComponents; ch++)
      {
        uiSplitCbf[ch] |= pcCU->getCbf( uiAbsPartIdxSub, ComponentID(ch), uiTrDepthChild );
      }
    } while ( tuRecurseChild.nextSection(rTu) );


    UInt uiPartsDiv = rTu.GetAbsPartIdxNumParts();
    for(UInt ch=COMPONENT_Cb; ch<numberValidComponents; ch++)
    {
      if (uiSplitCbf[ch])
      {
        const UInt flag=1<<uiTrDepth;
        ComponentID compID=ComponentID(ch);
        UChar *pBase=pcCU->getCbf( compID );
        for( UInt uiOffs = 0; uiOffs < uiPartsDiv; uiOffs++ )
        {
          pBase[ uiAbsPartIdx + uiOffs ] |= flag;
        }
      }
    }
  }
}




Void
TEncSearch::xSetIntraResultChromaQT(TComYuv*    pcRecoYuv, TComTU &rTu)
{
  if (!rTu.ProcessChannelSection(CHANNEL_TYPE_CHROMA))
  {
    return;
  }
  TComDataCU *pcCU=rTu.getCU();
  const UInt uiAbsPartIdx = rTu.GetAbsPartIdxTU();
  const UInt uiTrDepth   = rTu.GetTransformDepthRel();
  UInt uiTrMode     = pcCU->getTransformIdx( uiAbsPartIdx );
  if(  uiTrMode == uiTrDepth )
  {
    UInt uiLog2TrSize = rTu.GetLog2LumaTrSize();
    UInt uiQTLayer    = pcCU->getSlice()->getSPS()->getQuadtreeTULog2MaxSize() - uiLog2TrSize;

    //===== copy transform coefficients =====
    const TComRectangle &tuRectCb=rTu.getRect(COMPONENT_Cb);
    UInt uiNumCoeffC    = tuRectCb.width*tuRectCb.height;//( pcCU->getSlice()->getSPS()->getMaxCUWidth() * pcCU->getSlice()->getSPS()->getMaxCUHeight() ) >> ( uiFullDepth << 1 );
    const UInt offset = rTu.getCoefficientOffset(COMPONENT_Cb);

    const UInt numberValidComponents = getNumberValidComponents(rTu.GetChromaFormat());
    for (UInt ch=COMPONENT_Cb; ch<numberValidComponents; ch++)
    {
      const ComponentID component = ComponentID(ch);
      const TCoeff* src           = m_ppcQTTempCoeff[component][uiQTLayer] + offset;//(uiNumCoeffIncC*uiAbsPartIdx);
      TCoeff* dest                = pcCU->getCoeff(component) + offset;//(uiNumCoeffIncC*uiAbsPartIdx);
      ::memcpy( dest, src, sizeof(TCoeff)*uiNumCoeffC );
#if ADAPTIVE_QP_SELECTION
      TCoeff* pcArlCoeffSrc = m_ppcQTTempArlCoeff[component][ uiQTLayer ] + offset;//( uiNumCoeffIncC * uiAbsPartIdx );
      TCoeff* pcArlCoeffDst = pcCU->getArlCoeff(component)                + offset;//( uiNumCoeffIncC * uiAbsPartIdx );
      ::memcpy( pcArlCoeffDst, pcArlCoeffSrc, sizeof( TCoeff ) * uiNumCoeffC );
#endif
    }

    //===== copy reconstruction =====

    m_pcQTTempTComYuv[ uiQTLayer ].copyPartToPartComponent( COMPONENT_Cb, pcRecoYuv, uiAbsPartIdx, tuRectCb.width, tuRectCb.height );
    m_pcQTTempTComYuv[ uiQTLayer ].copyPartToPartComponent( COMPONENT_Cr, pcRecoYuv, uiAbsPartIdx, tuRectCb.width, tuRectCb.height );
  }
  else
  {
    TComTURecurse tuRecurseChild(rTu, false);
    do
    {
      xSetIntraResultChromaQT( pcRecoYuv, tuRecurseChild );
    } while (tuRecurseChild.nextSection(rTu));
  }
}



Void
TEncSearch::estIntraPredLumaQT(TComDataCU* pcCU,
                               TComYuv*    pcOrgYuv,
                               TComYuv*    pcPredYuv,
                               TComYuv*    pcResiYuv,
                               TComYuv*    pcRecoYuv,
                               Pel         resiLuma[NUMBER_OF_STORED_RESIDUAL_TYPES][MAX_CU_SIZE * MAX_CU_SIZE]
                               DEBUG_STRING_FN_DECLARE(sDebug))
{
  const UInt         uiDepth               = pcCU->getDepth(0);
  const UInt         uiInitTrDepth         = pcCU->getPartitionSize(0) == SIZE_2Nx2N ? 0 : 1;
  const UInt         uiNumPU               = 1<<(2*uiInitTrDepth);
  const UInt         uiQNumParts           = pcCU->getTotalNumPart() >> 2;
  const UInt         uiWidthBit            = pcCU->getIntraSizeIdx(0);
  const ChromaFormat chFmt                 = pcCU->getPic()->getChromaFormat();
  const UInt         numberValidComponents = getNumberValidComponents(chFmt);
  const TComSPS     &sps                   = *(pcCU->getSlice()->getSPS());
  const TComPPS     &pps                   = *(pcCU->getSlice()->getPPS());
        Distortion   uiOverallDistY        = 0;
        UInt         CandNum;
        Double       CandCostList[ FAST_UDI_MAX_RDMODE_NUM ];
        Pel          resiLumaPU[NUMBER_OF_STORED_RESIDUAL_TYPES][MAX_CU_SIZE * MAX_CU_SIZE];

        Bool    bMaintainResidual[NUMBER_OF_STORED_RESIDUAL_TYPES];
        for (UInt residualTypeIndex = 0; residualTypeIndex < NUMBER_OF_STORED_RESIDUAL_TYPES; residualTypeIndex++)
        {
          bMaintainResidual[residualTypeIndex] = true; //assume true unless specified otherwise
        }

        bMaintainResidual[RESIDUAL_ENCODER_SIDE] = !(m_pcEncCfg->getUseReconBasedCrossCPredictionEstimate());

  // Lambda calculation at equivalent Qp of 4 is recommended because at that Qp, the quantisation divisor is 1.
#if FULL_NBIT
  const Double sqrtLambdaForFirstPass= (m_pcEncCfg->getCostMode()==COST_MIXED_LOSSLESS_LOSSY_CODING && pcCU->getCUTransquantBypass(0)) ?
                sqrt(0.57 * pow(2.0, ((LOSSLESS_AND_MIXED_LOSSLESS_RD_COST_TEST_QP_PRIME - 12) / 3.0)))
              : m_pcRdCost->getSqrtLambda();
#else
  const Double sqrtLambdaForFirstPass= (m_pcEncCfg->getCostMode()==COST_MIXED_LOSSLESS_LOSSY_CODING && pcCU->getCUTransquantBypass(0)) ?
                sqrt(0.57 * pow(2.0, ((LOSSLESS_AND_MIXED_LOSSLESS_RD_COST_TEST_QP_PRIME - 12 - 6 * (sps.getBitDepth(CHANNEL_TYPE_LUMA) - 8)) / 3.0)))
              : m_pcRdCost->getSqrtLambda();
#endif

  //===== set QP and clear Cbf =====
  if ( pps.getUseDQP() == true)
  {
    pcCU->setQPSubParts( pcCU->getQP(0), 0, uiDepth );
  }
  else
  {
    pcCU->setQPSubParts( pcCU->getSlice()->getSliceQp(), 0, uiDepth );
  }

  //===== loop over partitions =====
  TComTURecurse tuRecurseCU(pcCU, 0);
  TComTURecurse tuRecurseWithPU(tuRecurseCU, false, (uiInitTrDepth==0)?TComTU::DONT_SPLIT : TComTU::QUAD_SPLIT);

  do
  {
    const UInt uiPartOffset=tuRecurseWithPU.GetAbsPartIdxTU();
//  for( UInt uiPU = 0, uiPartOffset=0; uiPU < uiNumPU; uiPU++, uiPartOffset += uiQNumParts )
  //{
    //===== init pattern for luma prediction =====
    DEBUG_STRING_NEW(sTemp2)

    //===== determine set of modes to be tested (using prediction signal only) =====
    Int numModesAvailable     = 35; //total number of Intra modes
    UInt uiRdModeList[FAST_UDI_MAX_RDMODE_NUM];
    Int numModesForFullRD = m_pcEncCfg->getFastUDIUseMPMEnabled()?g_aucIntraModeNumFast_UseMPM[ uiWidthBit ] : g_aucIntraModeNumFast_NotUseMPM[ uiWidthBit ];

    // this should always be true
    assert (tuRecurseWithPU.ProcessComponentSection(COMPONENT_Y));
    initIntraPatternChType( tuRecurseWithPU, COMPONENT_Y, true DEBUG_STRING_PASS_INTO(sTemp2) );

    Bool doFastSearch = (numModesForFullRD != numModesAvailable);
    if (doFastSearch)
    {
      assert(numModesForFullRD < numModesAvailable);

      for( Int i=0; i < numModesForFullRD; i++ )
      {
        CandCostList[ i ] = MAX_DOUBLE;
      }
      CandNum = 0;

      const TComRectangle &puRect=tuRecurseWithPU.getRect(COMPONENT_Y);
      const UInt uiAbsPartIdx=tuRecurseWithPU.GetAbsPartIdxTU();

      Pel* piOrg         = pcOrgYuv ->getAddr( COMPONENT_Y, uiAbsPartIdx );
      Pel* piPred        = pcPredYuv->getAddr( COMPONENT_Y, uiAbsPartIdx );
      UInt uiStride      = pcPredYuv->getStride( COMPONENT_Y );
      DistParam distParam;
      const Bool bUseHadamard=pcCU->getCUTransquantBypass(0) == 0;
      m_pcRdCost->setDistParam(distParam, sps.getBitDepth(CHANNEL_TYPE_LUMA), piOrg, uiStride, piPred, uiStride, puRect.width, puRect.height, bUseHadamard);
      distParam.bApplyWeight = false;
      for( Int modeIdx = 0; modeIdx < numModesAvailable; modeIdx++ )
      {
        UInt       uiMode = modeIdx;
        Distortion uiSad  = 0;

        const Bool bUseFilter=TComPrediction::filteringIntraReferenceSamples(COMPONENT_Y, uiMode, puRect.width, puRect.height, chFmt, sps.getSpsRangeExtension().getIntraSmoothingDisabledFlag());

        predIntraAng( COMPONENT_Y, uiMode, piOrg, uiStride, piPred, uiStride, tuRecurseWithPU, bUseFilter, TComPrediction::UseDPCMForFirstPassIntraEstimation(tuRecurseWithPU, uiMode) );

        // use hadamard transform here
        uiSad+=distParam.DistFunc(&distParam);

        UInt   iModeBits = 0;

        // NB xModeBitsIntra will not affect the mode for chroma that may have already been pre-estimated.
        iModeBits+=xModeBitsIntra( pcCU, uiMode, uiPartOffset, uiDepth, CHANNEL_TYPE_LUMA );

        Double cost      = (Double)uiSad + (Double)iModeBits * sqrtLambdaForFirstPass;

#if DEBUG_INTRA_SEARCH_COSTS
        std::cout << "1st pass mode " << uiMode << " SAD = " << uiSad << ", mode bits = " << iModeBits << ", cost = " << cost << "\n";
#endif

        CandNum += xUpdateCandList( uiMode, cost, numModesForFullRD, uiRdModeList, CandCostList );
      }

      if (m_pcEncCfg->getFastUDIUseMPMEnabled())
      {
        Int uiPreds[NUM_MOST_PROBABLE_MODES] = {-1, -1, -1};

        Int iMode = -1;
        pcCU->getIntraDirPredictor( uiPartOffset, uiPreds, COMPONENT_Y, &iMode );

        const Int numCand = ( iMode >= 0 ) ? iMode : Int(NUM_MOST_PROBABLE_MODES);

        for( Int j=0; j < numCand; j++)
        {
          Bool mostProbableModeIncluded = false;
          Int mostProbableMode = uiPreds[j];

          for( Int i=0; i < numModesForFullRD; i++)
          {
            mostProbableModeIncluded |= (mostProbableMode == uiRdModeList[i]);
          }
          if (!mostProbableModeIncluded)
          {
            uiRdModeList[numModesForFullRD++] = mostProbableMode;
          }
        }
      }
    }
    else
    {
      for( Int i=0; i < numModesForFullRD; i++)
      {
        uiRdModeList[i] = i;
      }
    }

    //===== check modes (using r-d costs) =====
#if HHI_RQT_INTRA_SPEEDUP_MOD
    UInt   uiSecondBestMode  = MAX_UINT;
    Double dSecondBestPUCost = MAX_DOUBLE;
#endif
    DEBUG_STRING_NEW(sPU)
    UInt       uiBestPUMode  = 0;
    Distortion uiBestPUDistY = 0;
    Double     dBestPUCost   = MAX_DOUBLE;

#if ENVIRONMENT_VARIABLE_DEBUG_AND_TEST
    UInt max=numModesForFullRD;

    if (DebugOptionList::ForceLumaMode.isSet())
    {
      max=0;  // we are forcing a direction, so don't bother with mode check
    }
    for ( UInt uiMode = 0; uiMode < max; uiMode++)
#else
    for( UInt uiMode = 0; uiMode < numModesForFullRD; uiMode++ )
#endif
    {
      // set luma prediction mode
      UInt uiOrgMode = uiRdModeList[uiMode];

      pcCU->setIntraDirSubParts ( CHANNEL_TYPE_LUMA, uiOrgMode, uiPartOffset, uiDepth + uiInitTrDepth );

      DEBUG_STRING_NEW(sMode)
      // set context models
      m_pcRDGoOnSbacCoder->load( m_pppcRDSbacCoder[uiDepth][CI_CURR_BEST] );

      // determine residual for partition
      Distortion uiPUDistY = 0;
      Double     dPUCost   = 0.0;
#if HHI_RQT_INTRA_SPEEDUP
      xRecurIntraCodingLumaQT( pcOrgYuv, pcPredYuv, pcResiYuv, resiLumaPU, uiPUDistY, true, dPUCost, tuRecurseWithPU DEBUG_STRING_PASS_INTO(sMode) );
#else
      xRecurIntraCodingLumaQT( pcOrgYuv, pcPredYuv, pcResiYuv, resiLumaPU, uiPUDistY, dPUCost, tuRecurseWithPU DEBUG_STRING_PASS_INTO(sMode) );
#endif

#if DEBUG_INTRA_SEARCH_COSTS
      std::cout << "2nd pass [luma,chroma] mode [" << Int(pcCU->getIntraDir(CHANNEL_TYPE_LUMA, uiPartOffset)) << "," << Int(pcCU->getIntraDir(CHANNEL_TYPE_CHROMA, uiPartOffset)) << "] cost = " << dPUCost << "\n";
#endif

      // check r-d cost
      if( dPUCost < dBestPUCost )
      {
        DEBUG_STRING_SWAP(sPU, sMode)
#if HHI_RQT_INTRA_SPEEDUP_MOD
        uiSecondBestMode  = uiBestPUMode;
        dSecondBestPUCost = dBestPUCost;
#endif
        uiBestPUMode  = uiOrgMode;
        uiBestPUDistY = uiPUDistY;
        dBestPUCost   = dPUCost;

        xSetIntraResultLumaQT( pcRecoYuv, tuRecurseWithPU );

        if (pps.getPpsRangeExtension().getCrossComponentPredictionEnabledFlag())
        {
          const Int xOffset = tuRecurseWithPU.getRect( COMPONENT_Y ).x0;
          const Int yOffset = tuRecurseWithPU.getRect( COMPONENT_Y ).y0;
          for (UInt storedResidualIndex = 0; storedResidualIndex < NUMBER_OF_STORED_RESIDUAL_TYPES; storedResidualIndex++)
          {
            if (bMaintainResidual[storedResidualIndex])
            {
              xStoreCrossComponentPredictionResult(resiLuma[storedResidualIndex], resiLumaPU[storedResidualIndex], tuRecurseWithPU, xOffset, yOffset, MAX_CU_SIZE, MAX_CU_SIZE );
            }
          }
        }

        UInt uiQPartNum = tuRecurseWithPU.GetAbsPartIdxNumParts();

        ::memcpy( m_puhQTTempTrIdx,  pcCU->getTransformIdx()       + uiPartOffset, uiQPartNum * sizeof( UChar ) );
        for (UInt component = 0; component < numberValidComponents; component++)
        {
          const ComponentID compID = ComponentID(component);
          ::memcpy( m_puhQTTempCbf[compID], pcCU->getCbf( compID  ) + uiPartOffset, uiQPartNum * sizeof( UChar ) );
          ::memcpy( m_puhQTTempTransformSkipFlag[compID],  pcCU->getTransformSkip(compID)  + uiPartOffset, uiQPartNum * sizeof( UChar ) );
        }
      }
#if HHI_RQT_INTRA_SPEEDUP_MOD
      else if( dPUCost < dSecondBestPUCost )
      {
        uiSecondBestMode  = uiOrgMode;
        dSecondBestPUCost = dPUCost;
      }
#endif
    } // Mode loop

#if HHI_RQT_INTRA_SPEEDUP
#if HHI_RQT_INTRA_SPEEDUP_MOD
    for( UInt ui =0; ui < 2; ++ui )
#endif
    {
#if HHI_RQT_INTRA_SPEEDUP_MOD
      UInt uiOrgMode   = ui ? uiSecondBestMode  : uiBestPUMode;
      if( uiOrgMode == MAX_UINT )
      {
        break;
      }
#else
      UInt uiOrgMode = uiBestPUMode;
#endif

#if ENVIRONMENT_VARIABLE_DEBUG_AND_TEST
      if (DebugOptionList::ForceLumaMode.isSet())
      {
        uiOrgMode = DebugOptionList::ForceLumaMode.getInt();
      }
#endif

      pcCU->setIntraDirSubParts ( CHANNEL_TYPE_LUMA, uiOrgMode, uiPartOffset, uiDepth + uiInitTrDepth );
      DEBUG_STRING_NEW(sModeTree)

      // set context models
      m_pcRDGoOnSbacCoder->load( m_pppcRDSbacCoder[uiDepth][CI_CURR_BEST] );

      // determine residual for partition
      Distortion uiPUDistY = 0;
      Double     dPUCost   = 0.0;

      xRecurIntraCodingLumaQT( pcOrgYuv, pcPredYuv, pcResiYuv, resiLumaPU, uiPUDistY, false, dPUCost, tuRecurseWithPU DEBUG_STRING_PASS_INTO(sModeTree));

      // check r-d cost
      if( dPUCost < dBestPUCost )
      {
        DEBUG_STRING_SWAP(sPU, sModeTree)
        uiBestPUMode  = uiOrgMode;
        uiBestPUDistY = uiPUDistY;
        dBestPUCost   = dPUCost;

        xSetIntraResultLumaQT( pcRecoYuv, tuRecurseWithPU );

        if (pps.getPpsRangeExtension().getCrossComponentPredictionEnabledFlag())
        {
          const Int xOffset = tuRecurseWithPU.getRect( COMPONENT_Y ).x0;
          const Int yOffset = tuRecurseWithPU.getRect( COMPONENT_Y ).y0;
          for (UInt storedResidualIndex = 0; storedResidualIndex < NUMBER_OF_STORED_RESIDUAL_TYPES; storedResidualIndex++)
          {
            if (bMaintainResidual[storedResidualIndex])
            {
              xStoreCrossComponentPredictionResult(resiLuma[storedResidualIndex], resiLumaPU[storedResidualIndex], tuRecurseWithPU, xOffset, yOffset, MAX_CU_SIZE, MAX_CU_SIZE );
            }
          }
        }

        const UInt uiQPartNum = tuRecurseWithPU.GetAbsPartIdxNumParts();
        ::memcpy( m_puhQTTempTrIdx,  pcCU->getTransformIdx()       + uiPartOffset, uiQPartNum * sizeof( UChar ) );

        for (UInt component = 0; component < numberValidComponents; component++)
        {
          const ComponentID compID = ComponentID(component);
          ::memcpy( m_puhQTTempCbf[compID], pcCU->getCbf( compID  ) + uiPartOffset, uiQPartNum * sizeof( UChar ) );
          ::memcpy( m_puhQTTempTransformSkipFlag[compID],  pcCU->getTransformSkip(compID)  + uiPartOffset, uiQPartNum * sizeof( UChar ) );
        }
      }
    } // Mode loop
#endif

    DEBUG_STRING_APPEND(sDebug, sPU)

    //--- update overall distortion ---
    uiOverallDistY += uiBestPUDistY;

    //--- update transform index and cbf ---
    const UInt uiQPartNum = tuRecurseWithPU.GetAbsPartIdxNumParts();
    ::memcpy( pcCU->getTransformIdx()       + uiPartOffset, m_puhQTTempTrIdx,  uiQPartNum * sizeof( UChar ) );
    for (UInt component = 0; component < numberValidComponents; component++)
    {
      const ComponentID compID = ComponentID(component);
      ::memcpy( pcCU->getCbf( compID  ) + uiPartOffset, m_puhQTTempCbf[compID], uiQPartNum * sizeof( UChar ) );
      ::memcpy( pcCU->getTransformSkip( compID  ) + uiPartOffset, m_puhQTTempTransformSkipFlag[compID ], uiQPartNum * sizeof( UChar ) );
    }

    //--- set reconstruction for next intra prediction blocks ---
    if( !tuRecurseWithPU.IsLastSection() )
    {
      const TComRectangle &puRect=tuRecurseWithPU.getRect(COMPONENT_Y);
      const UInt  uiCompWidth   = puRect.width;
      const UInt  uiCompHeight  = puRect.height;

      const UInt  uiZOrder      = pcCU->getZorderIdxInCtu() + uiPartOffset;
            Pel*  piDes         = pcCU->getPic()->getPicYuvRec()->getAddr( COMPONENT_Y, pcCU->getCtuRsAddr(), uiZOrder );
      const UInt  uiDesStride   = pcCU->getPic()->getPicYuvRec()->getStride( COMPONENT_Y);
      const Pel*  piSrc         = pcRecoYuv->getAddr( COMPONENT_Y, uiPartOffset );
      const UInt  uiSrcStride   = pcRecoYuv->getStride( COMPONENT_Y);

      for( UInt uiY = 0; uiY < uiCompHeight; uiY++, piSrc += uiSrcStride, piDes += uiDesStride )
      {
        for( UInt uiX = 0; uiX < uiCompWidth; uiX++ )
        {
          piDes[ uiX ] = piSrc[ uiX ];
        }
      }
    }

    //=== update PU data ====
    pcCU->setIntraDirSubParts     ( CHANNEL_TYPE_LUMA, uiBestPUMode, uiPartOffset, uiDepth + uiInitTrDepth );
	
  } while (tuRecurseWithPU.nextSection(tuRecurseCU));


  if( uiNumPU > 1 )
  { // set Cbf for all blocks
    UInt uiCombCbfY = 0;
    UInt uiCombCbfU = 0;
    UInt uiCombCbfV = 0;
    UInt uiPartIdx  = 0;
    for( UInt uiPart = 0; uiPart < 4; uiPart++, uiPartIdx += uiQNumParts )
    {
      uiCombCbfY |= pcCU->getCbf( uiPartIdx, COMPONENT_Y,  1 );
      uiCombCbfU |= pcCU->getCbf( uiPartIdx, COMPONENT_Cb, 1 );
      uiCombCbfV |= pcCU->getCbf( uiPartIdx, COMPONENT_Cr, 1 );
    }
    for( UInt uiOffs = 0; uiOffs < 4 * uiQNumParts; uiOffs++ )
    {
      pcCU->getCbf( COMPONENT_Y  )[ uiOffs ] |= uiCombCbfY;
      pcCU->getCbf( COMPONENT_Cb )[ uiOffs ] |= uiCombCbfU;
      pcCU->getCbf( COMPONENT_Cr )[ uiOffs ] |= uiCombCbfV;
    }
  }

  //===== reset context models =====
  m_pcRDGoOnSbacCoder->load(m_pppcRDSbacCoder[uiDepth][CI_CURR_BEST]);

  //===== set distortion (rate and r-d costs are determined later) =====
  pcCU->getTotalDistortion() = uiOverallDistY;
}




Void
TEncSearch::estIntraPredChromaQT(TComDataCU* pcCU,
                                 TComYuv*    pcOrgYuv,
                                 TComYuv*    pcPredYuv,
                                 TComYuv*    pcResiYuv,
                                 TComYuv*    pcRecoYuv,
                                 Pel         resiLuma[NUMBER_OF_STORED_RESIDUAL_TYPES][MAX_CU_SIZE * MAX_CU_SIZE]
                                 DEBUG_STRING_FN_DECLARE(sDebug))
{
  const UInt    uiInitTrDepth  = pcCU->getPartitionSize(0) != SIZE_2Nx2N && enable4ChromaPUsInIntraNxNCU(pcOrgYuv->getChromaFormat()) ? 1 : 0;

  TComTURecurse tuRecurseCU(pcCU, 0);
  TComTURecurse tuRecurseWithPU(tuRecurseCU, false, (uiInitTrDepth==0)?TComTU::DONT_SPLIT : TComTU::QUAD_SPLIT);
  const UInt    uiQNumParts    = tuRecurseWithPU.GetAbsPartIdxNumParts();
  const UInt    uiDepthCU=tuRecurseWithPU.getCUDepth();
  const UInt    numberValidComponents = pcCU->getPic()->getNumberValidComponents();

  do
  {
    UInt       uiBestMode  = 0;
    Distortion uiBestDist  = 0;
    Double     dBestCost   = MAX_DOUBLE;

    //----- init mode list -----
    if (tuRecurseWithPU.ProcessChannelSection(CHANNEL_TYPE_CHROMA))
    {
      UInt uiModeList[FAST_UDI_MAX_RDMODE_NUM];
      const UInt  uiQPartNum     = uiQNumParts;
      const UInt  uiPartOffset   = tuRecurseWithPU.GetAbsPartIdxTU();
      {
        UInt  uiMinMode = 0;
        UInt  uiMaxMode = NUM_CHROMA_MODE;

        //----- check chroma modes -----
        pcCU->getAllowedChromaDir( uiPartOffset, uiModeList );

#if ENVIRONMENT_VARIABLE_DEBUG_AND_TEST
        if (DebugOptionList::ForceChromaMode.isSet())
        {
          uiMinMode=DebugOptionList::ForceChromaMode.getInt();
          if (uiModeList[uiMinMode]==34)
          {
            uiMinMode=4; // if the fixed mode has been renumbered because DM_CHROMA covers it, use DM_CHROMA.
          }
          uiMaxMode=uiMinMode+1;
        }
#endif

        DEBUG_STRING_NEW(sPU)

        for( UInt uiMode = uiMinMode; uiMode < uiMaxMode; uiMode++ )
        {
          //----- restore context models -----
          m_pcRDGoOnSbacCoder->load( m_pppcRDSbacCoder[uiDepthCU][CI_CURR_BEST] );
          
          DEBUG_STRING_NEW(sMode)
          //----- chroma coding -----
          Distortion uiDist = 0;
          pcCU->setIntraDirSubParts  ( CHANNEL_TYPE_CHROMA, uiModeList[uiMode], uiPartOffset, uiDepthCU+uiInitTrDepth );
          xRecurIntraChromaCodingQT       ( pcOrgYuv, pcPredYuv, pcResiYuv, resiLuma, uiDist, tuRecurseWithPU DEBUG_STRING_PASS_INTO(sMode) );

          if( pcCU->getSlice()->getPPS()->getUseTransformSkip() )
          {
            m_pcRDGoOnSbacCoder->load( m_pppcRDSbacCoder[uiDepthCU][CI_CURR_BEST] );
          }

          UInt    uiBits = xGetIntraBitsQT( tuRecurseWithPU, false, true, false );
          Double  dCost  = m_pcRdCost->calcRdCost( uiBits, uiDist );

          //----- compare -----
          if( dCost < dBestCost )
          {
            DEBUG_STRING_SWAP(sPU, sMode);
            dBestCost   = dCost;
            uiBestDist  = uiDist;
            uiBestMode  = uiModeList[uiMode];

            xSetIntraResultChromaQT( pcRecoYuv, tuRecurseWithPU );
            for (UInt componentIndex = COMPONENT_Cb; componentIndex < numberValidComponents; componentIndex++)
            {
              const ComponentID compID = ComponentID(componentIndex);
              ::memcpy( m_puhQTTempCbf[compID], pcCU->getCbf( compID )+uiPartOffset, uiQPartNum * sizeof( UChar ) );
              ::memcpy( m_puhQTTempTransformSkipFlag[compID], pcCU->getTransformSkip( compID )+uiPartOffset, uiQPartNum * sizeof( UChar ) );
              ::memcpy( m_phQTTempCrossComponentPredictionAlpha[compID], pcCU->getCrossComponentPredictionAlpha(compID)+uiPartOffset, uiQPartNum * sizeof( SChar ) );
            }
          }
        }

        DEBUG_STRING_APPEND(sDebug, sPU)

        //----- set data -----
        for (UInt componentIndex = COMPONENT_Cb; componentIndex < numberValidComponents; componentIndex++)
        {
          const ComponentID compID = ComponentID(componentIndex);
          ::memcpy( pcCU->getCbf( compID )+uiPartOffset, m_puhQTTempCbf[compID], uiQPartNum * sizeof( UChar ) );
          ::memcpy( pcCU->getTransformSkip( compID )+uiPartOffset, m_puhQTTempTransformSkipFlag[compID], uiQPartNum * sizeof( UChar ) );
          ::memcpy( pcCU->getCrossComponentPredictionAlpha(compID)+uiPartOffset, m_phQTTempCrossComponentPredictionAlpha[compID], uiQPartNum * sizeof( SChar ) );
        }
      }

      if( ! tuRecurseWithPU.IsLastSection() )
      {
        for (UInt ch=COMPONENT_Cb; ch<numberValidComponents; ch++)
        {
          const ComponentID compID    = ComponentID(ch);
          const TComRectangle &tuRect = tuRecurseWithPU.getRect(compID);
          const UInt  uiCompWidth     = tuRect.width;
          const UInt  uiCompHeight    = tuRect.height;
          const UInt  uiZOrder        = pcCU->getZorderIdxInCtu() + tuRecurseWithPU.GetAbsPartIdxTU();
                Pel*  piDes           = pcCU->getPic()->getPicYuvRec()->getAddr( compID, pcCU->getCtuRsAddr(), uiZOrder );
          const UInt  uiDesStride     = pcCU->getPic()->getPicYuvRec()->getStride( compID);
          const Pel*  piSrc           = pcRecoYuv->getAddr( compID, uiPartOffset );
          const UInt  uiSrcStride     = pcRecoYuv->getStride( compID);

          for( UInt uiY = 0; uiY < uiCompHeight; uiY++, piSrc += uiSrcStride, piDes += uiDesStride )
          {
            for( UInt uiX = 0; uiX < uiCompWidth; uiX++ )
            {
              piDes[ uiX ] = piSrc[ uiX ];
            }
          }
        }
      }

      pcCU->setIntraDirSubParts( CHANNEL_TYPE_CHROMA, uiBestMode, uiPartOffset, uiDepthCU+uiInitTrDepth );
      pcCU->getTotalDistortion      () += uiBestDist;
    }

  } while (tuRecurseWithPU.nextSection(tuRecurseCU));

  //----- restore context models -----

  if( uiInitTrDepth != 0 )
  { // set Cbf for all blocks
    UInt uiCombCbfU = 0;
    UInt uiCombCbfV = 0;
    UInt uiPartIdx  = 0;
    for( UInt uiPart = 0; uiPart < 4; uiPart++, uiPartIdx += uiQNumParts )
    {
      uiCombCbfU |= pcCU->getCbf( uiPartIdx, COMPONENT_Cb, 1 );
      uiCombCbfV |= pcCU->getCbf( uiPartIdx, COMPONENT_Cr, 1 );
    }
    for( UInt uiOffs = 0; uiOffs < 4 * uiQNumParts; uiOffs++ )
    {
      pcCU->getCbf( COMPONENT_Cb )[ uiOffs ] |= uiCombCbfU;
      pcCU->getCbf( COMPONENT_Cr )[ uiOffs ] |= uiCombCbfV;
    }
  }

  m_pcRDGoOnSbacCoder->load( m_pppcRDSbacCoder[uiDepthCU][CI_CURR_BEST] );
}




/** Function for encoding and reconstructing luma/chroma samples of a PCM mode CU.
 * \param pcCU pointer to current CU
 * \param uiAbsPartIdx part index
 * \param pOrg pointer to original sample arrays
 * \param pPCM pointer to PCM code arrays
 * \param pPred pointer to prediction signal arrays
 * \param pResi pointer to residual signal arrays
 * \param pReco pointer to reconstructed sample arrays
 * \param uiStride stride of the original/prediction/residual sample arrays
 * \param uiWidth block width
 * \param uiHeight block height
 * \param compID texture component type
 */
Void TEncSearch::xEncPCM (TComDataCU* pcCU, UInt uiAbsPartIdx, Pel* pOrg, Pel* pPCM, Pel* pPred, Pel* pResi, Pel* pReco, UInt uiStride, UInt uiWidth, UInt uiHeight, const ComponentID compID )
{
  const UInt uiReconStride   = pcCU->getPic()->getPicYuvRec()->getStride(compID);
  const UInt uiPCMBitDepth   = pcCU->getSlice()->getSPS()->getPCMBitDepth(toChannelType(compID));
  const Int  channelBitDepth = pcCU->getSlice()->getSPS()->getBitDepth(toChannelType(compID));
  Pel* pRecoPic = pcCU->getPic()->getPicYuvRec()->getAddr(compID, pcCU->getCtuRsAddr(), pcCU->getZorderIdxInCtu()+uiAbsPartIdx);

  const Int pcmShiftRight=(channelBitDepth - Int(uiPCMBitDepth));

  assert(pcmShiftRight >= 0);

  for( UInt uiY = 0; uiY < uiHeight; uiY++ )
  {
    for( UInt uiX = 0; uiX < uiWidth; uiX++ )
    {
      // Reset pred and residual
      pPred[uiX] = 0;
      pResi[uiX] = 0;
      // Encode
      pPCM[uiX] = (pOrg[uiX]>>pcmShiftRight);
      // Reconstruction
      pReco   [uiX] = (pPCM[uiX]<<(pcmShiftRight));
      pRecoPic[uiX] = pReco[uiX];
    }
    pPred += uiStride;
    pResi += uiStride;
    pPCM += uiWidth;
    pOrg += uiStride;
    pReco += uiStride;
    pRecoPic += uiReconStride;
  }
}


//!  Function for PCM mode estimation.
Void TEncSearch::IPCMSearch( TComDataCU* pcCU, TComYuv* pcOrgYuv, TComYuv* pcPredYuv, TComYuv* pcResiYuv, TComYuv* pcRecoYuv )
{
  UInt              uiDepth      = pcCU->getDepth(0);
  const Distortion  uiDistortion = 0;
  UInt              uiBits;

  Double dCost;

  for (UInt ch=0; ch < pcCU->getPic()->getNumberValidComponents(); ch++)
  {
    const ComponentID compID  = ComponentID(ch);
    const UInt width  = pcCU->getWidth(0)  >> pcCU->getPic()->getComponentScaleX(compID);
    const UInt height = pcCU->getHeight(0) >> pcCU->getPic()->getComponentScaleY(compID);
    const UInt stride = pcPredYuv->getStride(compID);

    Pel * pOrig    = pcOrgYuv->getAddr  (compID, 0, width);
    Pel * pResi    = pcResiYuv->getAddr(compID, 0, width);
    Pel * pPred    = pcPredYuv->getAddr(compID, 0, width);
    Pel * pReco    = pcRecoYuv->getAddr(compID, 0, width);
    Pel * pPCM     = pcCU->getPCMSample (compID);

    xEncPCM ( pcCU, 0, pOrig, pPCM, pPred, pResi, pReco, stride, width, height, compID );

  }

  m_pcEntropyCoder->resetBits();
  xEncIntraHeader ( pcCU, uiDepth, 0, true, false);
  uiBits = m_pcEntropyCoder->getNumberOfWrittenBits();

  dCost = m_pcRdCost->calcRdCost( uiBits, uiDistortion );

  m_pcRDGoOnSbacCoder->load(m_pppcRDSbacCoder[uiDepth][CI_CURR_BEST]);

  pcCU->getTotalBits()       = uiBits;
  pcCU->getTotalCost()       = dCost;
  pcCU->getTotalDistortion() = uiDistortion;

  pcCU->copyToPic(uiDepth);
}




Void TEncSearch::xGetInterPredictionError( TComDataCU* pcCU, TComYuv* pcYuvOrg, Int iPartIdx, Distortion& ruiErr, Bool /*bHadamard*/ )
{
  motionCompensation( pcCU, &m_tmpYuvPred, REF_PIC_LIST_X, iPartIdx );

  UInt uiAbsPartIdx = 0;
  Int iWidth = 0;
  Int iHeight = 0;
  pcCU->getPartIndexAndSize( iPartIdx, uiAbsPartIdx, iWidth, iHeight );

  DistParam cDistParam;

  cDistParam.bApplyWeight = false;


  m_pcRdCost->setDistParam( cDistParam, pcCU->getSlice()->getSPS()->getBitDepth(CHANNEL_TYPE_LUMA),
                            pcYuvOrg->getAddr( COMPONENT_Y, uiAbsPartIdx ), pcYuvOrg->getStride(COMPONENT_Y),
                            m_tmpYuvPred .getAddr( COMPONENT_Y, uiAbsPartIdx ), m_tmpYuvPred.getStride(COMPONENT_Y),
                            iWidth, iHeight, m_pcEncCfg->getUseHADME() && (pcCU->getCUTransquantBypass(iPartIdx) == 0) );

  ruiErr = cDistParam.DistFunc( &cDistParam );
}

//! estimation of best merge coding
Void TEncSearch::xMergeEstimation( TComDataCU* pcCU, TComYuv* pcYuvOrg, Int iPUIdx, UInt& uiInterDir, TComMvField* pacMvField, UInt& uiMergeIndex, Distortion& ruiCost, TComMvField* cMvFieldNeighbours, UChar* uhInterDirNeighbours, Int& numValidMergeCand )
{

  UInt uiAbsPartIdx = 0;
  Int iWidth = 0;
  Int iHeight = 0;

 
  pcCU->getPartIndexAndSize( iPUIdx, uiAbsPartIdx, iWidth, iHeight );
  UInt uiDepth = pcCU->getDepth( uiAbsPartIdx );

  PartSize partSize = pcCU->getPartitionSize( 0 );
  if ( pcCU->getSlice()->getPPS()->getLog2ParallelMergeLevelMinus2() && partSize != SIZE_2Nx2N && pcCU->getWidth( 0 ) <= 8 )
  {
    if ( iPUIdx == 0 )
    {
      pcCU->setPartSizeSubParts( SIZE_2Nx2N, 0, uiDepth ); // temporarily set
      pcCU->getInterMergeCandidates( 0, 0, cMvFieldNeighbours,uhInterDirNeighbours, numValidMergeCand );
      pcCU->setPartSizeSubParts( partSize, 0, uiDepth ); // restore
    }
  }
  else
  {
    pcCU->getInterMergeCandidates( uiAbsPartIdx, iPUIdx, cMvFieldNeighbours, uhInterDirNeighbours, numValidMergeCand );
  }

  xRestrictBipredMergeCand( pcCU, iPUIdx, cMvFieldNeighbours, uhInterDirNeighbours, numValidMergeCand );

  ruiCost = std::numeric_limits<Distortion>::max();
  for( UInt uiMergeCand = 0; uiMergeCand < numValidMergeCand; ++uiMergeCand )
  {
    Distortion uiCostCand = std::numeric_limits<Distortion>::max();
    UInt       uiBitsCand = 0;

    PartSize ePartSize = pcCU->getPartitionSize( 0 );

    pcCU->getCUMvField(REF_PIC_LIST_0)->setAllMvField( cMvFieldNeighbours[0 + 2*uiMergeCand], ePartSize, uiAbsPartIdx, 0, iPUIdx );
    pcCU->getCUMvField(REF_PIC_LIST_1)->setAllMvField( cMvFieldNeighbours[1 + 2*uiMergeCand], ePartSize, uiAbsPartIdx, 0, iPUIdx );

    xGetInterPredictionError( pcCU, pcYuvOrg, iPUIdx, uiCostCand, m_pcEncCfg->getUseHADME() );
    uiBitsCand = uiMergeCand + 1;
    if (uiMergeCand == m_pcEncCfg->getMaxNumMergeCand() -1)
    {
        uiBitsCand--;
    }
    uiCostCand = uiCostCand + m_pcRdCost->getCost( uiBitsCand );
    if ( uiCostCand < ruiCost )
    {
      ruiCost = uiCostCand;
      pacMvField[0] = cMvFieldNeighbours[0 + 2*uiMergeCand];
      pacMvField[1] = cMvFieldNeighbours[1 + 2*uiMergeCand];
      uiInterDir = uhInterDirNeighbours[uiMergeCand];
      uiMergeIndex = uiMergeCand;
    }
  }
 
}

/** convert bi-pred merge candidates to uni-pred
 * \param pcCU
 * \param puIdx
 * \param mvFieldNeighbours
 * \param interDirNeighbours
 * \param numValidMergeCand
 * \returns Void
 */
Void TEncSearch::xRestrictBipredMergeCand( TComDataCU* pcCU, UInt puIdx, TComMvField* mvFieldNeighbours, UChar* interDirNeighbours, Int numValidMergeCand )
{
	
  if ( pcCU->isBipredRestriction(puIdx) )
  {
    for( UInt mergeCand = 0; mergeCand < numValidMergeCand; ++mergeCand )
    {
      if ( interDirNeighbours[mergeCand] == 3 )
      {
        interDirNeighbours[mergeCand] = 1;
        mvFieldNeighbours[(mergeCand << 1) + 1].setMvField(TComMv(0,0), -1);
      }
    }
  }
}

//! search of the best candidate for inter prediction
#if AMP_MRG
Void TEncSearch::predInterSearch( TComDataCU* pcCU, TComYuv* pcOrgYuv, TComYuv* pcPredYuv, TComYuv* pcResiYuv, TComYuv* pcRecoYuv DEBUG_STRING_FN_DECLARE(sDebug), Bool bUseRes, Bool bUseMRG )
#else
Void TEncSearch::predInterSearch( TComDataCU* pcCU, TComYuv* pcOrgYuv, TComYuv* pcPredYuv, TComYuv* pcResiYuv, TComYuv* pcRecoYuv, Bool bUseRes )
#endif
{
  for(UInt i=0; i<NUM_REF_PIC_LIST_01; i++)
  {
    m_acYuvPred[i].clear();
  }
  m_cYuvPredTemp.clear();
  pcPredYuv->clear();

  if ( !bUseRes )
  {
    pcResiYuv->clear();
  }

  pcRecoYuv->clear();
  
  TComMv       cMvSrchRngLT;
  TComMv       cMvSrchRngRB;

  TComMv       cMvZero;
  TComMv       TempMv; //kolya

  TComMv       cMv[2];
  TComMv       cMvBi[2];
  TComMv       cMvTemp[2][33];

  Int          iNumPart    = pcCU->getNumPartitions();
  Int          iNumPredDir = pcCU->getSlice()->isInterP() ? 1 : 2;

  TComMv       cMvPred[2][33];

  TComMv       cMvPredBi[2][33];
  Int          aaiMvpIdxBi[2][33];

  Int          aaiMvpIdx[2][33];
  Int          aaiMvpNum[2][33];

  AMVPInfo     aacAMVPInfo[2][33];

  Int          iRefIdx[2]={0,0}; //If un-initialized, may cause SEGV in bi-directional prediction iterative stage.
  Int          iRefIdxBi[2];

  UInt         uiPartAddr;
  Int          iRoiWidth, iRoiHeight;

  UInt         uiMbBits[3] = {1, 1, 0};

  UInt         uiLastMode = 0;
  Int          iRefStart, iRefEnd;

  PartSize     ePartSize = pcCU->getPartitionSize( 0 );

  Int          bestBiPRefIdxL1 = 0;
  Int          bestBiPMvpL1 = 0;
  Distortion   biPDistTemp = std::numeric_limits<Distortion>::max();

  TComMvField cMvFieldNeighbours[MRG_MAX_NUM_CANDS << 1]; // double length for mv of both lists
  UChar uhInterDirNeighbours[MRG_MAX_NUM_CANDS];
  Int numValidMergeCand = 0 ;

  for ( Int iPartIdx = 0; iPartIdx < iNumPart; iPartIdx++ )
  {
    Distortion   uiCost[2] = { std::numeric_limits<Distortion>::max(), std::numeric_limits<Distortion>::max() };
    Distortion   uiCostBi  =   std::numeric_limits<Distortion>::max();
    Distortion   uiCostTemp;

    UInt         uiBits[3];
    UInt         uiBitsTemp;
    Distortion   bestBiPDist = std::numeric_limits<Distortion>::max();

    Distortion   uiCostTempL0[MAX_NUM_REF];
    for (Int iNumRef=0; iNumRef < MAX_NUM_REF; iNumRef++)
    {
      uiCostTempL0[iNumRef] = std::numeric_limits<Distortion>::max();
    }
    UInt         uiBitsTempL0[MAX_NUM_REF];

    TComMv       mvValidList1;
    Int          refIdxValidList1 = 0;
    UInt         bitsValidList1 = MAX_UINT;
    Distortion   costValidList1 = std::numeric_limits<Distortion>::max();

    xGetBlkBits( ePartSize, pcCU->getSlice()->isInterP(), iPartIdx, uiLastMode, uiMbBits);

    pcCU->getPartIndexAndSize( iPartIdx, uiPartAddr, iRoiWidth, iRoiHeight );
	
	
#if AMP_MRG
    Bool bTestNormalMC = true;

    if ( bUseMRG && pcCU->getWidth( 0 ) > 8 && iNumPart == 2 )
    {
      bTestNormalMC = false;
    }

    if (bTestNormalMC)
    {
#endif

    //  Uni-directional prediction
    for ( Int iRefList = 0; iRefList < iNumPredDir; iRefList++ )
    {
      RefPicList  eRefPicList = ( iRefList ? REF_PIC_LIST_1 : REF_PIC_LIST_0 );

      for ( Int iRefIdxTemp = 0; iRefIdxTemp < pcCU->getSlice()->getNumRefIdx(eRefPicList); iRefIdxTemp++ )
      {
        uiBitsTemp = uiMbBits[iRefList];
        if ( pcCU->getSlice()->getNumRefIdx(eRefPicList) > 1 )
        {
          uiBitsTemp += iRefIdxTemp+1;
          if ( iRefIdxTemp == pcCU->getSlice()->getNumRefIdx(eRefPicList)-1 )
          {
            uiBitsTemp--;
          }
        }
        xEstimateMvPredAMVP( pcCU, pcOrgYuv, iPartIdx, eRefPicList, iRefIdxTemp, cMvPred[iRefList][iRefIdxTemp], false, &biPDistTemp);
        aaiMvpIdx[iRefList][iRefIdxTemp] = pcCU->getMVPIdx(eRefPicList, uiPartAddr);
        aaiMvpNum[iRefList][iRefIdxTemp] = pcCU->getMVPNum(eRefPicList, uiPartAddr);

        if(pcCU->getSlice()->getMvdL1ZeroFlag() && iRefList==1 && biPDistTemp < bestBiPDist)
        {
          bestBiPDist = biPDistTemp;
          bestBiPMvpL1 = aaiMvpIdx[iRefList][iRefIdxTemp];
          bestBiPRefIdxL1 = iRefIdxTemp;
        }

        uiBitsTemp += m_auiMVPIdxCost[aaiMvpIdx[iRefList][iRefIdxTemp]][AMVP_MAX_NUM_CANDS];

        if ( m_pcEncCfg->getFastMEForGenBLowDelayEnabled() && iRefList == 1 )    // list 1
        {
          if ( pcCU->getSlice()->getList1IdxToList0Idx( iRefIdxTemp ) >= 0 )
          {
            cMvTemp[1][iRefIdxTemp] = cMvTemp[0][pcCU->getSlice()->getList1IdxToList0Idx( iRefIdxTemp )];
            uiCostTemp = uiCostTempL0[pcCU->getSlice()->getList1IdxToList0Idx( iRefIdxTemp )];
            /*first subtract the bit-rate part of the cost of the other list*/
            uiCostTemp -= m_pcRdCost->getCost( uiBitsTempL0[pcCU->getSlice()->getList1IdxToList0Idx( iRefIdxTemp )] );
            /*correct the bit-rate part of the current ref*/
            m_pcRdCost->setPredictor  ( cMvPred[iRefList][iRefIdxTemp] );
            uiBitsTemp += m_pcRdCost->getBitsOfVectorWithPredictor( cMvTemp[1][iRefIdxTemp].getHor(), cMvTemp[1][iRefIdxTemp].getVer() );
            /*calculate the correct cost*/
            uiCostTemp += m_pcRdCost->getCost( uiBitsTemp );
          }
          else
          {
            xMotionEstimation ( pcCU, pcOrgYuv, iPartIdx, eRefPicList, &cMvPred[iRefList][iRefIdxTemp], iRefIdxTemp, cMvTemp[iRefList][iRefIdxTemp], uiBitsTemp, uiCostTemp );
          }
        }
        else
        {
          xMotionEstimation ( pcCU, pcOrgYuv, iPartIdx, eRefPicList, &cMvPred[iRefList][iRefIdxTemp], iRefIdxTemp, cMvTemp[iRefList][iRefIdxTemp], uiBitsTemp, uiCostTemp );
        }
        xCopyAMVPInfo(pcCU->getCUMvField(eRefPicList)->getAMVPInfo(), &aacAMVPInfo[iRefList][iRefIdxTemp]); // must always be done ( also when AMVP_MODE = AM_NONE )
        xCheckBestMVP(pcCU, eRefPicList, cMvTemp[iRefList][iRefIdxTemp], cMvPred[iRefList][iRefIdxTemp], aaiMvpIdx[iRefList][iRefIdxTemp], uiBitsTemp, uiCostTemp);

        if ( iRefList == 0 )
        {
          uiCostTempL0[iRefIdxTemp] = uiCostTemp;
          uiBitsTempL0[iRefIdxTemp] = uiBitsTemp;
        }
        if ( uiCostTemp < uiCost[iRefList] )
        {
          uiCost[iRefList] = uiCostTemp;
          uiBits[iRefList] = uiBitsTemp; // storing for bi-prediction

          // set motion
          cMv[iRefList]     = cMvTemp[iRefList][iRefIdxTemp];
          iRefIdx[iRefList] = iRefIdxTemp;
        }

        if ( iRefList == 1 && uiCostTemp < costValidList1 && pcCU->getSlice()->getList1IdxToList0Idx( iRefIdxTemp ) < 0 )
        {
          costValidList1 = uiCostTemp;
          bitsValidList1 = uiBitsTemp;

          // set motion
          mvValidList1     = cMvTemp[iRefList][iRefIdxTemp];
          refIdxValidList1 = iRefIdxTemp;
        }
      }
    }

    //  Bi-predictive Motion estimation
    if ( (pcCU->getSlice()->isInterB()) && (pcCU->isBipredRestriction(iPartIdx) == false) )
    {

      cMvBi[0] = cMv[0];            cMvBi[1] = cMv[1];
      iRefIdxBi[0] = iRefIdx[0];    iRefIdxBi[1] = iRefIdx[1];

      ::memcpy(cMvPredBi, cMvPred, sizeof(cMvPred));
      ::memcpy(aaiMvpIdxBi, aaiMvpIdx, sizeof(aaiMvpIdx));

      UInt uiMotBits[2];

      if(pcCU->getSlice()->getMvdL1ZeroFlag())
      {
        xCopyAMVPInfo(&aacAMVPInfo[1][bestBiPRefIdxL1], pcCU->getCUMvField(REF_PIC_LIST_1)->getAMVPInfo());
        pcCU->setMVPIdxSubParts( bestBiPMvpL1, REF_PIC_LIST_1, uiPartAddr, iPartIdx, pcCU->getDepth(uiPartAddr));
        aaiMvpIdxBi[1][bestBiPRefIdxL1] = bestBiPMvpL1;
        cMvPredBi[1][bestBiPRefIdxL1]   = pcCU->getCUMvField(REF_PIC_LIST_1)->getAMVPInfo()->m_acMvCand[bestBiPMvpL1];

        cMvBi[1] = cMvPredBi[1][bestBiPRefIdxL1];
        iRefIdxBi[1] = bestBiPRefIdxL1;
        pcCU->getCUMvField( REF_PIC_LIST_1 )->setAllMv( cMvBi[1], ePartSize, uiPartAddr, 0, iPartIdx );
        pcCU->getCUMvField( REF_PIC_LIST_1 )->setAllRefIdx( iRefIdxBi[1], ePartSize, uiPartAddr, 0, iPartIdx );
        TComYuv* pcYuvPred = &m_acYuvPred[REF_PIC_LIST_1];
        motionCompensation( pcCU, pcYuvPred, REF_PIC_LIST_1, iPartIdx );

        uiMotBits[0] = uiBits[0] - uiMbBits[0];
        uiMotBits[1] = uiMbBits[1];

        if ( pcCU->getSlice()->getNumRefIdx(REF_PIC_LIST_1) > 1 )
        {
          uiMotBits[1] += bestBiPRefIdxL1+1;
          if ( bestBiPRefIdxL1 == pcCU->getSlice()->getNumRefIdx(REF_PIC_LIST_1)-1 )
          {
            uiMotBits[1]--;
          }
        }

        uiMotBits[1] += m_auiMVPIdxCost[aaiMvpIdxBi[1][bestBiPRefIdxL1]][AMVP_MAX_NUM_CANDS];

        uiBits[2] = uiMbBits[2] + uiMotBits[0] + uiMotBits[1];

        cMvTemp[1][bestBiPRefIdxL1] = cMvBi[1];
      }
      else
      {
        uiMotBits[0] = uiBits[0] - uiMbBits[0];
        uiMotBits[1] = uiBits[1] - uiMbBits[1];
        uiBits[2] = uiMbBits[2] + uiMotBits[0] + uiMotBits[1];
      }

      // 4-times iteration (default)
      Int iNumIter = 4;

      // fast encoder setting: only one iteration
      if ( m_pcEncCfg->getFastInterSearchMode()==FASTINTERSEARCH_MODE1 || m_pcEncCfg->getFastInterSearchMode()==FASTINTERSEARCH_MODE2 || pcCU->getSlice()->getMvdL1ZeroFlag() )
      {
        iNumIter = 1;
      }

      for ( Int iIter = 0; iIter < iNumIter; iIter++ )
      {
        Int         iRefList    = iIter % 2;

        if ( m_pcEncCfg->getFastInterSearchMode()==FASTINTERSEARCH_MODE1 || m_pcEncCfg->getFastInterSearchMode()==FASTINTERSEARCH_MODE2 )
        {
          if( uiCost[0] <= uiCost[1] )
          {
            iRefList = 1;
          }
          else
          {
            iRefList = 0;
          }
        }
        else if ( iIter == 0 )
        {
          iRefList = 0;
        }
        if ( iIter == 0 && !pcCU->getSlice()->getMvdL1ZeroFlag())
        {
          pcCU->getCUMvField(RefPicList(1-iRefList))->setAllMv( cMv[1-iRefList], ePartSize, uiPartAddr, 0, iPartIdx );
          pcCU->getCUMvField(RefPicList(1-iRefList))->setAllRefIdx( iRefIdx[1-iRefList], ePartSize, uiPartAddr, 0, iPartIdx );
          TComYuv*  pcYuvPred = &m_acYuvPred[1-iRefList];
          motionCompensation ( pcCU, pcYuvPred, RefPicList(1-iRefList), iPartIdx );
        }

        RefPicList  eRefPicList = ( iRefList ? REF_PIC_LIST_1 : REF_PIC_LIST_0 );

        if(pcCU->getSlice()->getMvdL1ZeroFlag())
        {
          iRefList = 0;
          eRefPicList = REF_PIC_LIST_0;
        }

        Bool bChanged = false;

        iRefStart = 0;
        iRefEnd   = pcCU->getSlice()->getNumRefIdx(eRefPicList)-1;

        for ( Int iRefIdxTemp = iRefStart; iRefIdxTemp <= iRefEnd; iRefIdxTemp++ )
        {
          uiBitsTemp = uiMbBits[2] + uiMotBits[1-iRefList];
          if ( pcCU->getSlice()->getNumRefIdx(eRefPicList) > 1 )
          {
            uiBitsTemp += iRefIdxTemp+1;
            if ( iRefIdxTemp == pcCU->getSlice()->getNumRefIdx(eRefPicList)-1 )
            {
              uiBitsTemp--;
            }
          }
          uiBitsTemp += m_auiMVPIdxCost[aaiMvpIdxBi[iRefList][iRefIdxTemp]][AMVP_MAX_NUM_CANDS];
          // call ME
          xMotionEstimation ( pcCU, pcOrgYuv, iPartIdx, eRefPicList, &cMvPredBi[iRefList][iRefIdxTemp], iRefIdxTemp, cMvTemp[iRefList][iRefIdxTemp], uiBitsTemp, uiCostTemp, true );

          xCopyAMVPInfo(&aacAMVPInfo[iRefList][iRefIdxTemp], pcCU->getCUMvField(eRefPicList)->getAMVPInfo());
          xCheckBestMVP(pcCU, eRefPicList, cMvTemp[iRefList][iRefIdxTemp], cMvPredBi[iRefList][iRefIdxTemp], aaiMvpIdxBi[iRefList][iRefIdxTemp], uiBitsTemp, uiCostTemp);

          if ( uiCostTemp < uiCostBi )
          {
            bChanged = true;

            cMvBi[iRefList]     = cMvTemp[iRefList][iRefIdxTemp];
            iRefIdxBi[iRefList] = iRefIdxTemp;

            uiCostBi            = uiCostTemp;
            uiMotBits[iRefList] = uiBitsTemp - uiMbBits[2] - uiMotBits[1-iRefList];
            uiBits[2]           = uiBitsTemp;

            if(iNumIter!=1)
            {
              //  Set motion
              pcCU->getCUMvField( eRefPicList )->setAllMv( cMvBi[iRefList], ePartSize, uiPartAddr, 0, iPartIdx );
              pcCU->getCUMvField( eRefPicList )->setAllRefIdx( iRefIdxBi[iRefList], ePartSize, uiPartAddr, 0, iPartIdx );

              TComYuv* pcYuvPred = &m_acYuvPred[iRefList];
              motionCompensation( pcCU, pcYuvPred, eRefPicList, iPartIdx );
            }
          }
        } // for loop-iRefIdxTemp

        if ( !bChanged )
        {
          if ( uiCostBi <= uiCost[0] && uiCostBi <= uiCost[1] )
          {
            xCopyAMVPInfo(&aacAMVPInfo[0][iRefIdxBi[0]], pcCU->getCUMvField(REF_PIC_LIST_0)->getAMVPInfo());
            xCheckBestMVP(pcCU, REF_PIC_LIST_0, cMvBi[0], cMvPredBi[0][iRefIdxBi[0]], aaiMvpIdxBi[0][iRefIdxBi[0]], uiBits[2], uiCostBi);
            if(!pcCU->getSlice()->getMvdL1ZeroFlag())
            {
              xCopyAMVPInfo(&aacAMVPInfo[1][iRefIdxBi[1]], pcCU->getCUMvField(REF_PIC_LIST_1)->getAMVPInfo());
              xCheckBestMVP(pcCU, REF_PIC_LIST_1, cMvBi[1], cMvPredBi[1][iRefIdxBi[1]], aaiMvpIdxBi[1][iRefIdxBi[1]], uiBits[2], uiCostBi);
            }
          }
          break;
        }
      } // for loop-iter
    } // if (B_SLICE)

#if AMP_MRG
    } //end if bTestNormalMC
#endif
    //  Clear Motion Field
    pcCU->getCUMvField(REF_PIC_LIST_0)->setAllMvField( TComMvField(), ePartSize, uiPartAddr, 0, iPartIdx );
    pcCU->getCUMvField(REF_PIC_LIST_1)->setAllMvField( TComMvField(), ePartSize, uiPartAddr, 0, iPartIdx );
    pcCU->getCUMvField(REF_PIC_LIST_0)->setAllMvd    ( cMvZero,       ePartSize, uiPartAddr, 0, iPartIdx );
    pcCU->getCUMvField(REF_PIC_LIST_1)->setAllMvd    ( cMvZero,       ePartSize, uiPartAddr, 0, iPartIdx );

    pcCU->setMVPIdxSubParts( -1, REF_PIC_LIST_0, uiPartAddr, iPartIdx, pcCU->getDepth(uiPartAddr));
    pcCU->setMVPNumSubParts( -1, REF_PIC_LIST_0, uiPartAddr, iPartIdx, pcCU->getDepth(uiPartAddr));
    pcCU->setMVPIdxSubParts( -1, REF_PIC_LIST_1, uiPartAddr, iPartIdx, pcCU->getDepth(uiPartAddr));
    pcCU->setMVPNumSubParts( -1, REF_PIC_LIST_1, uiPartAddr, iPartIdx, pcCU->getDepth(uiPartAddr));

    UInt uiMEBits = 0;
    // Set Motion Field_
    cMv[1] = mvValidList1;
	
    iRefIdx[1] = refIdxValidList1;
    uiBits[1] = bitsValidList1;
    uiCost[1] = costValidList1;

#if AMP_MRG
    if (bTestNormalMC)
    {
#endif
    if ( uiCostBi <= uiCost[0] && uiCostBi <= uiCost[1])
    {
      uiLastMode = 2;
      pcCU->getCUMvField(REF_PIC_LIST_0)->setAllMv( cMvBi[0], ePartSize, uiPartAddr, 0, iPartIdx );
      pcCU->getCUMvField(REF_PIC_LIST_0)->setAllRefIdx( iRefIdxBi[0], ePartSize, uiPartAddr, 0, iPartIdx );
      pcCU->getCUMvField(REF_PIC_LIST_1)->setAllMv( cMvBi[1], ePartSize, uiPartAddr, 0, iPartIdx );
      pcCU->getCUMvField(REF_PIC_LIST_1)->setAllRefIdx( iRefIdxBi[1], ePartSize, uiPartAddr, 0, iPartIdx );

      TempMv = cMvBi[0] - cMvPredBi[0][iRefIdxBi[0]];
      pcCU->getCUMvField(REF_PIC_LIST_0)->setAllMvd    ( TempMv,                 ePartSize, uiPartAddr, 0, iPartIdx );

      TempMv = cMvBi[1] - cMvPredBi[1][iRefIdxBi[1]];
      pcCU->getCUMvField(REF_PIC_LIST_1)->setAllMvd    ( TempMv,                 ePartSize, uiPartAddr, 0, iPartIdx );

      pcCU->setInterDirSubParts( 3, uiPartAddr, iPartIdx, pcCU->getDepth(0) );

      pcCU->setMVPIdxSubParts( aaiMvpIdxBi[0][iRefIdxBi[0]], REF_PIC_LIST_0, uiPartAddr, iPartIdx, pcCU->getDepth(uiPartAddr));
      pcCU->setMVPNumSubParts( aaiMvpNum[0][iRefIdxBi[0]], REF_PIC_LIST_0, uiPartAddr, iPartIdx, pcCU->getDepth(uiPartAddr));
      pcCU->setMVPIdxSubParts( aaiMvpIdxBi[1][iRefIdxBi[1]], REF_PIC_LIST_1, uiPartAddr, iPartIdx, pcCU->getDepth(uiPartAddr));
      pcCU->setMVPNumSubParts( aaiMvpNum[1][iRefIdxBi[1]], REF_PIC_LIST_1, uiPartAddr, iPartIdx, pcCU->getDepth(uiPartAddr));

      uiMEBits = uiBits[2];
    }
    else if ( uiCost[0] <= uiCost[1] )
    {
      uiLastMode = 0;
      pcCU->getCUMvField(REF_PIC_LIST_0)->setAllMv( cMv[0], ePartSize, uiPartAddr, 0, iPartIdx );
      pcCU->getCUMvField(REF_PIC_LIST_0)->setAllRefIdx( iRefIdx[0], ePartSize, uiPartAddr, 0, iPartIdx );

      TempMv = cMv[0] - cMvPred[0][iRefIdx[0]];
      pcCU->getCUMvField(REF_PIC_LIST_0)->setAllMvd    ( TempMv,                 ePartSize, uiPartAddr, 0, iPartIdx );

      pcCU->setInterDirSubParts( 1, uiPartAddr, iPartIdx, pcCU->getDepth(0) );

      pcCU->setMVPIdxSubParts( aaiMvpIdx[0][iRefIdx[0]], REF_PIC_LIST_0, uiPartAddr, iPartIdx, pcCU->getDepth(uiPartAddr));
      pcCU->setMVPNumSubParts( aaiMvpNum[0][iRefIdx[0]], REF_PIC_LIST_0, uiPartAddr, iPartIdx, pcCU->getDepth(uiPartAddr));

      uiMEBits = uiBits[0];
    }
    else
    {
      uiLastMode = 1;
      pcCU->getCUMvField(REF_PIC_LIST_1)->setAllMv( cMv[1], ePartSize, uiPartAddr, 0, iPartIdx );
      pcCU->getCUMvField(REF_PIC_LIST_1)->setAllRefIdx( iRefIdx[1], ePartSize, uiPartAddr, 0, iPartIdx );

      TempMv = cMv[1] - cMvPred[1][iRefIdx[1]];
      pcCU->getCUMvField(REF_PIC_LIST_1)->setAllMvd    ( TempMv,                 ePartSize, uiPartAddr, 0, iPartIdx );

      pcCU->setInterDirSubParts( 2, uiPartAddr, iPartIdx, pcCU->getDepth(0) );

      pcCU->setMVPIdxSubParts( aaiMvpIdx[1][iRefIdx[1]], REF_PIC_LIST_1, uiPartAddr, iPartIdx, pcCU->getDepth(uiPartAddr));
      pcCU->setMVPNumSubParts( aaiMvpNum[1][iRefIdx[1]], REF_PIC_LIST_1, uiPartAddr, iPartIdx, pcCU->getDepth(uiPartAddr));

      uiMEBits = uiBits[1];
    }
#if AMP_MRG
    } // end if bTestNormalMC
#endif

    if ( pcCU->getPartitionSize( uiPartAddr ) != SIZE_2Nx2N )
    {
      UInt uiMRGInterDir = 0;
      TComMvField cMRGMvField[2];
      UInt uiMRGIndex = 0;

      UInt uiMEInterDir = 0;
      TComMvField cMEMvField[2];

      m_pcRdCost->selectMotionLambda( true, 0, pcCU->getCUTransquantBypass(uiPartAddr) );

#if AMP_MRG
      // calculate ME cost
      Distortion uiMEError = std::numeric_limits<Distortion>::max();
      Distortion uiMECost  = std::numeric_limits<Distortion>::max();

      if (bTestNormalMC)
      {
        xGetInterPredictionError( pcCU, pcOrgYuv, iPartIdx, uiMEError, m_pcEncCfg->getUseHADME() );
        uiMECost = uiMEError + m_pcRdCost->getCost( uiMEBits );
      }
#else
      // calculate ME cost
      Distortion uiMEError = std::numeric_limits<Distortion>::max();
      xGetInterPredictionError( pcCU, pcOrgYuv, iPartIdx, uiMEError, m_pcEncCfg->getUseHADME() );
      Distortion uiMECost = uiMEError + m_pcRdCost->getCost( uiMEBits );
#endif
      // save ME result.
      uiMEInterDir = pcCU->getInterDir( uiPartAddr );
      TComDataCU::getMvField( pcCU, uiPartAddr, REF_PIC_LIST_0, cMEMvField[0] );
      TComDataCU::getMvField( pcCU, uiPartAddr, REF_PIC_LIST_1, cMEMvField[1] );

      // find Merge result
      Distortion uiMRGCost = std::numeric_limits<Distortion>::max();

      xMergeEstimation( pcCU, pcOrgYuv, iPartIdx, uiMRGInterDir, cMRGMvField, uiMRGIndex, uiMRGCost, cMvFieldNeighbours, uhInterDirNeighbours, numValidMergeCand);

      if ( uiMRGCost < uiMECost )
      {
        // set Merge result
        pcCU->setMergeFlagSubParts ( true,          uiPartAddr, iPartIdx, pcCU->getDepth( uiPartAddr ) );
        pcCU->setMergeIndexSubParts( uiMRGIndex,    uiPartAddr, iPartIdx, pcCU->getDepth( uiPartAddr ) );
        pcCU->setInterDirSubParts  ( uiMRGInterDir, uiPartAddr, iPartIdx, pcCU->getDepth( uiPartAddr ) );
        pcCU->getCUMvField( REF_PIC_LIST_0 )->setAllMvField( cMRGMvField[0], ePartSize, uiPartAddr, 0, iPartIdx );
        pcCU->getCUMvField( REF_PIC_LIST_1 )->setAllMvField( cMRGMvField[1], ePartSize, uiPartAddr, 0, iPartIdx );

        pcCU->getCUMvField(REF_PIC_LIST_0)->setAllMvd    ( cMvZero,            ePartSize, uiPartAddr, 0, iPartIdx );
        pcCU->getCUMvField(REF_PIC_LIST_1)->setAllMvd    ( cMvZero,            ePartSize, uiPartAddr, 0, iPartIdx );

        pcCU->setMVPIdxSubParts( -1, REF_PIC_LIST_0, uiPartAddr, iPartIdx, pcCU->getDepth(uiPartAddr));
        pcCU->setMVPNumSubParts( -1, REF_PIC_LIST_0, uiPartAddr, iPartIdx, pcCU->getDepth(uiPartAddr));
        pcCU->setMVPIdxSubParts( -1, REF_PIC_LIST_1, uiPartAddr, iPartIdx, pcCU->getDepth(uiPartAddr));
        pcCU->setMVPNumSubParts( -1, REF_PIC_LIST_1, uiPartAddr, iPartIdx, pcCU->getDepth(uiPartAddr));
      }
      else
      {
        // set ME result
        pcCU->setMergeFlagSubParts( false,        uiPartAddr, iPartIdx, pcCU->getDepth( uiPartAddr ) );
        pcCU->setInterDirSubParts ( uiMEInterDir, uiPartAddr, iPartIdx, pcCU->getDepth( uiPartAddr ) );
        pcCU->getCUMvField( REF_PIC_LIST_0 )->setAllMvField( cMEMvField[0], ePartSize, uiPartAddr, 0, iPartIdx );
        pcCU->getCUMvField( REF_PIC_LIST_1 )->setAllMvField( cMEMvField[1], ePartSize, uiPartAddr, 0, iPartIdx );
      }
    }

    //  MC
    motionCompensation ( pcCU, pcPredYuv, REF_PIC_LIST_X, iPartIdx );

  } //  end of for ( Int iPartIdx = 0; iPartIdx < iNumPart; iPartIdx++ )

  setWpScalingDistParam( pcCU, -1, REF_PIC_LIST_X );
  
  return;
}


// AMVP
Void TEncSearch::xEstimateMvPredAMVP( TComDataCU* pcCU, TComYuv* pcOrgYuv, UInt uiPartIdx, RefPicList eRefPicList, Int iRefIdx, TComMv& rcMvPred, Bool bFilled, Distortion* puiDistBiP )
{

  AMVPInfo*  pcAMVPInfo = pcCU->getCUMvField(eRefPicList)->getAMVPInfo();

  TComMv     cBestMv;
  Int        iBestIdx   = 0;
  TComMv     cZeroMv;
  TComMv     cMvPred;
  Distortion uiBestCost = std::numeric_limits<Distortion>::max();
  UInt       uiPartAddr = 0;
  Int        iRoiWidth, iRoiHeight;
  Int        i;

  pcCU->getPartIndexAndSize( uiPartIdx, uiPartAddr, iRoiWidth, iRoiHeight );


  // Fill the MV Candidates
  if (!bFilled)
  {
    pcCU->fillMvpCand( uiPartIdx, uiPartAddr, eRefPicList, iRefIdx, pcAMVPInfo );
  }

  // initialize Mvp index & Mvp
  iBestIdx = 0;
  cBestMv  = pcAMVPInfo->m_acMvCand[0];
  if (pcAMVPInfo->iN <= 1)
  {
    rcMvPred = cBestMv;

    pcCU->setMVPIdxSubParts( iBestIdx, eRefPicList, uiPartAddr, uiPartIdx, pcCU->getDepth(uiPartAddr));
    pcCU->setMVPNumSubParts( pcAMVPInfo->iN, eRefPicList, uiPartAddr, uiPartIdx, pcCU->getDepth(uiPartAddr));

    if(pcCU->getSlice()->getMvdL1ZeroFlag() && eRefPicList==REF_PIC_LIST_1)
    {
      (*puiDistBiP) = xGetTemplateCost( pcCU, uiPartAddr, pcOrgYuv, &m_cYuvPredTemp, rcMvPred, 0, AMVP_MAX_NUM_CANDS, eRefPicList, iRefIdx, iRoiWidth, iRoiHeight);
    }
    return;
  }

  if (bFilled)
  {
    assert(pcCU->getMVPIdx(eRefPicList,uiPartAddr) >= 0);
    rcMvPred = pcAMVPInfo->m_acMvCand[pcCU->getMVPIdx(eRefPicList,uiPartAddr)];
    return;
  }

  m_cYuvPredTemp.clear();
  //-- Check Minimum Cost.
  for ( i = 0 ; i < pcAMVPInfo->iN; i++)
  {
    Distortion uiTmpCost;
    uiTmpCost = xGetTemplateCost( pcCU, uiPartAddr, pcOrgYuv, &m_cYuvPredTemp, pcAMVPInfo->m_acMvCand[i], i, AMVP_MAX_NUM_CANDS, eRefPicList, iRefIdx, iRoiWidth, iRoiHeight);
    if ( uiBestCost > uiTmpCost )
    {
      uiBestCost = uiTmpCost;
      cBestMv   = pcAMVPInfo->m_acMvCand[i];
      iBestIdx  = i;
      (*puiDistBiP) = uiTmpCost;
    }
  }

  m_cYuvPredTemp.clear();

  // Setting Best MVP
  rcMvPred = cBestMv;
  pcCU->setMVPIdxSubParts( iBestIdx, eRefPicList, uiPartAddr, uiPartIdx, pcCU->getDepth(uiPartAddr));
  pcCU->setMVPNumSubParts( pcAMVPInfo->iN, eRefPicList, uiPartAddr, uiPartIdx, pcCU->getDepth(uiPartAddr));
  return;
  
}

UInt TEncSearch::xGetMvpIdxBits(Int iIdx, Int iNum)
{
  assert(iIdx >= 0 && iNum >= 0 && iIdx < iNum);

  if (iNum == 1)
  {
    return 0;
  }

  UInt uiLength = 1;
  Int iTemp = iIdx;
  if ( iTemp == 0 )
  {
    return uiLength;
  }

  Bool bCodeLast = ( iNum-1 > iTemp );

  uiLength += (iTemp-1);

  if( bCodeLast )
  {
    uiLength++;
  }

  return uiLength;
}

Void TEncSearch::xGetBlkBits( PartSize eCUMode, Bool bPSlice, Int iPartIdx, UInt uiLastMode, UInt uiBlkBit[3])
{
  if ( eCUMode == SIZE_2Nx2N )
  {
    uiBlkBit[0] = (! bPSlice) ? 3 : 1;
    uiBlkBit[1] = 3;
    uiBlkBit[2] = 5;
  }
  else if ( (eCUMode == SIZE_2NxN || eCUMode == SIZE_2NxnU) || eCUMode == SIZE_2NxnD )
  {
    UInt aauiMbBits[2][3][3] = { { {0,0,3}, {0,0,0}, {0,0,0} } , { {5,7,7}, {7,5,7}, {9-3,9-3,9-3} } };
    if ( bPSlice )
    {
      uiBlkBit[0] = 3;
      uiBlkBit[1] = 0;
      uiBlkBit[2] = 0;
    }
    else
    {
      ::memcpy( uiBlkBit, aauiMbBits[iPartIdx][uiLastMode], 3*sizeof(UInt) );
    }
  }
  else if ( (eCUMode == SIZE_Nx2N || eCUMode == SIZE_nLx2N) || eCUMode == SIZE_nRx2N )
  {
    UInt aauiMbBits[2][3][3] = { { {0,2,3}, {0,0,0}, {0,0,0} } , { {5,7,7}, {7-2,7-2,9-2}, {9-3,9-3,9-3} } };
    if ( bPSlice )
    {
      uiBlkBit[0] = 3;
      uiBlkBit[1] = 0;
      uiBlkBit[2] = 0;
    }
    else
    {
      ::memcpy( uiBlkBit, aauiMbBits[iPartIdx][uiLastMode], 3*sizeof(UInt) );
    }
  }
  else if ( eCUMode == SIZE_NxN )
  {
    uiBlkBit[0] = (! bPSlice) ? 3 : 1;
    uiBlkBit[1] = 3;
    uiBlkBit[2] = 5;
  }
  else
  {
    printf("Wrong!\n");
    assert( 0 );
  }
}

Void TEncSearch::xCopyAMVPInfo (AMVPInfo* pSrc, AMVPInfo* pDst)
{
  pDst->iN = pSrc->iN;
  for (Int i = 0; i < pSrc->iN; i++)
  {
    pDst->m_acMvCand[i] = pSrc->m_acMvCand[i];
  }
}

Void TEncSearch::xCheckBestMVP ( TComDataCU* pcCU, RefPicList eRefPicList, TComMv cMv, TComMv& rcMvPred, Int& riMVPIdx, UInt& ruiBits, Distortion& ruiCost )
{
  AMVPInfo* pcAMVPInfo = pcCU->getCUMvField(eRefPicList)->getAMVPInfo();
  
  assert(pcAMVPInfo->m_acMvCand[riMVPIdx] == rcMvPred);

  if (pcAMVPInfo->iN < 2)
  {
    return;
  }

  m_pcRdCost->selectMotionLambda( true, 0, pcCU->getCUTransquantBypass(0) );
  m_pcRdCost->setCostScale ( 0    );

  Int iBestMVPIdx = riMVPIdx;

  m_pcRdCost->setPredictor( rcMvPred );
  Int iOrgMvBits  = m_pcRdCost->getBitsOfVectorWithPredictor(cMv.getHor(), cMv.getVer());
  iOrgMvBits += m_auiMVPIdxCost[riMVPIdx][AMVP_MAX_NUM_CANDS];
  Int iBestMvBits = iOrgMvBits;

  for (Int iMVPIdx = 0; iMVPIdx < pcAMVPInfo->iN; iMVPIdx++)
  {
    if (iMVPIdx == riMVPIdx)
    {
      continue;
    }

    m_pcRdCost->setPredictor( pcAMVPInfo->m_acMvCand[iMVPIdx] );

    Int iMvBits = m_pcRdCost->getBitsOfVectorWithPredictor(cMv.getHor(), cMv.getVer());
    iMvBits += m_auiMVPIdxCost[iMVPIdx][AMVP_MAX_NUM_CANDS];

    if (iMvBits < iBestMvBits)
    {
      iBestMvBits = iMvBits;
      iBestMVPIdx = iMVPIdx;
    }
  }

  if (iBestMVPIdx != riMVPIdx)  //if changed
  {
    rcMvPred = pcAMVPInfo->m_acMvCand[iBestMVPIdx];

    riMVPIdx = iBestMVPIdx;
    UInt uiOrgBits = ruiBits;
    ruiBits = uiOrgBits - iOrgMvBits + iBestMvBits;
    ruiCost = (ruiCost - m_pcRdCost->getCost( uiOrgBits ))  + m_pcRdCost->getCost( ruiBits );
  }
  
}


Distortion TEncSearch::xGetTemplateCost( TComDataCU* pcCU,
                                         UInt        uiPartAddr,
                                         TComYuv*    pcOrgYuv,
                                         TComYuv*    pcTemplateCand,
                                         TComMv      cMvCand,
                                         Int         iMVPIdx,
                                         Int         iMVPNum,
                                         RefPicList  eRefPicList,
                                         Int         iRefIdx,
                                         Int         iSizeX,
                                         Int         iSizeY
                                         )
{
  Distortion uiCost = std::numeric_limits<Distortion>::max();

  TComPicYuv* pcPicYuvRef = pcCU->getSlice()->getRefPic( eRefPicList, iRefIdx )->getPicYuvRec();

  pcCU->clipMv( cMvCand );

  // prediction pattern
  if ( pcCU->getSlice()->testWeightPred() && pcCU->getSlice()->getSliceType()==P_SLICE )
  {
    xPredInterBlk( COMPONENT_Y, pcCU, pcPicYuvRef, uiPartAddr, &cMvCand, iSizeX, iSizeY, pcTemplateCand, true, pcCU->getSlice()->getSPS()->getBitDepth(CHANNEL_TYPE_LUMA) );
  }
  else
  {
    xPredInterBlk( COMPONENT_Y, pcCU, pcPicYuvRef, uiPartAddr, &cMvCand, iSizeX, iSizeY, pcTemplateCand, false, pcCU->getSlice()->getSPS()->getBitDepth(CHANNEL_TYPE_LUMA) );
  }

  if ( pcCU->getSlice()->testWeightPred() && pcCU->getSlice()->getSliceType()==P_SLICE )
  {
    xWeightedPredictionUni( pcCU, pcTemplateCand, uiPartAddr, iSizeX, iSizeY, eRefPicList, pcTemplateCand, iRefIdx );
  }

  // calc distortion

  uiCost = m_pcRdCost->getDistPart( pcCU->getSlice()->getSPS()->getBitDepth(CHANNEL_TYPE_LUMA), pcTemplateCand->getAddr(COMPONENT_Y, uiPartAddr), pcTemplateCand->getStride(COMPONENT_Y), pcOrgYuv->getAddr(COMPONENT_Y, uiPartAddr), pcOrgYuv->getStride(COMPONENT_Y), iSizeX, iSizeY, COMPONENT_Y, DF_SAD );
  uiCost = (UInt) m_pcRdCost->calcRdCost( m_auiMVPIdxCost[iMVPIdx][iMVPNum], uiCost, DF_SAD );
  return uiCost;
}


Void TEncSearch::xMotionEstimation( TComDataCU* pcCU, TComYuv* pcYuvOrg, Int iPartIdx, RefPicList eRefPicList, TComMv* pcMvPred, Int iRefIdxPred, TComMv& rcMv, UInt& ruiBits, Distortion& ruiCost, Bool bBi  )
{
  UInt          uiPartAddr;
  Int           iRoiWidth;
  Int           iRoiHeight;

  TComMv        cMvHalf, cMvQter;
  TComMv        cMvSrchRngLT;
  TComMv        cMvSrchRngRB;
  TComYuv*      pcYuv = pcYuvOrg;

  assert(eRefPicList < MAX_NUM_REF_LIST_ADAPT_SR && iRefIdxPred<Int(MAX_IDX_ADAPT_SR));
  m_iSearchRange = m_aaiAdaptSR[eRefPicList][iRefIdxPred];

  Int           iSrchRng      = ( bBi ? m_bipredSearchRange : m_iSearchRange );
  TComPattern   tmpPattern;
  TComPattern*  pcPatternKey  = &tmpPattern;

  Double        fWeight       = 1.0;

  pcCU->getPartIndexAndSize( iPartIdx, uiPartAddr, iRoiWidth, iRoiHeight );

  if ( bBi ) // Bipredictive ME
  {
    TComYuv*  pcYuvOther = &m_acYuvPred[1-(Int)eRefPicList];
    pcYuv                = &m_cYuvPredTemp;

    pcYuvOrg->copyPartToPartYuv( pcYuv, uiPartAddr, iRoiWidth, iRoiHeight );

    pcYuv->removeHighFreq( pcYuvOther, uiPartAddr, iRoiWidth, iRoiHeight, pcCU->getSlice()->getSPS()->getBitDepths().recon, m_pcEncCfg->getClipForBiPredMeEnabled() );

    fWeight = 0.5;
  }
  m_cDistParam.bIsBiPred = bBi;

  //  Search key pattern initialization
  pcPatternKey->initPattern( pcYuv->getAddr  ( COMPONENT_Y, uiPartAddr ),
                             iRoiWidth,
                             iRoiHeight,
                             pcYuv->getStride(COMPONENT_Y),
                             pcCU->getSlice()->getSPS()->getBitDepth(CHANNEL_TYPE_LUMA) );

  Pel*        piRefY      = pcCU->getSlice()->getRefPic( eRefPicList, iRefIdxPred )->getPicYuvRec()->getAddr( COMPONENT_Y, pcCU->getCtuRsAddr(), pcCU->getZorderIdxInCtu() + uiPartAddr );
  Int         iRefStride  = pcCU->getSlice()->getRefPic( eRefPicList, iRefIdxPred )->getPicYuvRec()->getStride(COMPONENT_Y);

  TComMv      cMvPred = *pcMvPred;

  if ( bBi )
  {
	  
    xSetSearchRange   ( pcCU, rcMv   , iSrchRng, cMvSrchRngLT, cMvSrchRngRB );
  }
  else
  {
	  
    xSetSearchRange   ( pcCU, cMvPred, iSrchRng, cMvSrchRngLT, cMvSrchRngRB );
  }

  m_pcRdCost->selectMotionLambda(true, 0, pcCU->getCUTransquantBypass(uiPartAddr) );

  m_pcRdCost->setPredictor  ( *pcMvPred );
  m_pcRdCost->setCostScale  ( 2 );

  setWpScalingDistParam( pcCU, iRefIdxPred, eRefPicList );
  //  Do integer search
  if ( (m_motionEstimationSearchMethod==MESEARCH_FULL) || bBi )
  {
    xPatternSearch      ( pcPatternKey, piRefY, iRefStride, &cMvSrchRngLT, &cMvSrchRngRB, rcMv, ruiCost );
  }
  else
  {
    rcMv = *pcMvPred;
    const TComMv *pIntegerMv2Nx2NPred=0;
    if (pcCU->getPartitionSize(0) != SIZE_2Nx2N || pcCU->getDepth(0) != 0)
    {
      pIntegerMv2Nx2NPred = &(m_integerMv2Nx2N[eRefPicList][iRefIdxPred]);
    }
    
    // EMI: Save Block width and height in global variables, to use in our NN
    PUHeight = iRoiHeight;
    PUWidth = iRoiWidth;


    xPatternSearchFast  ( pcCU, pcPatternKey, piRefY, iRefStride, &cMvSrchRngLT, &cMvSrchRngRB, rcMv, ruiCost, pIntegerMv2Nx2NPred );
    if (pcCU->getPartitionSize(0) == SIZE_2Nx2N)
    {
      m_integerMv2Nx2N[eRefPicList][iRefIdxPred] = rcMv;
    }
  }

  m_pcRdCost->selectMotionLambda( true, 0, pcCU->getCUTransquantBypass(uiPartAddr) );

  m_pcRdCost->setCostScale ( 1 );
    
  const Bool bIsLosslessCoded = pcCU->getCUTransquantBypass(uiPartAddr) != 0;
  xPatternSearchFracDIF( bIsLosslessCoded, pcPatternKey, piRefY, iRefStride, &rcMv, cMvHalf, cMvQter, ruiCost );

  m_pcRdCost->setCostScale( 0 );

  // EMI: Big chunk of modifications!
  
  //Run our ANN model
  NN_pred();
  
  /* 
  Fractional Motion Estimation values computed by standard are stored in TComMv variables cMvHalf & cMvQter
  We create other TComMv variables, and replace the standard values with our NN predicted values
  Our NN modifies global variables MVX_HALF & MVX_QRTER, which in return are set used to set our new Mv
  */
  TComMv MV_HALF, MV_QRTER;
  MV_HALF.setHor(MVX_HALF);
  MV_HALF.setVer(MVY_HALF);
  MV_QRTER.setHor(MVX_QRTER);
  MV_QRTER.setVer(MVY_QRTER);

  // For finding Integer Motion Estimation, Set Horizontal and Vertical values to zero:

  // MV_HALF.setHor(0);
  // MV_HALF.setVer(0);
  // MV_QRTER.setHor(0);
  // MV_QRTER.setVer(0);

  /* 
  EMI: Dataset Extraction!
  To Write the errors and output MV in a CSV file:
  Real values for errors: U,V,H           - NN values for errors: IN[]
  Real values for MV: cMvHalf, cMvQter    - NN values for MV: MV_HALF, MV_QRTER
  Block Width and Height: iRoiWidth, iRoiHeight
  
  To write the values of the output class directly instead of coordinates:
  Half * 0.5 + Quarter * 0.25:  results in range from -0.75->0.75
  Add both X & Y + 0.75:        range is now 0->1.5
  Multiply X by 4:              X values are now [0, 1, 2, 3, 4, 5, 6]
  Multiply Y by 4*7=28:         Y values are now [0, 7, 14, 21, 28, 35, 42]
  Adding X+Y results in the desired output class, given that the mapping starts from 
  0 for top left corner, 24 center, and 48 for bottom right corner
  */

  // int MV_X = (((cMvHalf.getHor() * 0.5) + (cMvQter.getHor() * 0.25)) + 0.75) * 4;
  // int MV_Y = (((cMvHalf.getVer() * 0.5) + (cMvQter.getVer() * 0.25)) + 0.75) * 28;
  // int OUT_CLASS = MV_Y + MV_X;
  // ofstream errors;
  // errors.open("/home/vague/git-repos/HM16.9/DL/SSE.csv", ios::app);
  // errors << array_e[0] << ',' << array_e[1] << ',' << array_e[2] << ',' << array_e[3] << ',' << C << ',' << array_e[4] << ',' << array_e[5] << ',' << array_e[6] << ',' << array_e[7] << ',' << iRoiHeight << ',' << iRoiWidth << ',' << OUT_CLASS <<endl;

  // Replace Motion Vector with values computed by our NN

  rcMv <<= 2;
  // rcMv += (cMvHalf <<= 1); // Standard FME MV, Half
  // rcMv += cMvQter;         // Standard FME MV, Half
  rcMv += (MV_HALF <<= 1);
  rcMv += MV_QRTER;
  
  // End of modification

  UInt uiMvBits = m_pcRdCost->getBitsOfVectorWithPredictor( rcMv.getHor(), rcMv.getVer() );

  ruiBits      += uiMvBits;
  ruiCost       = (Distortion)( floor( fWeight * ( (Double)ruiCost - (Double)m_pcRdCost->getCost( uiMvBits ) ) ) + (Double)m_pcRdCost->getCost( ruiBits ) );
  
}


Void TEncSearch::xSetSearchRange ( const TComDataCU* const pcCU, const TComMv& cMvPred, const Int iSrchRng,
                                   TComMv& rcMvSrchRngLT, TComMv& rcMvSrchRngRB )
{
  Int  iMvShift = 2;
  TComMv cTmpMvPred = cMvPred;
  pcCU->clipMv( cTmpMvPred );

  rcMvSrchRngLT.setHor( cTmpMvPred.getHor() - (iSrchRng << iMvShift) );
  rcMvSrchRngLT.setVer( cTmpMvPred.getVer() - (iSrchRng << iMvShift) );

  rcMvSrchRngRB.setHor( cTmpMvPred.getHor() + (iSrchRng << iMvShift) );
  rcMvSrchRngRB.setVer( cTmpMvPred.getVer() + (iSrchRng << iMvShift) );
  pcCU->clipMv        ( rcMvSrchRngLT );
  pcCU->clipMv        ( rcMvSrchRngRB );

#if ME_ENABLE_ROUNDING_OF_MVS
  rcMvSrchRngLT.divideByPowerOf2(iMvShift);
  rcMvSrchRngRB.divideByPowerOf2(iMvShift);
#else
  rcMvSrchRngLT >>= iMvShift;
  rcMvSrchRngRB >>= iMvShift;
#endif
}


Void TEncSearch::xPatternSearch(const TComPattern* const pcPatternKey,
	const Pel*               piRefY,
	const Int                iRefStride,
	const TComMv* const      pcMvSrchRngLT,
	const TComMv* const      pcMvSrchRngRB,
	TComMv&      rcMv,
	Distortion&  ruiSAD)
{
	Int   iSrchRngHorLeft = pcMvSrchRngLT->getHor();
	Int   iSrchRngHorRight = pcMvSrchRngRB->getHor();
	Int   iSrchRngVerTop = pcMvSrchRngLT->getVer();
	Int   iSrchRngVerBottom = pcMvSrchRngRB->getVer();

	Distortion  uiSad;
	Distortion  uiSadBest = std::numeric_limits<Distortion>::max();
	Int         iBestX = 0;
	Int         iBestY = 0;


	m_pcRdCost->setDistParam(pcPatternKey, piRefY, iRefStride, m_cDistParam);

	// fast encoder decision: use subsampled SAD for integer ME
	if (m_pcEncCfg->getFastInterSearchMode() == FASTINTERSEARCH_MODE1 || m_pcEncCfg->getFastInterSearchMode() == FASTINTERSEARCH_MODE3)
	{
		if (m_cDistParam.iRows > 8)
		{
			m_cDistParam.iSubShift = 1;
		}
	}

	piRefY += (iSrchRngVerTop * iRefStride);

	for (Int y = iSrchRngVerTop; y <= iSrchRngVerBottom; y++)
	{
		for (Int x = iSrchRngHorLeft; x <= iSrchRngHorRight; x++)
		{
			//  find min. distortion position
			m_cDistParam.pCur = piRefY + x;

			setDistParamComp(COMPONENT_Y);

			m_cDistParam.bitDepth = pcPatternKey->getBitDepthY();
			uiSad = m_cDistParam.DistFunc(&m_cDistParam);

			// motion cost
			uiSad += m_pcRdCost->getCostOfVectorWithPredictor(x, y);

			if (uiSad < uiSadBest)
			{
				uiSadBest = uiSad;
				iBestX = x;
				iBestY = y;
				m_cDistParam.m_maximumDistortionForEarlyExit = uiSad;
			}
		}
		piRefY += iRefStride;
	}




		rcMv.set(iBestX, iBestY);


		ruiSAD = uiSadBest - m_pcRdCost->getCostOfVectorWithPredictor(iBestX, iBestY);

		//getchar();
		return;
	}


Void TEncSearch::xPatternSearchFast( const TComDataCU* const  pcCU,
                                     const TComPattern* const pcPatternKey,
                                     const Pel* const         piRefY,
                                     const Int                iRefStride,
                                     const TComMv* const      pcMvSrchRngLT,
                                     const TComMv* const      pcMvSrchRngRB,
                                     TComMv&                  rcMv,
                                     Distortion&              ruiSAD,
                                     const TComMv* const      pIntegerMv2Nx2NPred )
{
  assert (MD_LEFT < NUM_MV_PREDICTORS);
  pcCU->getMvPredLeft       ( m_acMvPredictors[MD_LEFT] );
  assert (MD_ABOVE < NUM_MV_PREDICTORS);
  pcCU->getMvPredAbove      ( m_acMvPredictors[MD_ABOVE] );
  assert (MD_ABOVE_RIGHT < NUM_MV_PREDICTORS);
  pcCU->getMvPredAboveRight ( m_acMvPredictors[MD_ABOVE_RIGHT] );

  switch ( m_motionEstimationSearchMethod )
  {
    case MESEARCH_DIAMOND:
      xTZSearch( pcCU, pcPatternKey, piRefY, iRefStride, pcMvSrchRngLT, pcMvSrchRngRB, rcMv, ruiSAD, pIntegerMv2Nx2NPred, false );
	     
      break;

    case MESEARCH_SELECTIVE:
      xTZSearchSelective( pcCU, pcPatternKey, piRefY, iRefStride, pcMvSrchRngLT, pcMvSrchRngRB, rcMv, ruiSAD, pIntegerMv2Nx2NPred );
      break;

    case MESEARCH_DIAMOND_ENHANCED:
      xTZSearch( pcCU, pcPatternKey, piRefY, iRefStride, pcMvSrchRngLT, pcMvSrchRngRB, rcMv, ruiSAD, pIntegerMv2Nx2NPred, true );
      break;

    case MESEARCH_FULL: // shouldn't get here.
    default:
      break;
  }
}


Void TEncSearch::xTZSearch( const TComDataCU* const pcCU,
                            const TComPattern* const pcPatternKey,
                            const Pel* const         piRefY,
                            const Int                iRefStride,
                            const TComMv* const      pcMvSrchRngLT,
                            const TComMv* const      pcMvSrchRngRB,
                            TComMv&                  rcMv,
                            Distortion&              ruiSAD,
                            const TComMv* const      pIntegerMv2Nx2NPred,
                            const Bool               bExtendedSettings)
{
  const Bool bUseAdaptiveRaster                      = bExtendedSettings;
  const Int  iRaster                                 = 5;
  const Bool bTestOtherPredictedMV                   = bExtendedSettings;
  const Bool bTestZeroVector                         = true;
  const Bool bTestZeroVectorStart                    = bExtendedSettings;
  const Bool bTestZeroVectorStop                     = false;
  const Bool bFirstSearchDiamond                     = true;  // 1 = xTZ8PointDiamondSearch   0 = xTZ8PointSquareSearch
  const Bool bFirstCornersForDiamondDist1            = bExtendedSettings;
  const Bool bFirstSearchStop                        = m_pcEncCfg->getFastMEAssumingSmootherMVEnabled();
  const UInt uiFirstSearchRounds                     = 3;     // first search stop X rounds after best match (must be >=1)
  const Bool bEnableRasterSearch                     = true;
  const Bool bAlwaysRasterSearch                     = bExtendedSettings;  // true: BETTER but factor 2 slower
  const Bool bRasterRefinementEnable                 = false; // enable either raster refinement or star refinement
  const Bool bRasterRefinementDiamond                = false; // 1 = xTZ8PointDiamondSearch   0 = xTZ8PointSquareSearch
  const Bool bRasterRefinementCornersForDiamondDist1 = bExtendedSettings;
  const Bool bStarRefinementEnable                   = true;  // enable either star refinement or raster refinement
  const Bool bStarRefinementDiamond                  = true;  // 1 = xTZ8PointDiamondSearch   0 = xTZ8PointSquareSearch
  const Bool bStarRefinementCornersForDiamondDist1   = bExtendedSettings;
  const Bool bStarRefinementStop                     = false;
  const UInt uiStarRefinementRounds                  = 2;  // star refinement stop X rounds after best match (must be >=1)
  const Bool bNewZeroNeighbourhoodTest               = bExtendedSettings;

  UInt uiSearchRange = m_iSearchRange;
  pcCU->clipMv( rcMv );
#if ME_ENABLE_ROUNDING_OF_MVS
  rcMv.divideByPowerOf2(2);
#else
  rcMv >>= 2;
#endif
  // init TZSearchStruct
  IntTZSearchStruct cStruct;
  cStruct.iYStride    = iRefStride;
  cStruct.piRefY      = piRefY;
  cStruct.uiBestSad   = MAX_UINT;

  // set rcMv (Median predictor) as start point and as best point
  xTZSearchHelp( pcPatternKey, cStruct, rcMv.getHor(), rcMv.getVer(), 0, 0 );

  // test whether one of PRED_A, PRED_B, PRED_C MV is better start point than Median predictor
  if ( bTestOtherPredictedMV )
  {
    for ( UInt index = 0; index < NUM_MV_PREDICTORS; index++ )
    {
      TComMv cMv = m_acMvPredictors[index];
      pcCU->clipMv( cMv );
#if ME_ENABLE_ROUNDING_OF_MVS
      cMv.divideByPowerOf2(2);
#else
      cMv >>= 2;
#endif
      if (cMv != rcMv && (cMv.getHor() != cStruct.iBestX && cMv.getVer() != cStruct.iBestY))
      {
        // only test cMV if not obviously previously tested.
        xTZSearchHelp( pcPatternKey, cStruct, cMv.getHor(), cMv.getVer(), 0, 0 );
      }
    }
  }

  // test whether zero Mv is better start point than Median predictor
  if ( bTestZeroVector )
  {
    if ((rcMv.getHor() != 0 || rcMv.getVer() != 0) &&
        (0 != cStruct.iBestX || 0 != cStruct.iBestY))
    {
      // only test 0-vector if not obviously previously tested.
      xTZSearchHelp( pcPatternKey, cStruct, 0, 0, 0, 0 );
    }
  }

  Int   iSrchRngHorLeft   = pcMvSrchRngLT->getHor();
  Int   iSrchRngHorRight  = pcMvSrchRngRB->getHor();
  Int   iSrchRngVerTop    = pcMvSrchRngLT->getVer();
  Int   iSrchRngVerBottom = pcMvSrchRngRB->getVer();

  if (pIntegerMv2Nx2NPred != 0)
  {
    TComMv integerMv2Nx2NPred = *pIntegerMv2Nx2NPred;
    integerMv2Nx2NPred <<= 2;
    pcCU->clipMv( integerMv2Nx2NPred );
#if ME_ENABLE_ROUNDING_OF_MVS
    integerMv2Nx2NPred.divideByPowerOf2(2);
#else
    integerMv2Nx2NPred >>= 2;
#endif
    if ((rcMv != integerMv2Nx2NPred) &&
        (integerMv2Nx2NPred.getHor() != cStruct.iBestX || integerMv2Nx2NPred.getVer() != cStruct.iBestY))
    {
      // only test integerMv2Nx2NPred if not obviously previously tested.
      xTZSearchHelp(pcPatternKey, cStruct, integerMv2Nx2NPred.getHor(), integerMv2Nx2NPred.getVer(), 0, 0);
    }

    // reset search range
    TComMv cMvSrchRngLT;
    TComMv cMvSrchRngRB;
    Int iSrchRng = m_iSearchRange;
    TComMv currBestMv(cStruct.iBestX, cStruct.iBestY );
    currBestMv <<= 2;
    xSetSearchRange( pcCU, currBestMv, iSrchRng, cMvSrchRngLT, cMvSrchRngRB );
    iSrchRngHorLeft   = cMvSrchRngLT.getHor();
    iSrchRngHorRight  = cMvSrchRngRB.getHor();
    iSrchRngVerTop    = cMvSrchRngLT.getVer();
    iSrchRngVerBottom = cMvSrchRngRB.getVer();
  }

  // start search
  Int  iDist = 0;
  Int  iStartX = cStruct.iBestX;
  Int  iStartY = cStruct.iBestY;

  const Bool bBestCandidateZero = (cStruct.iBestX == 0) && (cStruct.iBestY == 0);

  // first search around best position up to now.
  // The following works as a "subsampled/log" window search around the best candidate
  for (iDist = 1; iDist <= (Int)uiSearchRange; iDist *= 2)
	  
  {
    if ( bFirstSearchDiamond == 1 )
    {
      xTZ8PointDiamondSearch ( pcPatternKey, cStruct, pcMvSrchRngLT, pcMvSrchRngRB, iStartX, iStartY, iDist, bFirstCornersForDiamondDist1 );
    }
    else
    {
      xTZ8PointSquareSearch  ( pcPatternKey, cStruct, pcMvSrchRngLT, pcMvSrchRngRB, iStartX, iStartY, iDist );
    }

    if ( bFirstSearchStop && ( cStruct.uiBestRound >= uiFirstSearchRounds ) ) // stop criterion
    {
      break;
    }
  }

  if (!bNewZeroNeighbourhoodTest)
  {
    // test whether zero Mv is a better start point than Median predictor
    if ( bTestZeroVectorStart && ((cStruct.iBestX != 0) || (cStruct.iBestY != 0)) )
    {
      xTZSearchHelp( pcPatternKey, cStruct, 0, 0, 0, 0 );
      if ( (cStruct.iBestX == 0) && (cStruct.iBestY == 0) )
      {
        // test its neighborhood
        for ( iDist = 1; iDist <= (Int)uiSearchRange; iDist*=2 )
        {
          xTZ8PointDiamondSearch( pcPatternKey, cStruct, pcMvSrchRngLT, pcMvSrchRngRB, 0, 0, iDist, false );
          if ( bTestZeroVectorStop && (cStruct.uiBestRound > 0) ) // stop criterion
          {
            break;
          }
        }
      }
    }
  }
  else
  {
    // Test also zero neighbourhood but with half the range
    // It was reported that the original (above) search scheme using bTestZeroVectorStart did not
    // make sense since one would have already checked the zero candidate earlier
    // and thus the conditions for that test would have not been satisfied
    if (bTestZeroVectorStart == true && bBestCandidateZero != true)
    {
      for ( iDist = 1; iDist <= ((Int)uiSearchRange >> 1); iDist*=2 )
      {
        xTZ8PointDiamondSearch( pcPatternKey, cStruct, pcMvSrchRngLT, pcMvSrchRngRB, 0, 0, iDist, false );
        if ( bTestZeroVectorStop && (cStruct.uiBestRound > 2) ) // stop criterion
        {
          break;
        }
      }
    }
  }

  // calculate only 2 missing points instead 8 points if cStruct.uiBestDistance == 1
  if ( cStruct.uiBestDistance == 1 )
  {
    cStruct.uiBestDistance = 0;
    xTZ2PointSearch( pcPatternKey, cStruct, pcMvSrchRngLT, pcMvSrchRngRB );
  }

  // raster search if distance is too big
  if (bUseAdaptiveRaster)
  {
    int iWindowSize = iRaster;
    Int   iSrchRngRasterLeft   = iSrchRngHorLeft;
    Int   iSrchRngRasterRight  = iSrchRngHorRight;
    Int   iSrchRngRasterTop    = iSrchRngVerTop;
    Int   iSrchRngRasterBottom = iSrchRngVerBottom;

    if (!(bEnableRasterSearch && ( ((Int)(cStruct.uiBestDistance) > iRaster))))
    {
      iWindowSize ++;
      iSrchRngRasterLeft /= 2;
      iSrchRngRasterRight /= 2;
      iSrchRngRasterTop /= 2;
      iSrchRngRasterBottom /= 2;
    }
    cStruct.uiBestDistance = iWindowSize;
    for ( iStartY = iSrchRngRasterTop; iStartY <= iSrchRngRasterBottom; iStartY += iWindowSize )
    {
      for ( iStartX = iSrchRngRasterLeft; iStartX <= iSrchRngRasterRight; iStartX += iWindowSize )
      {
        xTZSearchHelp( pcPatternKey, cStruct, iStartX, iStartY, 0, iWindowSize );
      }
    }
  }
  else
  {
    if ( bEnableRasterSearch && ( ((Int)(cStruct.uiBestDistance) > iRaster) || bAlwaysRasterSearch ) )
    {
      cStruct.uiBestDistance = iRaster;
      for ( iStartY = iSrchRngVerTop; iStartY <= iSrchRngVerBottom; iStartY += iRaster )
      {
        for ( iStartX = iSrchRngHorLeft; iStartX <= iSrchRngHorRight; iStartX += iRaster )
        {
          xTZSearchHelp( pcPatternKey, cStruct, iStartX, iStartY, 0, iRaster );
        }
      }
    }
  }

  // raster refinement

  if ( bRasterRefinementEnable && cStruct.uiBestDistance > 0 )
  {
    while ( cStruct.uiBestDistance > 0 )
    {
      iStartX = cStruct.iBestX;
      iStartY = cStruct.iBestY;
      if ( cStruct.uiBestDistance > 1 )
      {
        iDist = cStruct.uiBestDistance >>= 1;
        if ( bRasterRefinementDiamond == 1 )
        {
          xTZ8PointDiamondSearch ( pcPatternKey, cStruct, pcMvSrchRngLT, pcMvSrchRngRB, iStartX, iStartY, iDist, bRasterRefinementCornersForDiamondDist1 );
        }
        else
        {
          xTZ8PointSquareSearch  ( pcPatternKey, cStruct, pcMvSrchRngLT, pcMvSrchRngRB, iStartX, iStartY, iDist );
        }
      }

      // calculate only 2 missing points instead 8 points if cStruct.uiBestDistance == 1
      if ( cStruct.uiBestDistance == 1 )
      {
        cStruct.uiBestDistance = 0;
        if ( cStruct.ucPointNr != 0 )
        {
          xTZ2PointSearch( pcPatternKey, cStruct, pcMvSrchRngLT, pcMvSrchRngRB );
        }
      }
    }
  }

  // star refinement
  if ( bStarRefinementEnable && cStruct.uiBestDistance > 0 )
  {
    while ( cStruct.uiBestDistance > 0 )
    {
      iStartX = cStruct.iBestX;
      iStartY = cStruct.iBestY;
      cStruct.uiBestDistance = 0;
      cStruct.ucPointNr = 0;
      for ( iDist = 1; iDist < (Int)uiSearchRange + 1; iDist*=2 )
      {
        if ( bStarRefinementDiamond == 1 )
        {
          xTZ8PointDiamondSearch ( pcPatternKey, cStruct, pcMvSrchRngLT, pcMvSrchRngRB, iStartX, iStartY, iDist, bStarRefinementCornersForDiamondDist1 );
        }
        else
        {
          xTZ8PointSquareSearch  ( pcPatternKey, cStruct, pcMvSrchRngLT, pcMvSrchRngRB, iStartX, iStartY, iDist );
        }
        if ( bStarRefinementStop && (cStruct.uiBestRound >= uiStarRefinementRounds) ) // stop criterion
        {
          break;
        }
      }

      // calculate only 2 missing points instead 8 points if cStrukt.uiBestDistance == 1
      if ( cStruct.uiBestDistance == 1 )
      {
        cStruct.uiBestDistance = 0;
        if ( cStruct.ucPointNr != 0 )
        {
          xTZ2PointSearch( pcPatternKey, cStruct, pcMvSrchRngLT, pcMvSrchRngRB );
        }
      }
    }
  }


  // EMI: Storing the 8 integer SSE points

  iDist = 1;
  iStartX = cStruct.iBestX;
  iStartY = cStruct.iBestY;
  // Notice that we set the save flag to true
  xTZ8PointSquareSearch(pcPatternKey, cStruct, pcMvSrchRngLT, pcMvSrchRngRB, iStartX, iStartY, iDist, true);
  
  // END OF MODIFICATION

  // write out best match
  rcMv.set( cStruct.iBestX, cStruct.iBestY );
  ruiSAD = cStruct.uiBestSad - m_pcRdCost->getCostOfVectorWithPredictor( cStruct.iBestX, cStruct.iBestY );
  C = ruiSAD;  // EMI: Storing the value of the best integer location "center"
}


Void TEncSearch::xTZSearchSelective( const TComDataCU* const   pcCU,
                                     const TComPattern* const  pcPatternKey,
                                     const Pel* const          piRefY,
                                     const Int                 iRefStride,
                                     const TComMv* const       pcMvSrchRngLT,
                                     const TComMv* const       pcMvSrchRngRB,
                                     TComMv                   &rcMv,
                                     Distortion               &ruiSAD,
                                     const TComMv* const       pIntegerMv2Nx2NPred )
{
  const Bool bTestOtherPredictedMV    = true;
  const Bool bTestZeroVector          = true;
  const Bool bEnableRasterSearch      = true;
  const Bool bAlwaysRasterSearch      = false;  // 1: BETTER but factor 15x slower
  const Bool bStarRefinementEnable    = true;   // enable either star refinement or raster refinement
  const Bool bStarRefinementDiamond   = true;   // 1 = xTZ8PointDiamondSearch   0 = xTZ8PointSquareSearch
  const Bool bStarRefinementStop      = false;
  const UInt uiStarRefinementRounds   = 2;  // star refinement stop X rounds after best match (must be >=1)
  const UInt uiSearchRange            = m_iSearchRange;
  const Int  uiSearchRangeInitial     = m_iSearchRange >> 2;
  const Int  uiSearchStep             = 4;
  const Int  iMVDistThresh            = 8;

  Int   iSrchRngHorLeft         = pcMvSrchRngLT->getHor();
  Int   iSrchRngHorRight        = pcMvSrchRngRB->getHor();
  Int   iSrchRngVerTop          = pcMvSrchRngLT->getVer();
  Int   iSrchRngVerBottom       = pcMvSrchRngRB->getVer();
  Int   iFirstSrchRngHorLeft    = 0;
  Int   iFirstSrchRngHorRight   = 0;
  Int   iFirstSrchRngVerTop     = 0;
  Int   iFirstSrchRngVerBottom  = 0;
  Int   iStartX                 = 0;
  Int   iStartY                 = 0;
  Int   iBestX                  = 0;
  Int   iBestY                  = 0;
  Int   iDist                   = 0;

  pcCU->clipMv( rcMv );
#if ME_ENABLE_ROUNDING_OF_MVS
  rcMv.divideByPowerOf2(2);
#else
  rcMv >>= 2;
#endif
  // init TZSearchStruct
  IntTZSearchStruct cStruct;
  cStruct.iYStride    = iRefStride;
  cStruct.piRefY      = piRefY;
  cStruct.uiBestSad   = MAX_UINT;
  cStruct.iBestX = 0;
  cStruct.iBestY = 0;


  // set rcMv (Median predictor) as start point and as best point
  xTZSearchHelp( pcPatternKey, cStruct, rcMv.getHor(), rcMv.getVer(), 0, 0 );

  // test whether one of PRED_A, PRED_B, PRED_C MV is better start point than Median predictor
  if ( bTestOtherPredictedMV )
  {
    for ( UInt index = 0; index < NUM_MV_PREDICTORS; index++ )
    {
      TComMv cMv = m_acMvPredictors[index];
      pcCU->clipMv( cMv );
#if ME_ENABLE_ROUNDING_OF_MVS
      cMv.divideByPowerOf2(2);
#else
      cMv >>= 2;
#endif
      xTZSearchHelp( pcPatternKey, cStruct, cMv.getHor(), cMv.getVer(), 0, 0 );
    }
  }

  // test whether zero Mv is better start point than Median predictor
  if ( bTestZeroVector )
  {
    xTZSearchHelp( pcPatternKey, cStruct, 0, 0, 0, 0 );
  }

  if ( pIntegerMv2Nx2NPred != 0 )
  {
    TComMv integerMv2Nx2NPred = *pIntegerMv2Nx2NPred;
    integerMv2Nx2NPred <<= 2;
    pcCU->clipMv( integerMv2Nx2NPred );
#if ME_ENABLE_ROUNDING_OF_MVS
    integerMv2Nx2NPred.divideByPowerOf2(2);
#else
    integerMv2Nx2NPred >>= 2;
#endif
    xTZSearchHelp(pcPatternKey, cStruct, integerMv2Nx2NPred.getHor(), integerMv2Nx2NPred.getVer(), 0, 0);

    // reset search range
    TComMv cMvSrchRngLT;
    TComMv cMvSrchRngRB;
    Int iSrchRng = m_iSearchRange;
    TComMv currBestMv(cStruct.iBestX, cStruct.iBestY );
    currBestMv <<= 2;
    xSetSearchRange( pcCU, currBestMv, iSrchRng, cMvSrchRngLT, cMvSrchRngRB );
    iSrchRngHorLeft   = cMvSrchRngLT.getHor();
    iSrchRngHorRight  = cMvSrchRngRB.getHor();
    iSrchRngVerTop    = cMvSrchRngLT.getVer();
    iSrchRngVerBottom = cMvSrchRngRB.getVer();
  }

  // Initial search
  iBestX = cStruct.iBestX;
  iBestY = cStruct.iBestY; 
  iFirstSrchRngHorLeft    = ((iBestX - uiSearchRangeInitial) > iSrchRngHorLeft)   ? (iBestX - uiSearchRangeInitial) : iSrchRngHorLeft;
  iFirstSrchRngVerTop     = ((iBestY - uiSearchRangeInitial) > iSrchRngVerTop)    ? (iBestY - uiSearchRangeInitial) : iSrchRngVerTop;
  iFirstSrchRngHorRight   = ((iBestX + uiSearchRangeInitial) < iSrchRngHorRight)  ? (iBestX + uiSearchRangeInitial) : iSrchRngHorRight;  
  iFirstSrchRngVerBottom  = ((iBestY + uiSearchRangeInitial) < iSrchRngVerBottom) ? (iBestY + uiSearchRangeInitial) : iSrchRngVerBottom;    

  for ( iStartY = iFirstSrchRngVerTop; iStartY <= iFirstSrchRngVerBottom; iStartY += uiSearchStep )
  {
    for ( iStartX = iFirstSrchRngHorLeft; iStartX <= iFirstSrchRngHorRight; iStartX += uiSearchStep )
    {
      xTZSearchHelp( pcPatternKey, cStruct, iStartX, iStartY, 0, 0 );
      xTZ8PointDiamondSearch ( pcPatternKey, cStruct, pcMvSrchRngLT, pcMvSrchRngRB, iStartX, iStartY, 1, false );
      xTZ8PointDiamondSearch ( pcPatternKey, cStruct, pcMvSrchRngLT, pcMvSrchRngRB, iStartX, iStartY, 2, false );
    }
  }

  Int iMaxMVDistToPred = (abs(cStruct.iBestX - iBestX) > iMVDistThresh || abs(cStruct.iBestY - iBestY) > iMVDistThresh);

  //full search with early exit if MV is distant from predictors
  if ( bEnableRasterSearch && (iMaxMVDistToPred || bAlwaysRasterSearch) )
  {
    for ( iStartY = iSrchRngVerTop; iStartY <= iSrchRngVerBottom; iStartY += 1 )
    {
      for ( iStartX = iSrchRngHorLeft; iStartX <= iSrchRngHorRight; iStartX += 1 )
      {
        xTZSearchHelp( pcPatternKey, cStruct, iStartX, iStartY, 0, 1 );
      }
    }
  }
  //Smaller MV, refine around predictor
  else if ( bStarRefinementEnable && cStruct.uiBestDistance > 0 )
  {
    // start refinement
    while ( cStruct.uiBestDistance > 0 )
    {
      iStartX = cStruct.iBestX;
      iStartY = cStruct.iBestY;
      cStruct.uiBestDistance = 0;
      cStruct.ucPointNr = 0;
      for ( iDist = 1; iDist < (Int)uiSearchRange + 1; iDist*=2 )
      {
        if ( bStarRefinementDiamond == 1 )
        {
          xTZ8PointDiamondSearch ( pcPatternKey, cStruct, pcMvSrchRngLT, pcMvSrchRngRB, iStartX, iStartY, iDist, false );
        }
        else
        {
          xTZ8PointSquareSearch  ( pcPatternKey, cStruct, pcMvSrchRngLT, pcMvSrchRngRB, iStartX, iStartY, iDist );
        }
        if ( bStarRefinementStop && (cStruct.uiBestRound >= uiStarRefinementRounds) ) // stop criterion
        {
          break;
        }
      }

      // calculate only 2 missing points instead 8 points if cStrukt.uiBestDistance == 1
      if ( cStruct.uiBestDistance == 1 )
      {
        cStruct.uiBestDistance = 0;
        if ( cStruct.ucPointNr != 0 )
        {
          xTZ2PointSearch( pcPatternKey, cStruct, pcMvSrchRngLT, pcMvSrchRngRB );
        }
      }
    }
  }

  // write out best match
  rcMv.set( cStruct.iBestX, cStruct.iBestY );
  ruiSAD = cStruct.uiBestSad - m_pcRdCost->getCostOfVectorWithPredictor( cStruct.iBestX, cStruct.iBestY );

}


Void TEncSearch::xPatternSearchFracDIF(
                                       Bool         bIsLosslessCoded,
                                       TComPattern* pcPatternKey,
                                       Pel*         piRefY,
                                       Int          iRefStride,
                                       TComMv*      pcMvInt,
                                       TComMv&      rcMvHalf,
                                       TComMv&      rcMvQter,
                                       Distortion&  ruiCost
                                      )
{
  //  Reference pattern initialization (integer scale)
	
  TComPattern cPatternRoi;
  Int         iOffset    = pcMvInt->getHor() + pcMvInt->getVer() * iRefStride;
  cPatternRoi.initPattern(piRefY + iOffset,
                          pcPatternKey->getROIYWidth(),
                          pcPatternKey->getROIYHeight(),
                          iRefStride,
                          pcPatternKey->getBitDepthY());

  //  Half-pel refinement
  xExtDIFUpSamplingH ( &cPatternRoi );

  rcMvHalf = *pcMvInt;   rcMvHalf <<= 1;    // for mv-cost
  TComMv baseRefMv(0, 0);
  ruiCost = xPatternRefinement( pcPatternKey, baseRefMv, 2, rcMvHalf, !bIsLosslessCoded );

  m_pcRdCost->setCostScale( 0 );

  xExtDIFUpSamplingQ ( &cPatternRoi, rcMvHalf );
  baseRefMv = rcMvHalf;
  baseRefMv <<= 1;

  rcMvQter = *pcMvInt;   rcMvQter <<= 1;    // for mv-cost
  rcMvQter += rcMvHalf;  rcMvQter <<= 1;
  ruiCost = xPatternRefinement( pcPatternKey, baseRefMv, 1, rcMvQter, !bIsLosslessCoded );
}


//! encode residual and calculate rate-distortion for a CU block
Void TEncSearch::encodeResAndCalcRdInterCU( TComDataCU* pcCU, TComYuv* pcYuvOrg, TComYuv* pcYuvPred,
                                            TComYuv* pcYuvResi, TComYuv* pcYuvResiBest, TComYuv* pcYuvRec,
                                            Bool bSkipResidual DEBUG_STRING_FN_DECLARE(sDebug) )
{
  assert ( !pcCU->isIntra(0) );

  const UInt cuWidthPixels      = pcCU->getWidth ( 0 );
  const UInt cuHeightPixels     = pcCU->getHeight( 0 );
  const Int  numValidComponents = pcCU->getPic()->getNumberValidComponents();
  const TComSPS &sps=*(pcCU->getSlice()->getSPS());

  // The pcCU is not marked as skip-mode at this point, and its m_pcTrCoeff, m_pcArlCoeff, m_puhCbf, m_puhTrIdx will all be 0.
  // due to prior calls to TComDataCU::initEstData(  );

  if ( bSkipResidual ) //  No residual coding : SKIP mode
  {
    pcCU->setSkipFlagSubParts( true, 0, pcCU->getDepth(0) );

    pcYuvResi->clear();

    pcYuvPred->copyToPartYuv( pcYuvRec, 0 );
    Distortion distortion = 0;

    for (Int comp=0; comp < numValidComponents; comp++)
    {
      const ComponentID compID=ComponentID(comp);
      const UInt csx=pcYuvOrg->getComponentScaleX(compID);
      const UInt csy=pcYuvOrg->getComponentScaleY(compID);
      distortion += m_pcRdCost->getDistPart( sps.getBitDepth(toChannelType(compID)), pcYuvRec->getAddr(compID), pcYuvRec->getStride(compID), pcYuvOrg->getAddr(compID),
                                               pcYuvOrg->getStride(compID), cuWidthPixels >> csx, cuHeightPixels >> csy, compID);
    }

    m_pcRDGoOnSbacCoder->load(m_pppcRDSbacCoder[pcCU->getDepth(0)][CI_CURR_BEST]);
    m_pcEntropyCoder->resetBits();

    if (pcCU->getSlice()->getPPS()->getTransquantBypassEnableFlag())
    {
      m_pcEntropyCoder->encodeCUTransquantBypassFlag(pcCU, 0, true);
    }

    m_pcEntropyCoder->encodeSkipFlag(pcCU, 0, true);
    m_pcEntropyCoder->encodeMergeIndex( pcCU, 0, true );

    UInt uiBits = m_pcEntropyCoder->getNumberOfWrittenBits();
    pcCU->getTotalBits()       = uiBits;
    pcCU->getTotalDistortion() = distortion;
    pcCU->getTotalCost()       = m_pcRdCost->calcRdCost( uiBits, distortion );

    m_pcRDGoOnSbacCoder->store(m_pppcRDSbacCoder[pcCU->getDepth(0)][CI_TEMP_BEST]);

#if DEBUG_STRING
    pcYuvResiBest->clear(); // Clear the residual image, if we didn't code it.
    for(UInt i=0; i<MAX_NUM_COMPONENT+1; i++)
    {
      sDebug+=debug_reorder_data_inter_token[i];
    }
#endif

    return;
  }

  //  Residual coding.

   pcYuvResi->subtract( pcYuvOrg, pcYuvPred, 0, cuWidthPixels );

  TComTURecurse tuLevel0(pcCU, 0);

  Double     nonZeroCost       = 0;
  UInt       nonZeroBits       = 0;
  Distortion nonZeroDistortion = 0;
  Distortion zeroDistortion    = 0;

  m_pcRDGoOnSbacCoder->load( m_pppcRDSbacCoder[ pcCU->getDepth( 0 ) ][ CI_CURR_BEST ] );

  xEstimateInterResidualQT( pcYuvResi,  nonZeroCost, nonZeroBits, nonZeroDistortion, &zeroDistortion, tuLevel0 DEBUG_STRING_PASS_INTO(sDebug) );

  // -------------------------------------------------------
  // set the coefficients in the pcCU, and also calculates the residual data.
  // If a block full of 0's is efficient, then just use 0's.
  // The costs at this point do not include header bits.

  m_pcEntropyCoder->resetBits();
  m_pcEntropyCoder->encodeQtRootCbfZero( );
  const UInt   zeroResiBits = m_pcEntropyCoder->getNumberOfWrittenBits();
  const Double zeroCost     = (pcCU->isLosslessCoded( 0 )) ? (nonZeroCost+1) : (m_pcRdCost->calcRdCost( zeroResiBits, zeroDistortion ));

  if ( zeroCost < nonZeroCost || !pcCU->getQtRootCbf(0) )
  {
    const UInt uiQPartNum = tuLevel0.GetAbsPartIdxNumParts();
    ::memset( pcCU->getTransformIdx()     , 0, uiQPartNum * sizeof(UChar) );
    for (Int comp=0; comp < numValidComponents; comp++)
    {
      const ComponentID component = ComponentID(comp);
      ::memset( pcCU->getCbf( component ) , 0, uiQPartNum * sizeof(UChar) );
      ::memset( pcCU->getCrossComponentPredictionAlpha(component), 0, ( uiQPartNum * sizeof(SChar) ) );
    }
    static const UInt useTS[MAX_NUM_COMPONENT]={0,0,0};
    pcCU->setTransformSkipSubParts ( useTS, 0, pcCU->getDepth(0) );
#if DEBUG_STRING
    sDebug.clear();
    for(UInt i=0; i<MAX_NUM_COMPONENT+1; i++)
    {
      sDebug+=debug_reorder_data_inter_token[i];
    }
#endif
  }
  else
  {
    xSetInterResidualQTData( NULL, false, tuLevel0); // Call first time to set coefficients.
  }

  // all decisions now made. Fully encode the CU, including the headers:
  m_pcRDGoOnSbacCoder->load( m_pppcRDSbacCoder[pcCU->getDepth(0)][CI_CURR_BEST] );

  UInt finalBits = 0;
  xAddSymbolBitsInter( pcCU, finalBits );
  // we've now encoded the pcCU, and so have a valid bit cost

  if ( !pcCU->getQtRootCbf( 0 ) )
  {
    pcYuvResiBest->clear(); // Clear the residual image, if we didn't code it.
  }
  else
  {
    xSetInterResidualQTData( pcYuvResiBest, true, tuLevel0 ); // else set the residual image data pcYUVResiBest from the various temp images.
  }
  m_pcRDGoOnSbacCoder->store( m_pppcRDSbacCoder[ pcCU->getDepth( 0 ) ][ CI_TEMP_BEST ] );

  pcYuvRec->addClip ( pcYuvPred, pcYuvResiBest, 0, cuWidthPixels, sps.getBitDepths() );

  // update with clipped distortion and cost (previously unclipped reconstruction values were used)

  Distortion finalDistortion = 0;
  for(Int comp=0; comp<numValidComponents; comp++)
  {
    const ComponentID compID=ComponentID(comp);
    finalDistortion += m_pcRdCost->getDistPart( sps.getBitDepth(toChannelType(compID)), pcYuvRec->getAddr(compID ), pcYuvRec->getStride(compID ), pcYuvOrg->getAddr(compID ), pcYuvOrg->getStride(compID), cuWidthPixels >> pcYuvOrg->getComponentScaleX(compID), cuHeightPixels >> pcYuvOrg->getComponentScaleY(compID), compID);
  }

  pcCU->getTotalBits()       = finalBits;
  pcCU->getTotalDistortion() = finalDistortion;
  pcCU->getTotalCost()       = m_pcRdCost->calcRdCost( finalBits, finalDistortion );
}



Void TEncSearch::xEstimateInterResidualQT( TComYuv    *pcResi,
                                           Double     &rdCost,
                                           UInt       &ruiBits,
                                           Distortion &ruiDist,
                                           Distortion *puiZeroDist,
                                           TComTU     &rTu
                                           DEBUG_STRING_FN_DECLARE(sDebug) )
{
  TComDataCU *pcCU        = rTu.getCU();
  const UInt uiAbsPartIdx = rTu.GetAbsPartIdxTU();
  const UInt uiDepth      = rTu.GetTransformDepthTotal();
  const UInt uiTrMode     = rTu.GetTransformDepthRel();
  const UInt subTUDepth   = uiTrMode + 1;
  const UInt numValidComp = pcCU->getPic()->getNumberValidComponents();
  DEBUG_STRING_NEW(sSingleStringComp[MAX_NUM_COMPONENT])

  assert( pcCU->getDepth( 0 ) == pcCU->getDepth( uiAbsPartIdx ) );
  const UInt uiLog2TrSize = rTu.GetLog2LumaTrSize();

  UInt SplitFlag = ((pcCU->getSlice()->getSPS()->getQuadtreeTUMaxDepthInter() == 1) && pcCU->isInter(uiAbsPartIdx) && ( pcCU->getPartitionSize(uiAbsPartIdx) != SIZE_2Nx2N ));
#if DEBUG_STRING
  const Int debugPredModeMask = DebugStringGetPredModeMask(pcCU->getPredictionMode(uiAbsPartIdx));
#endif

  Bool bCheckFull;

  if ( SplitFlag && uiDepth == pcCU->getDepth(uiAbsPartIdx) && ( uiLog2TrSize >  pcCU->getQuadtreeTULog2MinSizeInCU(uiAbsPartIdx) ) )
  {
    bCheckFull = false;
  }
  else
  {
    bCheckFull =  ( uiLog2TrSize <= pcCU->getSlice()->getSPS()->getQuadtreeTULog2MaxSize() );
  }

  const Bool bCheckSplit  = ( uiLog2TrSize >  pcCU->getQuadtreeTULog2MinSizeInCU(uiAbsPartIdx) );

  assert( bCheckFull || bCheckSplit );

  // code full block
  Double     dSingleCost = MAX_DOUBLE;
  UInt       uiSingleBits                                                                                                        = 0;
  Distortion uiSingleDistComp            [MAX_NUM_COMPONENT][2/*0 = top (or whole TU for non-4:2:2) sub-TU, 1 = bottom sub-TU*/] = {{0,0},{0,0},{0,0}};
  Distortion uiSingleDist                                                                                                        = 0;
  TCoeff     uiAbsSum                    [MAX_NUM_COMPONENT][2/*0 = top (or whole TU for non-4:2:2) sub-TU, 1 = bottom sub-TU*/] = {{0,0},{0,0},{0,0}};
  UInt       uiBestTransformMode         [MAX_NUM_COMPONENT][2/*0 = top (or whole TU for non-4:2:2) sub-TU, 1 = bottom sub-TU*/] = {{0,0},{0,0},{0,0}};
  //  Stores the best explicit RDPCM mode for a TU encoded without split
  UInt       bestExplicitRdpcmModeUnSplit[MAX_NUM_COMPONENT][2/*0 = top (or whole TU for non-4:2:2) sub-TU, 1 = bottom sub-TU*/] = {{3,3}, {3,3}, {3,3}};
  SChar      bestCrossCPredictionAlpha   [MAX_NUM_COMPONENT][2/*0 = top (or whole TU for non-4:2:2) sub-TU, 1 = bottom sub-TU*/] = {{0,0},{0,0},{0,0}};

  m_pcRDGoOnSbacCoder->store( m_pppcRDSbacCoder[ uiDepth ][ CI_QT_TRAFO_ROOT ] );

  if( bCheckFull )
  {
    Double minCost[MAX_NUM_COMPONENT][2/*0 = top (or whole TU for non-4:2:2) sub-TU, 1 = bottom sub-TU*/];
    Bool checkTransformSkip[MAX_NUM_COMPONENT];
    pcCU->setTrIdxSubParts( uiTrMode, uiAbsPartIdx, uiDepth );

    m_pcEntropyCoder->resetBits();

    memset( m_pTempPel, 0, sizeof( Pel ) * rTu.getRect(COMPONENT_Y).width * rTu.getRect(COMPONENT_Y).height ); // not necessary needed for inside of recursion (only at the beginning)

    const UInt uiQTTempAccessLayer = pcCU->getSlice()->getSPS()->getQuadtreeTULog2MaxSize() - uiLog2TrSize;
    TCoeff *pcCoeffCurr[MAX_NUM_COMPONENT];
#if ADAPTIVE_QP_SELECTION
    TCoeff *pcArlCoeffCurr[MAX_NUM_COMPONENT];
#endif

    for(UInt i=0; i<numValidComp; i++)
    {
      minCost[i][0] = MAX_DOUBLE;
      minCost[i][1] = MAX_DOUBLE;
    }

    Pel crossCPredictedResidualBuffer[ MAX_TU_SIZE * MAX_TU_SIZE ];

    for(UInt i=0; i<numValidComp; i++)
    {
      checkTransformSkip[i]=false;
      const ComponentID compID=ComponentID(i);
      const Int channelBitDepth=pcCU->getSlice()->getSPS()->getBitDepth(toChannelType(compID));
      pcCoeffCurr[compID]    = m_ppcQTTempCoeff[compID][uiQTTempAccessLayer] + rTu.getCoefficientOffset(compID);
#if ADAPTIVE_QP_SELECTION
      pcArlCoeffCurr[compID] = m_ppcQTTempArlCoeff[compID ][uiQTTempAccessLayer] +  rTu.getCoefficientOffset(compID);
#endif

      if(rTu.ProcessComponentSection(compID))
      {
        const QpParam cQP(*pcCU, compID);

        checkTransformSkip[compID] = pcCU->getSlice()->getPPS()->getUseTransformSkip() &&
                                     TUCompRectHasAssociatedTransformSkipFlag(rTu.getRect(compID), pcCU->getSlice()->getPPS()->getPpsRangeExtension().getLog2MaxTransformSkipBlockSize()) &&
                                     (!pcCU->isLosslessCoded(0));

        const Bool splitIntoSubTUs = rTu.getRect(compID).width != rTu.getRect(compID).height;

        TComTURecurse TUIterator(rTu, false, (splitIntoSubTUs ? TComTU::VERTICAL_SPLIT : TComTU::DONT_SPLIT), true, compID);

        const UInt partIdxesPerSubTU = TUIterator.GetAbsPartIdxNumParts(compID);

        do
        {
          const UInt           subTUIndex             = TUIterator.GetSectionNumber();
          const UInt           subTUAbsPartIdx        = TUIterator.GetAbsPartIdxTU(compID);
          const TComRectangle &tuCompRect             = TUIterator.getRect(compID);
          const UInt           subTUBufferOffset      = tuCompRect.width * tuCompRect.height * subTUIndex;

                TCoeff        *currentCoefficients    = pcCoeffCurr[compID] + subTUBufferOffset;
#if ADAPTIVE_QP_SELECTION
                TCoeff        *currentARLCoefficients = pcArlCoeffCurr[compID] + subTUBufferOffset;
#endif
          const Bool isCrossCPredictionAvailable      =    isChroma(compID)
                                                         && pcCU->getSlice()->getPPS()->getPpsRangeExtension().getCrossComponentPredictionEnabledFlag()
                                                         && (pcCU->getCbf(subTUAbsPartIdx, COMPONENT_Y, uiTrMode) != 0);

          SChar preCalcAlpha = 0;
          const Pel *pLumaResi = m_pcQTTempTComYuv[uiQTTempAccessLayer].getAddrPix( COMPONENT_Y, rTu.getRect( COMPONENT_Y ).x0, rTu.getRect( COMPONENT_Y ).y0 );

          if (isCrossCPredictionAvailable)
          {
            const Bool bUseReconstructedResidualForEstimate = m_pcEncCfg->getUseReconBasedCrossCPredictionEstimate();
            const Pel  *const lumaResidualForEstimate       = bUseReconstructedResidualForEstimate ? pLumaResi                                                     : pcResi->getAddrPix(COMPONENT_Y, tuCompRect.x0, tuCompRect.y0);
            const UInt        lumaResidualStrideForEstimate = bUseReconstructedResidualForEstimate ? m_pcQTTempTComYuv[uiQTTempAccessLayer].getStride(COMPONENT_Y) : pcResi->getStride(COMPONENT_Y);

            preCalcAlpha = xCalcCrossComponentPredictionAlpha(TUIterator,
                                                              compID,
                                                              lumaResidualForEstimate,
                                                              pcResi->getAddrPix(compID, tuCompRect.x0, tuCompRect.y0),
                                                              tuCompRect.width,
                                                              tuCompRect.height,
                                                              lumaResidualStrideForEstimate,
                                                              pcResi->getStride(compID));
          }

          const Int transformSkipModesToTest    = checkTransformSkip[compID] ? 2 : 1;
          const Int crossCPredictionModesToTest = (preCalcAlpha != 0)        ? 2 : 1; // preCalcAlpha cannot be anything other than 0 if isCrossCPredictionAvailable is false

          const Bool isOneMode                  = (crossCPredictionModesToTest == 1) && (transformSkipModesToTest == 1);

          for (Int transformSkipModeId = 0; transformSkipModeId < transformSkipModesToTest; transformSkipModeId++)
          {
            pcCU->setTransformSkipPartRange(transformSkipModeId, compID, subTUAbsPartIdx, partIdxesPerSubTU);

            for (Int crossCPredictionModeId = 0; crossCPredictionModeId < crossCPredictionModesToTest; crossCPredictionModeId++)
            {
              const Bool isFirstMode          = (transformSkipModeId == 0) && (crossCPredictionModeId == 0);
              const Bool bUseCrossCPrediction = crossCPredictionModeId != 0;

              m_pcRDGoOnSbacCoder->load( m_pppcRDSbacCoder[ uiDepth ][ CI_QT_TRAFO_ROOT ] );
              m_pcEntropyCoder->resetBits();

              pcCU->setTransformSkipPartRange(transformSkipModeId, compID, subTUAbsPartIdx, partIdxesPerSubTU);
              pcCU->setCrossComponentPredictionAlphaPartRange((bUseCrossCPrediction ? preCalcAlpha : 0), compID, subTUAbsPartIdx, partIdxesPerSubTU );

              if ((compID != COMPONENT_Cr) && ((transformSkipModeId == 1) ? m_pcEncCfg->getUseRDOQTS() : m_pcEncCfg->getUseRDOQ()))
              {
                m_pcEntropyCoder->estimateBit(m_pcTrQuant->m_pcEstBitsSbac, tuCompRect.width, tuCompRect.height, toChannelType(compID));
              }

#if RDOQ_CHROMA_LAMBDA
              m_pcTrQuant->selectLambda(compID);
#endif

              Pel *pcResiCurrComp = m_pcQTTempTComYuv[uiQTTempAccessLayer].getAddrPix(compID, tuCompRect.x0, tuCompRect.y0);
              UInt resiStride     = m_pcQTTempTComYuv[uiQTTempAccessLayer].getStride(compID);

              TCoeff bestCoeffComp   [MAX_TU_SIZE*MAX_TU_SIZE];
              Pel    bestResiComp    [MAX_TU_SIZE*MAX_TU_SIZE];

#if ADAPTIVE_QP_SELECTION
              TCoeff bestArlCoeffComp[MAX_TU_SIZE*MAX_TU_SIZE];
#endif
              TCoeff     currAbsSum   = 0;
              UInt       currCompBits = 0;
              Distortion currCompDist = 0;
              Double     currCompCost = 0;
              UInt       nonCoeffBits = 0;
              Distortion nonCoeffDist = 0;
              Double     nonCoeffCost = 0;

              if(!isOneMode && !isFirstMode)
              {
                memcpy(bestCoeffComp,    currentCoefficients,    (sizeof(TCoeff) * tuCompRect.width * tuCompRect.height));
#if ADAPTIVE_QP_SELECTION
                memcpy(bestArlCoeffComp, currentARLCoefficients, (sizeof(TCoeff) * tuCompRect.width * tuCompRect.height));
#endif
                for(Int y = 0; y < tuCompRect.height; y++)
                {
                  memcpy(&bestResiComp[y * tuCompRect.width], (pcResiCurrComp + (y * resiStride)), (sizeof(Pel) * tuCompRect.width));
                }
              }

              if (bUseCrossCPrediction)
              {
                TComTrQuant::crossComponentPrediction(TUIterator,
                                                      compID,
                                                      pLumaResi,
                                                      pcResi->getAddrPix(compID, tuCompRect.x0, tuCompRect.y0),
                                                      crossCPredictedResidualBuffer,
                                                      tuCompRect.width,
                                                      tuCompRect.height,
                                                      m_pcQTTempTComYuv[uiQTTempAccessLayer].getStride(COMPONENT_Y),
                                                      pcResi->getStride(compID),
                                                      tuCompRect.width,
                                                      false);

                m_pcTrQuant->transformNxN(TUIterator, compID, crossCPredictedResidualBuffer, tuCompRect.width, currentCoefficients,
#if ADAPTIVE_QP_SELECTION
                                          currentARLCoefficients,
#endif
                                          currAbsSum, cQP);
              }
              else
              {
                m_pcTrQuant->transformNxN(TUIterator, compID, pcResi->getAddrPix( compID, tuCompRect.x0, tuCompRect.y0 ), pcResi->getStride(compID), currentCoefficients,
#if ADAPTIVE_QP_SELECTION
                                          currentARLCoefficients,
#endif
                                          currAbsSum, cQP);
              }

              if(isFirstMode || (currAbsSum == 0))
              {
                if (bUseCrossCPrediction)
                {
                  TComTrQuant::crossComponentPrediction(TUIterator,
                                                        compID,
                                                        pLumaResi,
                                                        m_pTempPel,
                                                        m_pcQTTempTComYuv[uiQTTempAccessLayer].getAddrPix(compID, tuCompRect.x0, tuCompRect.y0),
                                                        tuCompRect.width,
                                                        tuCompRect.height,
                                                        m_pcQTTempTComYuv[uiQTTempAccessLayer].getStride(COMPONENT_Y),
                                                        tuCompRect.width,
                                                        m_pcQTTempTComYuv[uiQTTempAccessLayer].getStride(compID),
                                                        true);

                  nonCoeffDist = m_pcRdCost->getDistPart( channelBitDepth, m_pcQTTempTComYuv[uiQTTempAccessLayer].getAddrPix( compID, tuCompRect.x0, tuCompRect.y0 ),
                                                          m_pcQTTempTComYuv[uiQTTempAccessLayer].getStride( compID ), pcResi->getAddrPix( compID, tuCompRect.x0, tuCompRect.y0 ),
                                                          pcResi->getStride(compID), tuCompRect.width, tuCompRect.height, compID); // initialized with zero residual distortion
                }
                else
                {
                  nonCoeffDist = m_pcRdCost->getDistPart( channelBitDepth, m_pTempPel, tuCompRect.width, pcResi->getAddrPix( compID, tuCompRect.x0, tuCompRect.y0 ),
                                                          pcResi->getStride(compID), tuCompRect.width, tuCompRect.height, compID); // initialized with zero residual distortion
                }

                m_pcEntropyCoder->encodeQtCbfZero( TUIterator, toChannelType(compID) );

                if ( isCrossCPredictionAvailable )
                {
                  m_pcEntropyCoder->encodeCrossComponentPrediction( TUIterator, compID );
                }

                nonCoeffBits = m_pcEntropyCoder->getNumberOfWrittenBits();
                nonCoeffCost = m_pcRdCost->calcRdCost( nonCoeffBits, nonCoeffDist );
              }

              if((puiZeroDist != NULL) && isFirstMode)
              {
                *puiZeroDist += nonCoeffDist; // initialized with zero residual distortion
              }

              DEBUG_STRING_NEW(sSingleStringTest)

              if( currAbsSum > 0 ) //if non-zero coefficients are present, a residual needs to be derived for further prediction
              {
                if (isFirstMode)
                {
                  m_pcRDGoOnSbacCoder->load( m_pppcRDSbacCoder[ uiDepth ][ CI_QT_TRAFO_ROOT ] );
                  m_pcEntropyCoder->resetBits();
                }

                m_pcEntropyCoder->encodeQtCbf( TUIterator, compID, true );

                if (isCrossCPredictionAvailable)
                {
                  m_pcEntropyCoder->encodeCrossComponentPrediction( TUIterator, compID );
                }

                m_pcEntropyCoder->encodeCoeffNxN( TUIterator, currentCoefficients, compID );
                currCompBits = m_pcEntropyCoder->getNumberOfWrittenBits();

                pcResiCurrComp = m_pcQTTempTComYuv[uiQTTempAccessLayer].getAddrPix( compID, tuCompRect.x0, tuCompRect.y0 );

                m_pcTrQuant->invTransformNxN( TUIterator, compID, pcResiCurrComp, m_pcQTTempTComYuv[uiQTTempAccessLayer].getStride(compID), currentCoefficients, cQP DEBUG_STRING_PASS_INTO_OPTIONAL(&sSingleStringTest, (DebugOptionList::DebugString_InvTran.getInt()&debugPredModeMask)) );

                if (bUseCrossCPrediction)
                {
                  TComTrQuant::crossComponentPrediction(TUIterator,
                                                        compID,
                                                        pLumaResi,
                                                        m_pcQTTempTComYuv[uiQTTempAccessLayer].getAddrPix(compID, tuCompRect.x0, tuCompRect.y0),
                                                        m_pcQTTempTComYuv[uiQTTempAccessLayer].getAddrPix(compID, tuCompRect.x0, tuCompRect.y0),
                                                        tuCompRect.width,
                                                        tuCompRect.height,
                                                        m_pcQTTempTComYuv[uiQTTempAccessLayer].getStride(COMPONENT_Y),
                                                        m_pcQTTempTComYuv[uiQTTempAccessLayer].getStride(compID     ),
                                                        m_pcQTTempTComYuv[uiQTTempAccessLayer].getStride(compID     ),
                                                        true);
                }

                currCompDist = m_pcRdCost->getDistPart( channelBitDepth, m_pcQTTempTComYuv[uiQTTempAccessLayer].getAddrPix( compID, tuCompRect.x0, tuCompRect.y0 ),
                                                        m_pcQTTempTComYuv[uiQTTempAccessLayer].getStride(compID),
                                                        pcResi->getAddrPix( compID, tuCompRect.x0, tuCompRect.y0 ),
                                                        pcResi->getStride(compID),
                                                        tuCompRect.width, tuCompRect.height, compID);

                currCompCost = m_pcRdCost->calcRdCost(currCompBits, currCompDist);
                  
                if (pcCU->isLosslessCoded(0))
                {
                  nonCoeffCost = MAX_DOUBLE;
                }
              }
              else if ((transformSkipModeId == 1) && !bUseCrossCPrediction)
              {
                currCompCost = MAX_DOUBLE;
              }
              else
              {
                currCompBits = nonCoeffBits;
                currCompDist = nonCoeffDist;
                currCompCost = nonCoeffCost;
              }

              // evaluate
              if ((currCompCost < minCost[compID][subTUIndex]) || ((transformSkipModeId == 1) && (currCompCost == minCost[compID][subTUIndex])))
              {
                bestExplicitRdpcmModeUnSplit[compID][subTUIndex] = pcCU->getExplicitRdpcmMode(compID, subTUAbsPartIdx);

                if(isFirstMode) //check for forced null
                {
                  if((nonCoeffCost < currCompCost) || (currAbsSum == 0))
                  {
                    memset(currentCoefficients, 0, (sizeof(TCoeff) * tuCompRect.width * tuCompRect.height));

                    currAbsSum   = 0;
                    currCompBits = nonCoeffBits;
                    currCompDist = nonCoeffDist;
                    currCompCost = nonCoeffCost;
                  }
                }

#if DEBUG_STRING
                if (currAbsSum > 0)
                {
                  DEBUG_STRING_SWAP(sSingleStringComp[compID], sSingleStringTest)
                }
                else
                {
                  sSingleStringComp[compID].clear();
                }
#endif

                uiAbsSum                 [compID][subTUIndex] = currAbsSum;
                uiSingleDistComp         [compID][subTUIndex] = currCompDist;
                minCost                  [compID][subTUIndex] = currCompCost;
                uiBestTransformMode      [compID][subTUIndex] = transformSkipModeId;
                bestCrossCPredictionAlpha[compID][subTUIndex] = (crossCPredictionModeId == 1) ? pcCU->getCrossComponentPredictionAlpha(subTUAbsPartIdx, compID) : 0;

                if (uiAbsSum[compID][subTUIndex] == 0)
                {
                  if (bUseCrossCPrediction)
                  {
                    TComTrQuant::crossComponentPrediction(TUIterator,
                                                          compID,
                                                          pLumaResi,
                                                          m_pTempPel,
                                                          m_pcQTTempTComYuv[uiQTTempAccessLayer].getAddrPix(compID, tuCompRect.x0, tuCompRect.y0),
                                                          tuCompRect.width,
                                                          tuCompRect.height,
                                                          m_pcQTTempTComYuv[uiQTTempAccessLayer].getStride(COMPONENT_Y),
                                                          tuCompRect.width,
                                                          m_pcQTTempTComYuv[uiQTTempAccessLayer].getStride(compID),
                                                          true);
                  }
                  else
                  {
                    pcResiCurrComp = m_pcQTTempTComYuv[uiQTTempAccessLayer].getAddrPix(compID, tuCompRect.x0, tuCompRect.y0);
                    const UInt uiStride = m_pcQTTempTComYuv[uiQTTempAccessLayer].getStride(compID);
                    for(UInt uiY = 0; uiY < tuCompRect.height; uiY++)
                    {
                      memset(pcResiCurrComp, 0, (sizeof(Pel) * tuCompRect.width));
                      pcResiCurrComp += uiStride;
                    }
                  }
                }
              }
              else
              {
                // reset
                memcpy(currentCoefficients,    bestCoeffComp,    (sizeof(TCoeff) * tuCompRect.width * tuCompRect.height));
#if ADAPTIVE_QP_SELECTION
                memcpy(currentARLCoefficients, bestArlCoeffComp, (sizeof(TCoeff) * tuCompRect.width * tuCompRect.height));
#endif
                for (Int y = 0; y < tuCompRect.height; y++)
                {
                  memcpy((pcResiCurrComp + (y * resiStride)), &bestResiComp[y * tuCompRect.width], (sizeof(Pel) * tuCompRect.width));
                }
              }
            }
          }

          pcCU->setExplicitRdpcmModePartRange            (   bestExplicitRdpcmModeUnSplit[compID][subTUIndex],                            compID, subTUAbsPartIdx, partIdxesPerSubTU);
          pcCU->setTransformSkipPartRange                (   uiBestTransformMode         [compID][subTUIndex],                            compID, subTUAbsPartIdx, partIdxesPerSubTU );
          pcCU->setCbfPartRange                          ((((uiAbsSum                    [compID][subTUIndex] > 0) ? 1 : 0) << uiTrMode), compID, subTUAbsPartIdx, partIdxesPerSubTU );
          pcCU->setCrossComponentPredictionAlphaPartRange(   bestCrossCPredictionAlpha   [compID][subTUIndex],                            compID, subTUAbsPartIdx, partIdxesPerSubTU );
        } while (TUIterator.nextSection(rTu)); //end of sub-TU loop
      } // processing section
    } // component loop

    for(UInt ch = 0; ch < numValidComp; ch++)
    {
      const ComponentID compID = ComponentID(ch);
      if (rTu.ProcessComponentSection(compID) && (rTu.getRect(compID).width != rTu.getRect(compID).height))
      {
        offsetSubTUCBFs(rTu, compID); //the CBFs up to now have been defined for two sub-TUs - shift them down a level and replace with the parent level CBF
      }
    }

    m_pcRDGoOnSbacCoder->load( m_pppcRDSbacCoder[ uiDepth ][ CI_QT_TRAFO_ROOT ] );
    m_pcEntropyCoder->resetBits();

    if( uiLog2TrSize > pcCU->getQuadtreeTULog2MinSizeInCU(uiAbsPartIdx) )
    {
      m_pcEntropyCoder->encodeTransformSubdivFlag( 0, 5 - uiLog2TrSize );
    }

    for(UInt ch = 0; ch < numValidComp; ch++)
    {
      const UInt chOrderChange = ((ch + 1) == numValidComp) ? 0 : (ch + 1);
      const ComponentID compID=ComponentID(chOrderChange);
      if( rTu.ProcessComponentSection(compID) )
      {
        m_pcEntropyCoder->encodeQtCbf( rTu, compID, true );
      }
    }

    for(UInt ch = 0; ch < numValidComp; ch++)
    {
      const ComponentID compID=ComponentID(ch);
      if (rTu.ProcessComponentSection(compID))
      {
        if(isChroma(compID) && (uiAbsSum[COMPONENT_Y][0] != 0))
        {
          m_pcEntropyCoder->encodeCrossComponentPrediction( rTu, compID );
        }

        m_pcEntropyCoder->encodeCoeffNxN( rTu, pcCoeffCurr[compID], compID );
        for (UInt subTUIndex = 0; subTUIndex < 2; subTUIndex++)
        {
          uiSingleDist += uiSingleDistComp[compID][subTUIndex];
        }
      }
    }

    uiSingleBits = m_pcEntropyCoder->getNumberOfWrittenBits();

    dSingleCost = m_pcRdCost->calcRdCost( uiSingleBits, uiSingleDist );
  } // check full

  // code sub-blocks
  if( bCheckSplit )
  {
    if( bCheckFull )
    {
      m_pcRDGoOnSbacCoder->store( m_pppcRDSbacCoder[ uiDepth ][ CI_QT_TRAFO_TEST ] );
      m_pcRDGoOnSbacCoder->load ( m_pppcRDSbacCoder[ uiDepth ][ CI_QT_TRAFO_ROOT ] );
    }
    Distortion uiSubdivDist = 0;
    UInt       uiSubdivBits = 0;
    Double     dSubdivCost = 0.0;

    //save the non-split CBFs in case we need to restore them later

    UInt bestCBF     [MAX_NUM_COMPONENT];
    UInt bestsubTUCBF[MAX_NUM_COMPONENT][2];
    for(UInt ch = 0; ch < numValidComp; ch++)
    {
      const ComponentID compID=ComponentID(ch);

      if (rTu.ProcessComponentSection(compID))
      {
        bestCBF[compID] = pcCU->getCbf(uiAbsPartIdx, compID, uiTrMode);

        const TComRectangle &tuCompRect = rTu.getRect(compID);
        if (tuCompRect.width != tuCompRect.height)
        {
          const UInt partIdxesPerSubTU = rTu.GetAbsPartIdxNumParts(compID) >> 1;

          for (UInt subTU = 0; subTU < 2; subTU++)
          {
            bestsubTUCBF[compID][subTU] = pcCU->getCbf ((uiAbsPartIdx + (subTU * partIdxesPerSubTU)), compID, subTUDepth);
          }
        }
      }
    }


    TComTURecurse tuRecurseChild(rTu, false);
    const UInt uiQPartNumSubdiv = tuRecurseChild.GetAbsPartIdxNumParts();

    DEBUG_STRING_NEW(sSplitString[MAX_NUM_COMPONENT])

    do
    {
      DEBUG_STRING_NEW(childString)
      xEstimateInterResidualQT( pcResi, dSubdivCost, uiSubdivBits, uiSubdivDist, bCheckFull ? NULL : puiZeroDist,  tuRecurseChild DEBUG_STRING_PASS_INTO(childString));
#if DEBUG_STRING
      // split the string by component and append to the relevant output (because decoder decodes in channel order, whereas this search searches by TU-order)
      std::size_t lastPos=0;
      const std::size_t endStrng=childString.find(debug_reorder_data_inter_token[MAX_NUM_COMPONENT], lastPos);
      for(UInt ch = 0; ch < numValidComp; ch++)
      {
        if (lastPos!=std::string::npos && childString.find(debug_reorder_data_inter_token[ch], lastPos)==lastPos)
        {
          lastPos+=strlen(debug_reorder_data_inter_token[ch]); // skip leading string
        }
        std::size_t pos=childString.find(debug_reorder_data_inter_token[ch+1], lastPos);
        if (pos!=std::string::npos && pos>endStrng)
        {
          lastPos=endStrng;
        }
        sSplitString[ch]+=childString.substr(lastPos, (pos==std::string::npos)? std::string::npos : (pos-lastPos) );
        lastPos=pos;
      }
#endif
    } while ( tuRecurseChild.nextSection(rTu) ) ;

    UInt uiCbfAny=0;
    for(UInt ch = 0; ch < numValidComp; ch++)
    {
      UInt uiYUVCbf = 0;
      for( UInt ui = 0; ui < 4; ++ui )
      {
        uiYUVCbf |= pcCU->getCbf( uiAbsPartIdx + ui * uiQPartNumSubdiv, ComponentID(ch),  uiTrMode + 1 );
      }
      UChar *pBase=pcCU->getCbf( ComponentID(ch) );
      const UInt flags=uiYUVCbf << uiTrMode;
      for( UInt ui = 0; ui < 4 * uiQPartNumSubdiv; ++ui )
      {
        pBase[uiAbsPartIdx + ui] |= flags;
      }
      uiCbfAny|=uiYUVCbf;
    }

    m_pcRDGoOnSbacCoder->load( m_pppcRDSbacCoder[ uiDepth ][ CI_QT_TRAFO_ROOT ] );
    m_pcEntropyCoder->resetBits();

    // when compID isn't a channel, code Cbfs:
    xEncodeInterResidualQT( MAX_NUM_COMPONENT, rTu );
    for(UInt ch = 0; ch < numValidComp; ch++)
    {
      xEncodeInterResidualQT( ComponentID(ch), rTu );
    }

    uiSubdivBits = m_pcEntropyCoder->getNumberOfWrittenBits();
    dSubdivCost  = m_pcRdCost->calcRdCost( uiSubdivBits, uiSubdivDist );

    if (!bCheckFull || (uiCbfAny && (dSubdivCost < dSingleCost)))
    {
      rdCost += dSubdivCost;
      ruiBits += uiSubdivBits;
      ruiDist += uiSubdivDist;
#if DEBUG_STRING
      for(UInt ch = 0; ch < numValidComp; ch++)
      {
        DEBUG_STRING_APPEND(sDebug, debug_reorder_data_inter_token[ch])
        DEBUG_STRING_APPEND(sDebug, sSplitString[ch])
      }
#endif
    }
    else
    {
      rdCost  += dSingleCost;
      ruiBits += uiSingleBits;
      ruiDist += uiSingleDist;

      //restore state to unsplit

      pcCU->setTrIdxSubParts( uiTrMode, uiAbsPartIdx, uiDepth );

      for(UInt ch = 0; ch < numValidComp; ch++)
      {
        const ComponentID compID=ComponentID(ch);

        DEBUG_STRING_APPEND(sDebug, debug_reorder_data_inter_token[ch])
        if (rTu.ProcessComponentSection(compID))
        {
          DEBUG_STRING_APPEND(sDebug, sSingleStringComp[compID])

          const Bool splitIntoSubTUs   = rTu.getRect(compID).width != rTu.getRect(compID).height;
          const UInt numberOfSections  = splitIntoSubTUs ? 2 : 1;
          const UInt partIdxesPerSubTU = rTu.GetAbsPartIdxNumParts(compID) >> (splitIntoSubTUs ? 1 : 0);

          for (UInt subTUIndex = 0; subTUIndex < numberOfSections; subTUIndex++)
          {
            const UInt  uisubTUPartIdx = uiAbsPartIdx + (subTUIndex * partIdxesPerSubTU);

            if (splitIntoSubTUs)
            {
              const UChar combinedCBF = (bestsubTUCBF[compID][subTUIndex] << subTUDepth) | (bestCBF[compID] << uiTrMode);
              pcCU->setCbfPartRange(combinedCBF, compID, uisubTUPartIdx, partIdxesPerSubTU);
            }
            else
            {
              pcCU->setCbfPartRange((bestCBF[compID] << uiTrMode), compID, uisubTUPartIdx, partIdxesPerSubTU);
            }

            pcCU->setCrossComponentPredictionAlphaPartRange(bestCrossCPredictionAlpha[compID][subTUIndex], compID, uisubTUPartIdx, partIdxesPerSubTU);
            pcCU->setTransformSkipPartRange(uiBestTransformMode[compID][subTUIndex], compID, uisubTUPartIdx, partIdxesPerSubTU);
            pcCU->setExplicitRdpcmModePartRange(bestExplicitRdpcmModeUnSplit[compID][subTUIndex], compID, uisubTUPartIdx, partIdxesPerSubTU);
          }
        }
      }

      m_pcRDGoOnSbacCoder->load( m_pppcRDSbacCoder[ uiDepth ][ CI_QT_TRAFO_TEST ] );
    }
  }
  else
  {
    rdCost  += dSingleCost;
    ruiBits += uiSingleBits;
    ruiDist += uiSingleDist;
#if DEBUG_STRING
    for(UInt ch = 0; ch < numValidComp; ch++)
    {
      const ComponentID compID=ComponentID(ch);
      DEBUG_STRING_APPEND(sDebug, debug_reorder_data_inter_token[compID])

      if (rTu.ProcessComponentSection(compID))
      {
        DEBUG_STRING_APPEND(sDebug, sSingleStringComp[compID])
      }
    }
#endif
  }
  DEBUG_STRING_APPEND(sDebug, debug_reorder_data_inter_token[MAX_NUM_COMPONENT])
}



Void TEncSearch::xEncodeInterResidualQT( const ComponentID compID, TComTU &rTu )
{
  TComDataCU* pcCU=rTu.getCU();
  const UInt uiAbsPartIdx=rTu.GetAbsPartIdxTU();
  const UInt uiCurrTrMode = rTu.GetTransformDepthRel();
  assert( pcCU->getDepth( 0 ) == pcCU->getDepth( uiAbsPartIdx ) );
  const UInt uiTrMode = pcCU->getTransformIdx( uiAbsPartIdx );

  const Bool bSubdiv = uiCurrTrMode != uiTrMode;

  const UInt uiLog2TrSize = rTu.GetLog2LumaTrSize();

  if (compID==MAX_NUM_COMPONENT)  // we are not processing a channel, instead we always recurse and code the CBFs
  {
    if( uiLog2TrSize <= pcCU->getSlice()->getSPS()->getQuadtreeTULog2MaxSize() && uiLog2TrSize > pcCU->getQuadtreeTULog2MinSizeInCU(uiAbsPartIdx) )
    {
      if((pcCU->getSlice()->getSPS()->getQuadtreeTUMaxDepthInter() == 1) && (pcCU->getPartitionSize(uiAbsPartIdx) != SIZE_2Nx2N))
      {
        assert(bSubdiv); // Inferred splitting rule - see derivation and use of interSplitFlag in the specification.
      }
      else
      {
        m_pcEntropyCoder->encodeTransformSubdivFlag( bSubdiv, 5 - uiLog2TrSize );
      }
    }

    assert( !pcCU->isIntra(uiAbsPartIdx) );

    const Bool bFirstCbfOfCU = uiCurrTrMode == 0;

    for (UInt ch=COMPONENT_Cb; ch<pcCU->getPic()->getNumberValidComponents(); ch++)
    {
      const ComponentID compIdInner=ComponentID(ch);
      if( bFirstCbfOfCU || rTu.ProcessingAllQuadrants(compIdInner) )
      {
        if( bFirstCbfOfCU || pcCU->getCbf( uiAbsPartIdx, compIdInner, uiCurrTrMode - 1 ) )
        {
          m_pcEntropyCoder->encodeQtCbf( rTu, compIdInner, !bSubdiv );
        }
      }
      else
      {
        assert( pcCU->getCbf( uiAbsPartIdx, compIdInner, uiCurrTrMode ) == pcCU->getCbf( uiAbsPartIdx, compIdInner, uiCurrTrMode - 1 ) );
      }
    }

    if (!bSubdiv)
    {
      m_pcEntropyCoder->encodeQtCbf( rTu, COMPONENT_Y, true );
    }
  }

  if( !bSubdiv )
  {
    if (compID != MAX_NUM_COMPONENT) // we have already coded the CBFs, so now we code coefficients
    {
      if (rTu.ProcessComponentSection(compID))
      {
        if (isChroma(compID) && (pcCU->getCbf(uiAbsPartIdx, COMPONENT_Y, uiTrMode) != 0))
        {
          m_pcEntropyCoder->encodeCrossComponentPrediction(rTu, compID);
        }

        if (pcCU->getCbf(uiAbsPartIdx, compID, uiTrMode) != 0)
        {
          const UInt uiQTTempAccessLayer = pcCU->getSlice()->getSPS()->getQuadtreeTULog2MaxSize() - uiLog2TrSize;
          TCoeff *pcCoeffCurr = m_ppcQTTempCoeff[compID][uiQTTempAccessLayer] + rTu.getCoefficientOffset(compID);
          m_pcEntropyCoder->encodeCoeffNxN( rTu, pcCoeffCurr, compID );
        }
      }
    }
  }
  else
  {
    if( compID==MAX_NUM_COMPONENT || pcCU->getCbf( uiAbsPartIdx, compID, uiCurrTrMode ) )
    {
      TComTURecurse tuRecurseChild(rTu, false);
      do
      {
        xEncodeInterResidualQT( compID, tuRecurseChild );
      } while (tuRecurseChild.nextSection(rTu));
    }
  }
}




Void TEncSearch::xSetInterResidualQTData( TComYuv* pcResi, Bool bSpatial, TComTU &rTu ) // TODO: turn this into two functions for bSpatial=true and false.
{
  TComDataCU* pcCU=rTu.getCU();
  const UInt uiCurrTrMode=rTu.GetTransformDepthRel();
  const UInt uiAbsPartIdx=rTu.GetAbsPartIdxTU();
  assert( pcCU->getDepth( 0 ) == pcCU->getDepth( uiAbsPartIdx ) );
  const UInt uiTrMode = pcCU->getTransformIdx( uiAbsPartIdx );
  const TComSPS *sps=pcCU->getSlice()->getSPS();

  if( uiCurrTrMode == uiTrMode )
  {
    const UInt uiLog2TrSize = rTu.GetLog2LumaTrSize();
    const UInt uiQTTempAccessLayer = sps->getQuadtreeTULog2MaxSize() - uiLog2TrSize;

    if( bSpatial )
    {
      // Data to be copied is in the spatial domain, i.e., inverse-transformed.

      for(UInt i=0; i<pcResi->getNumberValidComponents(); i++)
      {
        const ComponentID compID=ComponentID(i);
        if (rTu.ProcessComponentSection(compID))
        {
          const TComRectangle &rectCompTU(rTu.getRect(compID));
          m_pcQTTempTComYuv[uiQTTempAccessLayer].copyPartToPartComponentMxN    ( compID, pcResi, rectCompTU );
        }
      }
    }
    else
    {
      for (UInt ch=0; ch < getNumberValidComponents(sps->getChromaFormatIdc()); ch++)
      {
        const ComponentID compID   = ComponentID(ch);
        if (rTu.ProcessComponentSection(compID))
        {
          const TComRectangle &rectCompTU(rTu.getRect(compID));
          const UInt numCoeffInBlock    = rectCompTU.width * rectCompTU.height;
          const UInt offset             = rTu.getCoefficientOffset(compID);
          TCoeff* dest                  = pcCU->getCoeff(compID)                        + offset;
          const TCoeff* src             = m_ppcQTTempCoeff[compID][uiQTTempAccessLayer] + offset;
          ::memcpy( dest, src, sizeof(TCoeff)*numCoeffInBlock );

#if ADAPTIVE_QP_SELECTION
          TCoeff* pcArlCoeffSrc            = m_ppcQTTempArlCoeff[compID][uiQTTempAccessLayer] + offset;
          TCoeff* pcArlCoeffDst            = pcCU->getArlCoeff(compID)                        + offset;
          ::memcpy( pcArlCoeffDst, pcArlCoeffSrc, sizeof( TCoeff ) * numCoeffInBlock );
#endif
        }
      }
    }
  }
  else
  {

    TComTURecurse tuRecurseChild(rTu, false);
    do
    {
      xSetInterResidualQTData( pcResi, bSpatial, tuRecurseChild );
    } while (tuRecurseChild.nextSection(rTu));
  }
}




UInt TEncSearch::xModeBitsIntra( TComDataCU* pcCU, UInt uiMode, UInt uiPartOffset, UInt uiDepth, const ChannelType chType )
{
  // Reload only contexts required for coding intra mode information
  m_pcRDGoOnSbacCoder->loadIntraDirMode( m_pppcRDSbacCoder[uiDepth][CI_CURR_BEST], chType );

  // Temporarily set the intra dir being tested, and only
  // for absPartIdx, since encodeIntraDirModeLuma/Chroma only use
  // the entry at absPartIdx.

  UChar &rIntraDirVal=pcCU->getIntraDir( chType )[uiPartOffset];
  UChar origVal=rIntraDirVal;
  rIntraDirVal = uiMode;
  //pcCU->setIntraDirSubParts ( chType, uiMode, uiPartOffset, uiDepth + uiInitTrDepth );

  m_pcEntropyCoder->resetBits();
  if (isLuma(chType))
  {
    m_pcEntropyCoder->encodeIntraDirModeLuma ( pcCU, uiPartOffset);
  }
  else
  {
    m_pcEntropyCoder->encodeIntraDirModeChroma ( pcCU, uiPartOffset);
  }

  rIntraDirVal = origVal; // restore

  return m_pcEntropyCoder->getNumberOfWrittenBits();
}




UInt TEncSearch::xUpdateCandList( UInt uiMode, Double uiCost, UInt uiFastCandNum, UInt * CandModeList, Double * CandCostList )
{
  UInt i;
  UInt shift=0;

  while ( shift<uiFastCandNum && uiCost<CandCostList[ uiFastCandNum-1-shift ] )
  {
    shift++;
  }

  if( shift!=0 )
  {
    for(i=1; i<shift; i++)
    {
      CandModeList[ uiFastCandNum-i ] = CandModeList[ uiFastCandNum-1-i ];
      CandCostList[ uiFastCandNum-i ] = CandCostList[ uiFastCandNum-1-i ];
    }
    CandModeList[ uiFastCandNum-shift ] = uiMode;
    CandCostList[ uiFastCandNum-shift ] = uiCost;
    return 1;
  }

  return 0;
}





/** add inter-prediction syntax elements for a CU block
 * \param pcCU
 * \param uiQp
 * \param uiTrMode
 * \param ruiBits
 * \returns Void
 */
Void  TEncSearch::xAddSymbolBitsInter( TComDataCU* pcCU, UInt& ruiBits )
{
  if(pcCU->getMergeFlag( 0 ) && pcCU->getPartitionSize( 0 ) == SIZE_2Nx2N && !pcCU->getQtRootCbf( 0 ))
  {
    pcCU->setSkipFlagSubParts( true, 0, pcCU->getDepth(0) );

    m_pcEntropyCoder->resetBits();
    if(pcCU->getSlice()->getPPS()->getTransquantBypassEnableFlag())
    {
      m_pcEntropyCoder->encodeCUTransquantBypassFlag(pcCU, 0, true);
    }
    m_pcEntropyCoder->encodeSkipFlag(pcCU, 0, true);
    m_pcEntropyCoder->encodeMergeIndex(pcCU, 0, true);

    ruiBits += m_pcEntropyCoder->getNumberOfWrittenBits();
  }
  else
  {
    m_pcEntropyCoder->resetBits();

    if(pcCU->getSlice()->getPPS()->getTransquantBypassEnableFlag())
    {
      m_pcEntropyCoder->encodeCUTransquantBypassFlag(pcCU, 0, true);
    }

    m_pcEntropyCoder->encodeSkipFlag ( pcCU, 0, true );
    m_pcEntropyCoder->encodePredMode( pcCU, 0, true );
    m_pcEntropyCoder->encodePartSize( pcCU, 0, pcCU->getDepth(0), true );
    m_pcEntropyCoder->encodePredInfo( pcCU, 0 );

    Bool codeDeltaQp = false;
    Bool codeChromaQpAdj = false;
    m_pcEntropyCoder->encodeCoeff   ( pcCU, 0, pcCU->getDepth(0), codeDeltaQp, codeChromaQpAdj );

    ruiBits += m_pcEntropyCoder->getNumberOfWrittenBits();
  }
}





/**
 * \brief Generate half-sample interpolated block
 *
 * \param pattern Reference picture ROI
 * \param biPred    Flag indicating whether block is for biprediction
 */
Void TEncSearch::xExtDIFUpSamplingH( TComPattern* pattern )
{
  Int width      = pattern->getROIYWidth();
  Int height     = pattern->getROIYHeight();
  Int srcStride  = pattern->getPatternLStride();

  Int intStride = m_filteredBlockTmp[0].getStride(COMPONENT_Y);
  Int dstStride = m_filteredBlock[0][0].getStride(COMPONENT_Y);
  Pel *intPtr;
  Pel *dstPtr;
  Int filterSize = NTAPS_LUMA;
  Int halfFilterSize = (filterSize>>1);
  Pel *srcPtr = pattern->getROIY() - halfFilterSize*srcStride - 1;

  const ChromaFormat chFmt = m_filteredBlock[0][0].getChromaFormat();

  m_if.filterHor(COMPONENT_Y, srcPtr, srcStride, m_filteredBlockTmp[0].getAddr(COMPONENT_Y), intStride, width+1, height+filterSize, 0, false, chFmt, pattern->getBitDepthY());
  m_if.filterHor(COMPONENT_Y, srcPtr, srcStride, m_filteredBlockTmp[2].getAddr(COMPONENT_Y), intStride, width+1, height+filterSize, 2, false, chFmt, pattern->getBitDepthY());

  intPtr = m_filteredBlockTmp[0].getAddr(COMPONENT_Y) + halfFilterSize * intStride + 1;
  dstPtr = m_filteredBlock[0][0].getAddr(COMPONENT_Y);
  m_if.filterVer(COMPONENT_Y, intPtr, intStride, dstPtr, dstStride, width+0, height+0, 0, false, true, chFmt, pattern->getBitDepthY());

  intPtr = m_filteredBlockTmp[0].getAddr(COMPONENT_Y) + (halfFilterSize-1) * intStride + 1;
  dstPtr = m_filteredBlock[2][0].getAddr(COMPONENT_Y);
  m_if.filterVer(COMPONENT_Y, intPtr, intStride, dstPtr, dstStride, width+0, height+1, 2, false, true, chFmt, pattern->getBitDepthY());

  intPtr = m_filteredBlockTmp[2].getAddr(COMPONENT_Y) + halfFilterSize * intStride;
  dstPtr = m_filteredBlock[0][2].getAddr(COMPONENT_Y);
  m_if.filterVer(COMPONENT_Y, intPtr, intStride, dstPtr, dstStride, width+1, height+0, 0, false, true, chFmt, pattern->getBitDepthY());

  intPtr = m_filteredBlockTmp[2].getAddr(COMPONENT_Y) + (halfFilterSize-1) * intStride;
  dstPtr = m_filteredBlock[2][2].getAddr(COMPONENT_Y);
  m_if.filterVer(COMPONENT_Y, intPtr, intStride, dstPtr, dstStride, width+1, height+1, 2, false, true, chFmt, pattern->getBitDepthY());
}





/**
 * \brief Generate quarter-sample interpolated blocks
 *
 * \param pattern    Reference picture ROI
 * \param halfPelRef Half-pel mv
 * \param biPred     Flag indicating whether block is for biprediction
 */
Void TEncSearch::xExtDIFUpSamplingQ( TComPattern* pattern, TComMv halfPelRef )
{
  Int width      = pattern->getROIYWidth();
  Int height     = pattern->getROIYHeight();
  Int srcStride  = pattern->getPatternLStride();

  Pel *srcPtr;
  Int intStride = m_filteredBlockTmp[0].getStride(COMPONENT_Y);
  Int dstStride = m_filteredBlock[0][0].getStride(COMPONENT_Y);
  Pel *intPtr;
  Pel *dstPtr;
  Int filterSize = NTAPS_LUMA;

  Int halfFilterSize = (filterSize>>1);

  Int extHeight = (halfPelRef.getVer() == 0) ? height + filterSize : height + filterSize-1;

  const ChromaFormat chFmt = m_filteredBlock[0][0].getChromaFormat();

  // Horizontal filter 1/4
  srcPtr = pattern->getROIY() - halfFilterSize * srcStride - 1;
  intPtr = m_filteredBlockTmp[1].getAddr(COMPONENT_Y);
  if (halfPelRef.getVer() > 0)
  {
    srcPtr += srcStride;
  }
  if (halfPelRef.getHor() >= 0)
  {
    srcPtr += 1;
  }
  m_if.filterHor(COMPONENT_Y, srcPtr, srcStride, intPtr, intStride, width, extHeight, 1, false, chFmt, pattern->getBitDepthY());

  // Horizontal filter 3/4
  srcPtr = pattern->getROIY() - halfFilterSize*srcStride - 1;
  intPtr = m_filteredBlockTmp[3].getAddr(COMPONENT_Y);
  if (halfPelRef.getVer() > 0)
  {
    srcPtr += srcStride;
  }
  if (halfPelRef.getHor() > 0)
  {
    srcPtr += 1;
  }
  m_if.filterHor(COMPONENT_Y, srcPtr, srcStride, intPtr, intStride, width, extHeight, 3, false, chFmt, pattern->getBitDepthY());

  // Generate @ 1,1
  intPtr = m_filteredBlockTmp[1].getAddr(COMPONENT_Y) + (halfFilterSize-1) * intStride;
  dstPtr = m_filteredBlock[1][1].getAddr(COMPONENT_Y);
  if (halfPelRef.getVer() == 0)
  {
    intPtr += intStride;
  }
  m_if.filterVer(COMPONENT_Y, intPtr, intStride, dstPtr, dstStride, width, height, 1, false, true, chFmt, pattern->getBitDepthY());

  // Generate @ 3,1
  intPtr = m_filteredBlockTmp[1].getAddr(COMPONENT_Y) + (halfFilterSize-1) * intStride;
  dstPtr = m_filteredBlock[3][1].getAddr(COMPONENT_Y);
  m_if.filterVer(COMPONENT_Y, intPtr, intStride, dstPtr, dstStride, width, height, 3, false, true, chFmt, pattern->getBitDepthY());

  if (halfPelRef.getVer() != 0)
  {
    // Generate @ 2,1
    intPtr = m_filteredBlockTmp[1].getAddr(COMPONENT_Y) + (halfFilterSize-1) * intStride;
    dstPtr = m_filteredBlock[2][1].getAddr(COMPONENT_Y);
    if (halfPelRef.getVer() == 0)
    {
      intPtr += intStride;
    }
    m_if.filterVer(COMPONENT_Y, intPtr, intStride, dstPtr, dstStride, width, height, 2, false, true, chFmt, pattern->getBitDepthY());

    // Generate @ 2,3
    intPtr = m_filteredBlockTmp[3].getAddr(COMPONENT_Y) + (halfFilterSize-1) * intStride;
    dstPtr = m_filteredBlock[2][3].getAddr(COMPONENT_Y);
    if (halfPelRef.getVer() == 0)
    {
      intPtr += intStride;
    }
    m_if.filterVer(COMPONENT_Y, intPtr, intStride, dstPtr, dstStride, width, height, 2, false, true, chFmt, pattern->getBitDepthY());
  }
  else
  {
    // Generate @ 0,1
    intPtr = m_filteredBlockTmp[1].getAddr(COMPONENT_Y) + halfFilterSize * intStride;
    dstPtr = m_filteredBlock[0][1].getAddr(COMPONENT_Y);
    m_if.filterVer(COMPONENT_Y, intPtr, intStride, dstPtr, dstStride, width, height, 0, false, true, chFmt, pattern->getBitDepthY());

    // Generate @ 0,3
    intPtr = m_filteredBlockTmp[3].getAddr(COMPONENT_Y) + halfFilterSize * intStride;
    dstPtr = m_filteredBlock[0][3].getAddr(COMPONENT_Y);
    m_if.filterVer(COMPONENT_Y, intPtr, intStride, dstPtr, dstStride, width, height, 0, false, true, chFmt, pattern->getBitDepthY());
  }

  if (halfPelRef.getHor() != 0)
  {
    // Generate @ 1,2
    intPtr = m_filteredBlockTmp[2].getAddr(COMPONENT_Y) + (halfFilterSize-1) * intStride;
    dstPtr = m_filteredBlock[1][2].getAddr(COMPONENT_Y);
    if (halfPelRef.getHor() > 0)
    {
      intPtr += 1;
    }
    if (halfPelRef.getVer() >= 0)
    {
      intPtr += intStride;
    }
    m_if.filterVer(COMPONENT_Y, intPtr, intStride, dstPtr, dstStride, width, height, 1, false, true, chFmt, pattern->getBitDepthY());

    // Generate @ 3,2
    intPtr = m_filteredBlockTmp[2].getAddr(COMPONENT_Y) + (halfFilterSize-1) * intStride;
    dstPtr = m_filteredBlock[3][2].getAddr(COMPONENT_Y);
    if (halfPelRef.getHor() > 0)
    {
      intPtr += 1;
    }
    if (halfPelRef.getVer() > 0)
    {
      intPtr += intStride;
    }
    m_if.filterVer(COMPONENT_Y, intPtr, intStride, dstPtr, dstStride, width, height, 3, false, true, chFmt, pattern->getBitDepthY());
  }
  else
  {
    // Generate @ 1,0
    intPtr = m_filteredBlockTmp[0].getAddr(COMPONENT_Y) + (halfFilterSize-1) * intStride + 1;
    dstPtr = m_filteredBlock[1][0].getAddr(COMPONENT_Y);
    if (halfPelRef.getVer() >= 0)
    {
      intPtr += intStride;
    }
    m_if.filterVer(COMPONENT_Y, intPtr, intStride, dstPtr, dstStride, width, height, 1, false, true, chFmt, pattern->getBitDepthY());

    // Generate @ 3,0
    intPtr = m_filteredBlockTmp[0].getAddr(COMPONENT_Y) + (halfFilterSize-1) * intStride + 1;
    dstPtr = m_filteredBlock[3][0].getAddr(COMPONENT_Y);
    if (halfPelRef.getVer() > 0)
    {
      intPtr += intStride;
    }
    m_if.filterVer(COMPONENT_Y, intPtr, intStride, dstPtr, dstStride, width, height, 3, false, true, chFmt, pattern->getBitDepthY());
  }

  // Generate @ 1,3
  intPtr = m_filteredBlockTmp[3].getAddr(COMPONENT_Y) + (halfFilterSize-1) * intStride;
  dstPtr = m_filteredBlock[1][3].getAddr(COMPONENT_Y);
  if (halfPelRef.getVer() == 0)
  {
    intPtr += intStride;
  }
  m_if.filterVer(COMPONENT_Y, intPtr, intStride, dstPtr, dstStride, width, height, 1, false, true, chFmt, pattern->getBitDepthY());

  // Generate @ 3,3
  intPtr = m_filteredBlockTmp[3].getAddr(COMPONENT_Y) + (halfFilterSize-1) * intStride;
  dstPtr = m_filteredBlock[3][3].getAddr(COMPONENT_Y);
  m_if.filterVer(COMPONENT_Y, intPtr, intStride, dstPtr, dstStride, width, height, 3, false, true, chFmt, pattern->getBitDepthY());
}





//! set wp tables
Void  TEncSearch::setWpScalingDistParam( TComDataCU* pcCU, Int iRefIdx, RefPicList eRefPicListCur )
{
  if ( iRefIdx<0 )
  {
    m_cDistParam.bApplyWeight = false;
    return;
  }

  TComSlice       *pcSlice  = pcCU->getSlice();
  WPScalingParam  *wp0 , *wp1;

  m_cDistParam.bApplyWeight = ( pcSlice->getSliceType()==P_SLICE && pcSlice->testWeightPred() ) || ( pcSlice->getSliceType()==B_SLICE && pcSlice->testWeightBiPred() ) ;

  if ( !m_cDistParam.bApplyWeight )
  {
    return;
  }

  Int iRefIdx0 = ( eRefPicListCur == REF_PIC_LIST_0 ) ? iRefIdx : (-1);
  Int iRefIdx1 = ( eRefPicListCur == REF_PIC_LIST_1 ) ? iRefIdx : (-1);

  getWpScaling( pcCU, iRefIdx0, iRefIdx1, wp0 , wp1 );

  if ( iRefIdx0 < 0 )
  {
    wp0 = NULL;
  }
  if ( iRefIdx1 < 0 )
  {
    wp1 = NULL;
  }

  m_cDistParam.wpCur  = NULL;

  if ( eRefPicListCur == REF_PIC_LIST_0 )
  {
    m_cDistParam.wpCur = wp0;
  }
  else
  {
    m_cDistParam.wpCur = wp1;
  }
}



//! \}
